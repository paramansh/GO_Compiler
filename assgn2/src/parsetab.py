
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALNOTleftORORleftAMPAMPleftORleftCARETleftAMPERSleftEQEQNOTEQleftLESSGREATLEQGEQleftLLGGleftPLUSMINUSleftTIMESDIVIDEMODAMPAMP AMPCAR AMPCAREQ AMPEQ AMPERS BREAK CAREQ CARET CASE CHAN COLON COLONEQ COMMA CONST CONSTANT CONTINUE DDD DEFAULT DEFER DIVIDE DIVIDEEQ DOT ELSE EQEQ EQUAL FALLTHROUGH FLOAT FOR FUNC GEQ GG GGEQ GO GOTO GREAT IDENTIFIER IF IMAGINARY IMPORT INTEGER INTERFACE LBRACE LBRACK LEQ LESS LL LLEQ LMINUS LPAREN MAP MINUS MINUSEQ MINUSMIN MOD MODEQ NOT NOTEQ OR OREQ OROR PACKAGE PLUS PLUSEQ PLUSPLUS RANGE RBRACE RBRACK RETURN RPAREN RUNE SELECT SEMICOL STRING STRUCT SWITCH TIMES TIMESEQ TYPE TYPEX VARstart : SourceType : TypeName \n\t\t\t| TypeLit \n\t\t\t| LPAREN Type RPARENTypeName : TYPEXTypeLit : ArrayType\n\t\t\t   | StructType\n\t\t\t   | PointerType\n\t\t\t   | FunctionTypeTypeOpt : Type\n\t\t\t   | epsilonArrayType : LBRACK ArrayLength RBRACK ElementType ArrayLength : Expression  ElementType : Type StructType : STRUCT LBRACE FieldDeclRep RBRACE FieldDeclRep : FieldDeclRep FieldDecl SEMICOL\n\t\t\t\t  | epsilon FieldDecl : IdentifierList Type TagOpt TagOpt : Tag\n\t\t\t | epsilon  Tag : STRING PointerType : TIMES BaseTypeBaseType : TypeFunctionType : FUNC SignatureSignature : Parameters ResultOptResultOpt : Result\n\t\t\t\t | epsilonResult : Parameters\n\t\t\t  | TypeParameters : LPAREN ParameterListOpt RPARENParameterListOpt : ParametersList\n\t\t\t\t\t\t| epsilonParametersList : Type\n\t\t\t\t\t  | IdentifierList Type\n\t\t\t\t\t  | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n\t\t\t\t\t\t\t | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n\t\t\t\t\t | TypeBlock : LBRACE StatementList RBRACEStatementList : StatementRepStatementRep : StatementRep Statement SEMICOL\n\t\t\t\t\t| epsilonDeclaration : ConstDecl\n\t\t\t\t\t| TypeDecl\n\t\t\t\t\t| VarDeclTopLevelDecl : Declaration\n\t\t\t\t\t| FunctionDeclConstDecl : CONST ConstSpec\n\t\t\t\t | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOL\n\t\t\t\t\t| epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : TypeOpt EQUAL ExpressionList\n\t\t\t\t\t   | epsilonIdentifierList : IDENTIFIER IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n\t\t\t\t\t | epsilonTypeDecl : TYPE TypeSpec\n\t\t\t\t| TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOL\n\t\t\t\t   | epsilonTypeSpec : AliasDecl\n\t\t\t\t| TypeDefAliasDecl : IDENTIFIER EQUAL TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n\t\t\t   | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOL\n\t\t\t\t  | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n\t\t\t   | IdentifierList EQUAL ExpressionListExpressionListOpt : EQUAL ExpressionList\n\t\t\t\t\t\t | epsilon ShortVarDecl : IDENTIFIER COLONEQ Expression FunctionDecl : FUNC FunctionName Function\n\t\t\t\t\t| FUNC FunctionName SignatureFunctionName : IDENTIFIERFunction : Signature FunctionBodyFunctionBody : BlockQualifiedIdent : IDENTIFIER DOT TypeNameOperand : Literal\n\t\t\t   | OperandName\n\t\t\t   | LPAREN Expression RPARENLiteral : BasicLitBasicLit : INTEGER\n\t\t\t\t| FLOAT\n\t\t\t\t| IMAGINARY\n\t\t\t\t| RUNE\n\t\t\t\t| STRINGOperandName : IDENTIFIERCompositeLit : LiteralType LiteralValueLiteralType : ArrayType\n\t\t\t\t   | ElementType\n\t\t\t\t   | TypeNameLiteralValue : LBRACE ElementListOpt RBRACEElementListOpt : ElementList\n\t\t\t\t\t\t   | epsilonElementList : KeyedElement KeyedElementCommaRepKeyedElementCommaRep : KeyedElementCommaRep COMMA KeyedElement\n\t\t\t\t\t\t\t| epsilonKeyedElement : Key COLON Element\n\t\t\t\t\t| ElementKey : FieldName\n\t\t   | Expression\n\t\t   | LiteralValueFieldName : IDENTIFIERElement : Expression\n\t\t\t   | LiteralValueConversion : Type LPAREN Expression RPARENPrimaryExpr : Operand\n\t\t\t\t   | Conversion\n\t\t\t\t   | PrimaryExpr Selector\n\t\t\t\t   | PrimaryExpr Index\n\t\t\t\t   | PrimaryExpr Slice\n\t\t\t\t   | PrimaryExpr TypeAssertion\n\t\t\t\t   | PrimaryExpr ArgumentsSelector : DOT IDENTIFIERIndex : LBRACK Expression RBRACKSlice : LBRACK ExpressionOpt COLON ExpressionOpt RBRACK\n\t\t\t | LBRACK ExpressionOpt COLON Expression COLON Expression RBRACKTypeAssertion : DOT LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n\t\t\t\t\t\t\t | epsilonExpressionListCommaOpt : COMMA ExpressionList\n\t\t\t\t\t\t\t  | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n\t\t\t\t\t | epsilonExpression : UnaryExpr\n\t\t\t\t  | Expression BinaryOp ExpressionExpressionOpt : Expression\n\t\t\t\t\t | epsilonUnaryExpr : PrimaryExpr\n\t\t\t\t | UnaryOp UnaryExprBinaryOp : OROR\n\t\t\t\t| AMPAMP\n\t\t\t\t| RelOp\n\t\t\t\t| AddOp\n\t\t\t\t| MulOpRelOp : EQEQ\n\t\t\t | NOTEQ\n\t\t\t | LESS\n\t\t\t | GREAT\n\t\t\t | LEQ\n\t\t\t | GEQAddOp : PLUS\n\t\t\t | MINUS\n\t\t\t | OR\n\t\t\t | CARETMulOp : TIMES\n\t\t\t | DIVIDE\n\t\t\t | MOD\n\t\t\t | AMPERS\n\t\t\t | LL\n\t\t\t | GG\n\t\t\t | AMPCARUnaryOp : PLUS\n\t\t\t   | MINUS\n\t\t\t   | TIMES\n\t\t\t   | AMPERS\n\t\t\t   | NOT Statement : Declaration\n\t\t\t\t | LabeledStmt\n\t\t\t\t | SimpleStmt\n\t\t\t\t | ReturnStmt\n\t\t\t\t | BreakStmt\n\t\t\t\t | ContinueStmt\n\t\t\t\t | GotoStmt\n\t\t\t\t | Block\n\t\t\t\t | IfStmt\n\t\t\t\t | SwitchStmt\n\t\t\t\t | ForStmt SimpleStmt : epsilon\n\t\t\t\t  | ExpressionStmt\n\t\t\t\t  | IncDecStmt\n\t\t\t\t  | Assignment\n\t\t\t\t  | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression PLUSPLUS\n\t\t\t\t\t| Expression MINUSMIN Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQ\n\t\t\t\t| MINUSEQ\n\t\t\t\t| TIMESEQ\n\t\t\t\t| DIVIDEEQ\n\t\t\t\t| MODEQ\n\t\t\t\t| AMPEQ\n\t\t\t\t| OREQ\n\t\t\t\t| CAREQ\n\t\t\t\t| LLEQ\n\t\t\t\t| GGEQ\n\t\t\t\t| EQUAL  IfStmt : IF Expression Block ElseOpt  SimpleStmtOpt : SimpleStmt SEMICOL\n\t\t\t\t\t\t| epsilon  ElseOpt : ELSE IfStmt\n\t\t\t\t| ELSE Block\n\t\t\t\t| epsilon  SwitchStmt : ExprSwitchStmt\n\t\t\t\t\t| TypeSwitchStmt  ExprSwitchStmt : SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE ExprCaseClauseRep : ExprCaseClauseRep ExprCaseClause\n\t\t\t\t\t\t\t| epsilon ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n\t\t\t\t\t\t| DEFAULT  TypeSwitchStmt : SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE TypeSwitchGuard : IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN  IdentifierOpt : IDENTIFIER COLONEQ\n\t\t\t\t\t\t| epsilon  TypeCaseClauseOpt : TypeCaseClauseOpt TypeCaseClause\n\t\t\t\t\t\t\t| epsilon  TypeCaseClause : TypeSwitchCase COLON StatementList TypeSwitchCase : CASE TypeList\n\t\t\t\t\t\t| DEFAULT  TypeList : Type TypeRep TypeRep : TypeRep COMMA Type\n\t\t\t\t| epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n\t\t\t\t| Condition\n\t\t\t\t| ForClauseCondition : Expression ForClause : SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmtConditionOpt : epsilon\n\t\t\t| Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n\t\t\t\t| ExpressionIdentifierExpressionIdentifier : ExpressionList EQUALReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n\t\t\t\t| epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n\t\t\t| epsilon GotoStmt : GOTO Label Source : PackageClause SEMICOL ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n\t\t\t| ImportDeclRep ImportDecl SEMICOLTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOL\n\t\t\t\t\t\t| epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n\t\t\t| IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOL\n\t\t\t\t| epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n\t\t\t\t\t\t\t| PackageName\n\t\t\t\t\t\t\t| epsilon ImportPath : STRING epsilon : '
    
_lr_action_items = {'OROR':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,162,-87,-85,-111,162,-136,-114,-115,-113,-116,-117,162,162,-118,162,-84,162,-91,162,-119,-123,-110,-91,162,162,162,162,162,-122,162,-120,162,162,-121,]),'CARET':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,163,-87,-85,-111,163,-136,-114,-115,-113,-116,-117,163,163,-118,163,-84,163,-91,163,-119,-123,-110,-91,163,163,163,163,163,-122,163,-120,163,163,-121,]),'GREAT':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,164,-87,-85,-111,164,-136,-114,-115,-113,-116,-117,164,164,-118,164,-84,164,-91,164,-119,-123,-110,-91,164,164,164,164,164,-122,164,-120,164,164,-121,]),'SEMICOL':([1,6,7,12,15,16,17,18,19,22,26,31,33,34,38,41,42,44,48,49,53,55,56,57,58,59,65,66,67,68,69,70,71,72,77,81,82,83,84,85,86,87,88,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,121,122,123,124,132,133,134,135,137,138,139,140,141,144,145,148,149,150,152,153,154,185,187,188,190,195,196,197,199,201,208,211,212,214,215,216,217,218,219,220,221,222,224,225,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,243,245,246,253,255,256,258,259,260,261,262,263,264,265,267,270,271,272,273,274,275,277,279,294,295,296,297,300,301,302,303,304,307,308,309,310,317,318,319,320,322,323,324,325,331,333,337,344,345,346,349,351,359,],[5,-249,-250,24,-48,35,-47,-44,-45,-46,-251,-49,-260,-260,-67,-64,-63,-59,-255,-259,-6,-3,-2,-5,-7,-55,-53,-8,-9,-58,-56,-76,-260,-77,-260,-66,-252,142,143,-50,-24,-23,-22,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-26,-79,-260,-80,-68,194,-72,-260,-74,-71,-60,198,-65,-4,-54,-136,-114,-115,-113,-116,-117,-57,-260,-43,-30,-128,-130,-73,252,-15,-118,-14,-12,-84,-132,-169,-176,259,-178,-165,-205,-260,-204,-172,-177,-170,-260,-171,-173,-260,-260,-164,-91,-175,-182,-260,-167,-166,-174,-179,-168,-40,-260,-119,-123,-110,-42,-236,-238,-237,-260,309,-91,-175,-182,-242,-181,-240,-241,311,-175,-182,-183,-184,-239,-243,-129,-21,-20,-19,-18,-122,-180,-260,-224,-75,-185,-260,-120,-231,-230,335,-228,-203,-198,-206,-201,-202,-121,-260,-212,-260,]),'CONST':([5,8,9,10,11,24,35,123,187,188,259,263,349,359,],[-260,-245,-260,14,-248,-246,-247,-260,14,-43,-42,14,-260,-260,]),'FUNC':([5,8,9,10,11,24,33,34,35,40,45,60,61,64,68,69,71,73,76,80,90,93,97,98,101,107,109,112,120,123,126,136,151,155,157,158,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,209,213,222,228,232,244,247,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,350,355,359,365,],[-260,-245,-260,20,-248,-246,52,-260,-247,52,52,52,52,52,-58,-56,52,52,52,52,52,52,-160,-163,-159,-161,52,-162,52,-260,52,52,52,52,52,52,52,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,52,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,52,-43,-30,52,52,52,52,-161,52,52,52,52,52,52,52,-42,52,-200,-260,52,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,52,-190,52,-199,-215,52,52,-214,52,52,-260,52,52,-260,52,]),'AMPCAR':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,165,-87,-85,-111,165,-136,-114,-115,-113,-116,-117,165,165,-118,165,-84,165,-91,165,-119,-123,-110,-91,165,165,165,165,165,-122,165,-120,165,165,-121,]),'LESS':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,166,-87,-85,-111,166,-136,-114,-115,-113,-116,-117,166,166,-118,166,-84,166,-91,166,-119,-123,-110,-91,166,166,166,166,166,-122,166,-120,166,166,-121,]),'EQEQ':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,167,-87,-85,-111,167,-136,-114,-115,-113,-116,-117,167,167,-118,167,-84,167,-91,167,-119,-123,-110,-91,167,167,167,167,167,-122,167,-120,167,167,-121,]),'GGEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,287,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'EQUAL':([33,34,40,45,53,54,55,56,57,58,59,62,66,67,68,69,71,77,86,87,88,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,121,144,148,149,150,152,153,154,185,190,195,196,201,208,211,212,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-260,-260,76,80,-6,-10,-3,-2,-5,-7,-11,90,-8,-9,-58,-56,-260,136,-24,-23,-22,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-26,-4,-136,-114,-115,-113,-116,-117,-57,-30,-128,-130,-15,-118,-14,-12,-84,-132,-91,282,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'GOTO':([123,187,188,259,263,349,359,],[-260,242,-43,-42,242,-260,-260,]),'CAREQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,283,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'COLONEQ':([234,265,316,],[280,280,330,]),'AMPAMP':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,168,-87,-85,-111,168,-136,-114,-115,-113,-116,-117,168,168,-118,168,-84,168,-91,168,-119,-123,-110,-91,168,168,168,168,168,-122,168,-120,168,168,-121,]),'RETURN':([123,187,188,259,263,349,359,],[-260,222,-43,-42,222,-260,-260,]),'RUNE':([64,76,90,93,97,98,101,107,109,112,123,136,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,213,222,228,232,244,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,359,],[96,96,96,96,-160,-163,-159,-161,96,-162,-260,96,96,96,96,96,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,96,-140,-153,-152,-157,-139,-155,-146,-150,-154,96,-43,-161,96,96,96,96,96,96,-42,96,-200,-260,96,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,96,-190,96,-199,-215,96,96,-214,96,96,-260,-260,]),'MINUS':([64,76,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114,123,135,136,148,149,150,151,152,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,204,208,210,213,214,215,222,228,232,234,237,244,251,254,255,256,258,259,263,265,270,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,298,300,306,307,309,317,320,321,325,334,335,336,346,349,359,],[97,97,97,-112,97,-135,-82,-89,-160,-163,-83,-159,-86,-88,-91,-90,-131,-161,97,170,-87,-162,-85,-111,-260,170,97,-136,-114,-115,97,-113,-116,-117,97,97,97,170,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,97,-140,-153,-152,-157,-139,-155,-146,-150,-154,97,-43,170,-118,170,-161,-84,170,97,97,97,-91,170,97,97,97,-119,-123,-110,-42,97,-91,170,170,97,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,97,-190,170,170,170,-122,97,170,-120,97,170,170,97,97,-121,-260,-260,]),'DOT':([13,25,46,47,92,94,95,96,99,102,103,104,105,111,113,114,142,149,150,152,153,154,208,214,234,255,256,258,265,307,320,329,346,],[30,-260,-254,30,-112,156,-82,-89,-83,-86,-88,-91,-90,-87,-85,-111,-253,-114,-115,-113,-116,-117,-118,-84,-91,-119,-123,-110,-91,-122,-120,343,-121,]),'RBRACE':([91,123,146,147,187,188,189,252,259,312,326,327,328,340,341,342,349,353,356,359,363,],[-260,-260,201,-17,-41,-43,246,-16,-42,-260,-208,337,-260,-207,-217,351,-260,-216,-209,-260,-218,]),'CASE':([187,188,259,312,326,327,328,340,341,342,349,353,356,359,363,],[-41,-43,-42,-260,-208,336,-260,-207,-217,350,-260,-216,-209,-260,-218,]),'GEQ':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,171,-87,-85,-111,171,-136,-114,-115,-113,-116,-117,171,171,-118,171,-84,171,-91,171,-119,-123,-110,-91,171,171,171,171,171,-122,171,-120,171,171,-121,]),'RPAREN':([25,32,39,43,46,47,50,51,53,55,56,57,58,66,67,71,73,74,75,78,79,86,87,88,89,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,120,121,125,127,128,129,131,135,142,143,144,148,149,150,152,153,154,155,159,161,186,190,191,194,195,196,198,201,205,206,207,208,210,211,212,214,215,248,249,250,255,256,257,258,299,300,307,320,346,360,],[-260,-260,-260,-260,-254,82,85,-52,-6,-3,-2,-5,-7,-8,-9,-260,-260,132,-70,139,-62,-24,-23,-22,144,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-260,-26,190,-35,-33,-31,-32,-260,-253,-51,-4,-136,-114,-115,-113,-116,-117,-260,144,214,144,-30,-34,-69,-128,-130,-61,-15,-125,-124,256,-118,258,-14,-12,-84,-132,-39,-36,-37,-119,-123,307,-110,-38,-129,-122,-120,-121,364,]),'TIMESEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,284,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'LL':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,172,-87,-85,-111,172,-136,-114,-115,-113,-116,-117,172,172,-118,172,-84,172,-91,172,-119,-123,-110,-91,172,172,172,172,172,-122,172,-120,172,172,-121,]),'MODEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,286,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'PLUS':([64,76,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114,123,135,136,148,149,150,151,152,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,204,208,210,213,214,215,222,228,232,234,237,244,251,254,255,256,258,259,263,265,270,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,298,300,306,307,309,317,320,321,325,334,335,336,346,349,359,],[101,101,101,-112,101,-135,-82,-89,-160,-163,-83,-159,-86,-88,-91,-90,-131,-161,101,174,-87,-162,-85,-111,-260,174,101,-136,-114,-115,101,-113,-116,-117,101,101,101,174,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,101,-140,-153,-152,-157,-139,-155,-146,-150,-154,101,-43,174,-118,174,-161,-84,174,101,101,101,-91,174,101,101,101,-119,-123,-110,-42,101,-91,174,174,101,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,101,-190,174,174,174,-122,101,174,-120,101,174,174,101,101,-121,-260,-260,]),'MINUSEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,290,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'SWITCH':([123,187,188,259,263,349,359,],[-260,232,-43,-42,232,-260,-260,]),'COLON':([53,55,56,57,58,66,67,71,86,87,88,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,121,135,144,148,149,150,151,152,153,154,190,195,196,201,202,203,204,208,211,212,214,215,223,234,255,256,258,300,306,307,320,338,339,346,348,352,354,357,358,361,362,366,],[-6,-3,-2,-5,-7,-8,-9,-260,-24,-23,-22,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-26,-260,-4,-136,-114,-115,-260,-113,-116,-117,-30,-128,-130,-15,254,-134,-133,-118,-14,-12,-84,-132,263,-181,-119,-123,-110,-129,321,-122,-120,349,-211,-121,-210,359,-220,-260,-219,-221,-223,-222,]),'TYPEX':([33,34,40,45,60,61,64,68,69,71,73,76,80,90,93,97,98,101,107,109,112,120,123,126,136,151,155,157,158,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,209,213,222,228,232,244,247,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,350,355,359,365,],[57,-260,57,57,57,57,57,-58,-56,57,57,57,57,57,57,-160,-163,-159,-161,57,-162,57,-260,57,57,57,57,57,57,57,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,57,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,57,-43,-30,57,57,57,57,-161,57,57,57,57,57,57,57,-42,57,-200,-260,57,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,57,-190,57,-199,-215,57,57,-214,57,57,-260,57,57,-260,57,]),'COMMA':([34,53,55,56,57,58,66,67,68,69,71,86,87,88,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,121,127,128,130,135,144,148,149,150,152,153,154,185,186,190,191,195,196,201,208,211,212,214,215,234,237,248,249,250,255,256,258,265,270,279,299,300,307,320,346,357,361,362,366,],[-260,-6,-3,-2,-5,-7,-8,-9,-58,115,-260,-24,-23,-22,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-26,192,-39,193,-260,-4,-136,-114,-115,-113,-116,-117,-57,-39,-30,-38,251,-130,-15,-118,-14,-12,-84,-132,-91,-260,-39,-36,-37,-119,-123,-110,-91,-260,-260,-38,-129,-122,-120,-121,-260,365,-223,-222,]),'IMAGINARY':([64,76,90,93,97,98,101,107,109,112,123,136,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,213,222,228,232,244,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,359,],[103,103,103,103,-160,-163,-159,-161,103,-162,-260,103,103,103,103,103,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,103,-140,-153,-152,-157,-139,-155,-146,-150,-154,103,-43,-161,103,103,103,103,103,103,-42,103,-200,-260,103,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,103,-190,103,-199,-215,103,103,-214,103,103,-260,-260,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,39,43,46,47,50,51,64,73,74,75,76,78,79,90,91,93,97,98,101,107,109,112,115,120,123,136,142,143,146,147,151,155,156,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,192,193,194,198,213,222,228,231,232,238,242,244,251,252,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,343,349,359,],[7,7,34,36,34,45,-260,-260,-260,-260,-254,7,34,-52,104,34,34,-70,104,45,-62,104,-260,104,-160,-163,-159,-161,104,-162,185,34,-260,104,-253,-51,34,-17,104,104,208,104,104,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,104,-140,-153,-152,-157,-139,-155,-146,-150,-154,234,-43,34,34,-69,-61,-161,104,265,272,265,272,272,104,104,-16,104,-42,234,-200,316,104,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,104,-190,104,-199,-215,104,104,-214,265,104,208,-260,-260,]),'DIVIDEEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,293,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'$end':([3,4,5,8,9,10,11,24,35,],[-1,0,-260,-245,-260,-244,-248,-246,-247,]),'STRING':([7,13,25,27,28,29,30,46,47,53,55,56,57,58,64,66,67,71,76,86,87,88,90,93,97,98,101,107,109,112,116,117,118,119,121,123,136,142,144,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,190,201,211,212,213,222,228,232,244,251,253,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,359,],[-250,-260,-260,-258,-257,49,-256,-254,-260,-6,-3,-2,-5,-7,105,-8,-9,-260,105,-24,-23,-22,105,105,-160,-163,-159,-161,105,-162,-28,-29,-25,-27,-26,-260,105,-253,-4,105,105,105,105,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,105,-140,-153,-152,-157,-139,-155,-146,-150,-154,105,-43,-30,-15,-14,-12,-161,105,105,105,105,105,301,105,-42,105,-200,-260,105,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,105,-190,105,-199,-215,105,105,-214,105,105,-260,-260,]),'FOR':([123,187,188,259,263,349,359,],[-260,228,-43,-42,228,-260,-260,]),'PACKAGE':([0,],[2,]),'PLUSPLUS':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,208,214,215,234,237,255,256,258,265,270,279,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-118,-84,-132,-91,294,-119,-123,-110,-91,294,294,-122,-120,-121,]),'RBRACK':([92,94,95,96,99,102,103,104,105,106,108,110,111,113,114,148,149,150,152,153,154,203,204,208,214,215,254,255,256,258,305,306,307,320,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,158,-13,-87,-85,-111,-136,-114,-115,-113,-116,-117,-134,255,-118,-84,-132,-260,-119,-123,-110,320,-133,-122,-120,346,-121,]),'LLEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,288,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'DIVIDE':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,177,-87,-85,-111,177,-136,-114,-115,-113,-116,-117,177,177,-118,177,-84,177,-91,177,-119,-123,-110,-91,177,177,177,177,177,-122,177,-120,177,177,-121,]),'TIMES':([33,34,40,45,60,61,64,68,69,71,73,76,80,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114,120,123,126,135,136,148,149,150,151,152,153,154,155,157,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,204,208,209,210,213,214,215,222,228,232,234,237,244,247,251,254,255,256,258,259,263,265,270,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,298,300,306,307,309,311,313,315,317,320,321,325,330,334,335,336,346,349,350,355,359,365,],[60,-260,60,60,60,60,107,-58,-56,60,60,107,60,107,-112,107,-135,-82,-89,-160,-163,-83,-159,-86,-88,-91,-90,-131,-161,107,178,-87,-162,-85,-111,60,-260,60,178,107,-136,-114,-115,107,-113,-116,-117,107,107,60,213,178,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,107,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,107,-43,-30,60,60,60,178,-118,60,178,-161,-84,178,107,107,107,-91,178,107,60,107,107,-119,-123,-110,-42,107,-91,178,-200,-260,178,107,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,107,-190,178,178,178,-122,107,-199,-215,60,178,-120,107,178,-214,178,107,107,-121,-260,60,60,-260,60,]),'GG':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,179,-87,-85,-111,179,-136,-114,-115,-113,-116,-117,179,179,-118,179,-84,179,-91,179,-119,-123,-110,-91,179,179,179,179,179,-122,179,-120,179,179,-121,]),'MINUSMIN':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,208,214,215,234,237,255,256,258,265,270,279,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-118,-84,-132,-91,295,-119,-123,-110,-91,295,295,-122,-120,-121,]),'AMPEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,291,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'LPAREN':([13,14,21,23,33,34,36,37,40,45,52,53,55,56,57,58,60,61,64,66,67,68,69,71,73,76,80,86,87,88,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,114,116,117,118,119,120,121,123,126,136,144,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,201,208,209,211,212,213,214,222,228,232,234,244,247,251,254,255,256,258,259,263,265,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,307,309,311,313,315,320,321,329,330,335,336,343,346,349,350,355,359,365,],[25,32,39,43,61,-260,-78,73,61,61,73,-6,-3,-2,-5,-7,61,61,109,-8,-9,-58,-56,120,61,109,61,-24,-23,-22,109,-112,109,155,-82,-89,-160,-163,-83,157,-159,-86,-88,-91,-90,-161,160,-87,-162,-85,-111,-28,-29,-25,-27,61,-26,-260,61,109,-4,-114,-115,109,-113,-116,-117,109,209,109,61,157,160,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,109,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,109,-43,-30,61,61,61,-15,-118,61,-14,-12,-161,-84,109,109,109,-91,109,61,109,109,-119,-123,-110,-42,109,-91,-200,-260,109,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,109,-190,-122,109,-199,-215,109,-120,109,155,-214,109,109,355,-121,-260,61,61,-260,61,]),'IMPORT':([5,8,9,24,],[-260,-245,13,-246,]),'VAR':([5,8,9,10,11,24,35,123,187,188,259,263,349,359,],[-260,-245,-260,21,-248,-246,-247,-260,21,-43,-42,21,-260,-260,]),'NOTEQ':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,173,-87,-85,-111,173,-136,-114,-115,-113,-116,-117,173,173,-118,173,-84,173,-91,173,-119,-123,-110,-91,173,173,173,173,173,-122,173,-120,173,173,-121,]),'ELSE':([246,319,],[-40,332,]),'IF':([123,187,188,259,263,332,349,359,],[-260,244,-43,-42,244,244,-260,-260,]),'LBRACE':([53,55,56,57,58,63,66,67,71,72,86,87,88,92,94,95,96,99,102,103,104,105,106,111,113,114,116,117,118,119,121,123,135,144,148,149,150,152,153,154,187,188,190,195,196,201,208,211,212,214,215,217,219,226,228,232,235,237,243,255,256,258,259,263,265,266,267,268,269,270,276,277,279,294,295,298,300,307,314,317,318,320,332,335,346,347,349,359,364,],[-6,-3,-2,-5,-7,91,-8,-9,-260,123,-24,-23,-22,-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-28,-29,-25,-27,-26,-260,-260,-4,-136,-114,-115,-113,-116,-117,123,-43,-30,-128,-130,-15,-118,-14,-12,-84,-132,-176,-178,-177,-260,-260,-175,-182,-179,-119,-123,-110,-42,123,-91,-226,-225,123,-227,-228,312,-134,-133,-183,-184,123,-129,-122,328,-75,-185,-120,123,-260,-121,-229,-260,-260,-213,]),'STRUCT':([33,34,40,45,60,61,64,68,69,71,73,76,80,90,93,97,98,101,107,109,112,120,123,126,136,151,155,157,158,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,209,213,222,228,232,244,247,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,350,355,359,365,],[63,-260,63,63,63,63,63,-58,-56,63,63,63,63,63,63,-160,-163,-159,-161,63,-162,63,-260,63,63,63,63,63,63,63,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,63,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,63,-43,-30,63,63,63,63,-161,63,63,63,63,63,63,63,-42,63,-200,-260,63,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,63,-190,63,-199,-215,63,63,-214,63,63,-260,63,63,-260,63,]),'PLUSEQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,285,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'INTEGER':([64,76,90,93,97,98,101,107,109,112,123,136,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,213,222,228,232,244,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,359,],[102,102,102,102,-160,-163,-159,-161,102,-162,-260,102,102,102,102,102,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,102,-140,-153,-152,-157,-139,-155,-146,-150,-154,102,-43,-161,102,102,102,102,102,102,-42,102,-200,-260,102,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,102,-190,102,-199,-215,102,102,-214,102,102,-260,-260,]),'FLOAT':([64,76,90,93,97,98,101,107,109,112,123,136,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,213,222,228,232,244,251,254,259,263,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,311,313,315,321,330,335,336,349,359,],[111,111,111,111,-160,-163,-159,-161,111,-162,-260,111,111,111,111,111,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,111,-140,-153,-152,-157,-139,-155,-146,-150,-154,111,-43,-161,111,111,111,111,111,111,-42,111,-200,-260,111,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,111,-190,111,-199,-215,111,111,-214,111,111,-260,-260,]),'AMPERS':([64,76,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114,123,135,136,148,149,150,151,152,153,154,155,157,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,204,208,210,213,214,215,222,228,232,234,237,244,251,254,255,256,258,259,263,265,270,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,298,300,306,307,309,317,320,321,325,334,335,336,346,349,359,],[112,112,112,-112,112,-135,-82,-89,-160,-163,-83,-159,-86,-88,-91,-90,-131,-161,112,181,-87,-162,-85,-111,-260,181,112,-136,-114,-115,112,-113,-116,-117,112,112,112,181,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,112,-140,-153,-152,-157,-139,-155,-146,-150,-154,112,-43,181,-118,181,-161,-84,181,112,112,112,-91,181,112,112,112,-119,-123,-110,-42,112,-91,181,181,112,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,112,-190,181,181,181,-122,112,181,-120,112,181,181,112,112,-121,-260,-260,]),'LBRACK':([33,34,40,45,60,61,64,68,69,71,73,76,80,90,92,93,94,95,96,97,98,99,101,102,103,104,105,107,109,111,112,113,114,120,123,126,136,149,150,151,152,153,154,155,157,158,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,188,190,192,193,200,208,209,213,214,222,228,232,234,244,247,251,254,255,256,258,259,263,265,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,307,309,311,313,315,320,321,329,330,335,336,346,349,350,355,359,365,],[64,-260,64,64,64,64,64,-58,-56,64,64,64,64,64,-112,64,151,-82,-89,-160,-163,-83,-159,-86,-88,-91,-90,-161,64,-87,-162,-85,-111,64,-260,64,64,-114,-115,64,-113,-116,-117,64,64,64,64,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,64,-140,-153,-152,-157,-139,-155,-146,-150,-154,-57,64,-43,-30,64,64,64,-118,64,-161,-84,64,64,64,-91,64,64,64,64,-119,-123,-110,-42,64,-91,-200,-260,64,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,64,-190,-122,64,-199,-215,64,-120,64,151,-214,64,64,-121,-260,64,64,-260,64,]),'DEFAULT':([187,188,259,312,326,327,328,340,341,342,349,353,356,359,363,],[-41,-43,-42,-260,-208,339,-260,-207,-217,354,-260,-216,-209,-260,-218,]),'OREQ':([92,94,95,96,99,102,103,104,105,106,111,113,114,148,149,150,152,153,154,195,196,208,214,215,234,236,237,255,256,258,265,270,279,300,307,320,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,-87,-85,-111,-136,-114,-115,-113,-116,-117,-128,-130,-118,-84,-132,-91,289,-260,-119,-123,-110,-91,-260,-260,-129,-122,-120,-121,]),'BREAK':([123,187,188,259,263,349,359,],[-260,238,-43,-42,238,-260,-260,]),'LEQ':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,182,-87,-85,-111,182,-136,-114,-115,-113,-116,-117,182,182,-118,182,-84,182,-91,182,-119,-123,-110,-91,182,182,182,182,182,-122,182,-120,182,182,-121,]),'CONTINUE':([123,187,188,259,263,349,359,],[-260,231,-43,-42,231,-260,-260,]),'NOT':([64,76,90,93,97,98,101,107,109,112,123,136,151,155,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,213,222,228,232,244,251,254,259,263,280,281,282,283,284,285,286,287,288,289,290,291,292,293,309,321,335,336,349,359,],[98,98,98,98,-160,-163,-159,-161,98,-162,-260,98,98,98,98,98,-137,-151,-145,-158,-144,-142,-138,-141,-149,-147,-156,-143,-148,98,-140,-153,-152,-157,-139,-155,-146,-150,-154,98,-43,-161,98,98,98,98,98,98,-42,98,98,-186,-197,-194,-189,-187,-191,-196,-195,-193,-188,-192,98,-190,98,98,98,98,-260,-260,]),'TYPE':([5,8,9,10,11,24,35,123,187,188,259,263,349,355,359,],[-260,-245,-260,23,-248,-246,-247,-260,23,-43,-42,23,-260,360,-260,]),'OR':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,183,-87,-85,-111,183,-136,-114,-115,-113,-116,-117,183,183,-118,183,-84,183,-91,183,-119,-123,-110,-91,183,183,183,183,183,-122,183,-120,183,183,-121,]),'MOD':([92,94,95,96,99,102,103,104,105,106,110,111,113,114,135,148,149,150,152,153,154,161,204,208,210,214,215,234,237,255,256,258,265,270,279,298,300,306,307,317,320,325,334,346,],[-112,-135,-82,-89,-83,-86,-88,-91,-90,-131,184,-87,-85,-111,184,-136,-114,-115,-113,-116,-117,184,184,-118,184,-84,184,-91,184,-119,-123,-110,-91,184,184,184,184,184,-122,184,-120,184,184,-121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([72,],[122,]),'Conversion':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'ContinueStmt':([187,263,],[216,216,]),'ParameterListOpt':([73,120,],[125,125,]),'ExpressionRep':([135,237,270,279,],[195,195,195,195,]),'ExpressionStmt':([187,228,232,263,335,],[217,217,217,217,217,]),'Statement':([187,263,],[218,308,]),'ParameterDeclCommaRep':([73,120,],[127,127,]),'IfStmt':([187,263,332,],[225,225,344,]),'StatementRep':([123,349,359,],[187,187,187,]),'AliasDecl':([23,78,],[42,42,]),'TypeSwitchGuard':([278,],[314,]),'PackageNameDotOpt':([13,47,],[29,29,]),'TypeName':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'BinaryOp':([110,135,161,204,210,215,237,270,279,298,300,306,317,325,334,],[175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,]),'ExprCaseClause':([327,],[340,]),'ParametersList':([73,120,],[129,129,]),'ParameterDecl':([73,120,192,193,],[130,130,249,250,]),'FunctionName':([20,],[37,]),'LabeledStmt':([187,263,],[220,220,]),'IdentifierOpt':([278,],[315,]),'StatementList':([123,349,359,],[189,356,363,]),'TypeAssertion':([94,329,],[153,153,]),'ConditionOpt':([309,],[324,]),'ElementType':([158,],[212,]),'PointerType':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'VarSpecRep':([39,],[74,]),'TypeSwitchStmt':([187,263,],[221,221,]),'RelOp':([110,135,161,204,210,215,237,270,279,298,300,306,317,325,334,],[180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,]),'ExprSwitchCase':([327,],[338,]),'VarDecl':([10,187,263,],[22,22,22,]),'Tag':([253,],[303,]),'ConstSpecRep':([32,],[50,]),'PrimaryExpr':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,329,94,94,94,]),'TypeSpec':([23,78,],[44,140,]),'Index':([94,329,],[149,149,]),'Parameters':([37,52,71,],[71,71,116,]),'UnaryOp':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,321,335,336,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'PackageName':([2,13,47,],[6,28,28,]),'ExpressionListPureOpt':([222,],[260,]),'Label':([187,231,238,242,263,],[223,274,274,297,223,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprCaseClauseRep':([312,],[327,]),'ExprSwitchStmt':([187,263,],[224,224,]),'IdentifierList':([14,21,50,73,74,120,146,192,193,],[33,40,33,126,40,126,200,247,247,]),'TypeLit':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'ImportDeclRep':([5,],[9,]),'PackageClause':([0,],[1,]),'TypeList':([350,],[358,]),'ResultOpt':([71,],[118,]),'Selector':([94,329,],[152,152,]),'IncDecStmt':([187,228,232,263,335,],[226,226,226,226,226,]),'GotoStmt':([187,263,],[227,227,]),'AddOp':([110,135,161,204,210,215,237,270,279,298,300,306,317,325,334,],[176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,]),'Operand':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'assign_op':([236,],[292,]),'Signature':([37,52,],[72,86,]),'Block':([72,187,263,268,298,332,],[124,229,229,310,319,345,]),'ConstDecl':([10,187,263,],[18,18,18,]),'SwitchStmt':([187,263,],[230,230,]),'VarSpec':([21,74,],[38,133,]),'Result':([71,],[121,]),'Assignment':([187,228,232,263,335,],[219,219,219,219,219,]),'ExpressionListTypeOpt':([155,],[207,]),'TypeCaseClause':([342,],[353,]),'Literal':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'ImportDecl':([9,],[12,]),'OperandName':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'AssignOp':([236,],[281,]),'FieldDeclRep':([91,],[146,]),'TypeRep':([357,],[361,]),'start':([0,],[4,]),'Declaration':([10,187,263,],[17,233,233,]),'Condition':([228,309,],[266,322,]),'StructType':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'MulOp':([110,135,161,204,210,215,237,270,279,298,300,306,317,325,334,],[169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,]),'epsilon':([5,9,13,25,32,33,34,39,43,47,71,73,77,91,120,123,135,151,155,187,222,228,231,232,237,238,253,254,263,270,278,279,309,312,319,328,335,349,357,359,],[8,11,27,46,51,59,68,75,79,27,119,131,137,147,131,188,196,203,205,235,261,267,271,277,196,271,302,203,235,196,313,196,323,326,331,341,235,188,362,188,]),'ConditionBlockOpt':([228,],[268,]),'ExpressionList':([76,90,136,155,187,222,228,232,263,292,335,336,],[134,145,197,206,236,262,236,236,236,318,236,348,]),'SimpleStmt':([187,228,232,263,335,],[240,264,275,240,347,]),'ImportSpecRep':([25,],[47,]),'Expression':([64,76,90,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,321,335,336,],[110,135,135,161,135,204,135,210,161,215,237,135,270,279,298,300,306,237,317,135,325,334,237,135,]),'ImportPath':([29,],[48,]),'Source':([0,],[3,]),'ExpressionOpt':([151,232,254,],[202,276,305,]),'IdentifierRep':([34,],[69,]),'TypeExprListOpt':([33,],[65,]),'ReturnStmt':([187,263,],[239,239,]),'FunctionType':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'Slice':([94,329,],[150,150,]),'ArrayType':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ForStmt':([187,263,],[241,241,]),'Arguments':([94,329,],[154,154,]),'ConstSpec':([14,50,],[31,84,]),'Function':([37,],[70,]),'ImportSpec':([13,47,],[26,83,]),'Type':([33,40,45,60,61,64,71,73,76,80,90,93,107,109,120,126,136,151,155,157,158,160,175,187,192,193,200,209,213,222,228,232,244,247,251,254,263,280,292,309,315,321,335,336,350,355,365,],[54,77,81,87,89,100,117,128,100,141,100,100,87,159,186,191,100,100,100,100,211,159,100,100,248,248,253,257,87,100,100,100,100,299,100,100,100,100,100,100,100,100,100,100,357,257,366,]),'TypeSpecRep':([43,],[78,]),'TopLevelDeclRep':([9,],[10,]),'LabelOpt':([231,238,],[273,296,]),'TypeCaseClauseOpt':([328,],[342,]),'TypeDecl':([10,187,263,],[19,19,19,]),'TypeSwitchCase':([342,],[352,]),'BaseType':([60,107,213,],[88,88,88,]),'UnaryExpr':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,321,335,336,],[106,106,106,148,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'SimpleStmtOpt':([232,],[278,]),'ArrayLength':([64,],[108,]),'ForClause':([228,],[269,]),'TypeOpt':([33,],[62,]),'ShortVarDecl':([187,228,232,263,335,],[243,243,243,243,243,]),'TypeDef':([23,78,],[41,41,]),'FieldDecl':([146,],[199,]),'BreakStmt':([187,263,],[245,245,]),'TagOpt':([253,],[304,]),'BasicLit':([64,76,90,93,109,136,151,155,157,160,175,187,222,228,232,244,251,254,263,280,292,309,315,321,335,336,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'ExpressionListOpt':([77,],[138,]),'ElseOpt':([319,],[333,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> Source','start',1,'p_start','parser.py',35),
  ('Type -> TypeName','Type',1,'p_type','parser.py',44),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',45),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',46),
  ('TypeName -> TYPEX','TypeName',1,'p_type_name','parser.py',53),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',58),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',59),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',60),
  ('TypeLit -> FunctionType','TypeLit',1,'p_type_lit','parser.py',61),
  ('TypeOpt -> Type','TypeOpt',1,'p_type_opt','parser.py',65),
  ('TypeOpt -> epsilon','TypeOpt',1,'p_type_opt','parser.py',66),
  ('ArrayType -> LBRACK ArrayLength RBRACK ElementType','ArrayType',4,'p_array_type','parser.py',78),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',84),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',88),
  ('StructType -> STRUCT LBRACE FieldDeclRep RBRACE','StructType',4,'p_struct_type','parser.py',97),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOL','FieldDeclRep',3,'p_field_decl_rep','parser.py',103),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',104),
  ('FieldDecl -> IdentifierList Type TagOpt','FieldDecl',3,'p_field_decl','parser.py',112),
  ('TagOpt -> Tag','TagOpt',1,'p_tag_opt','parser.py',122),
  ('TagOpt -> epsilon','TagOpt',1,'p_tag_opt','parser.py',123),
  ('Tag -> STRING','Tag',1,'p_tag','parser.py',130),
  ('PointerType -> TIMES BaseType','PointerType',2,'p_pointer_type','parser.py',139),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',144),
  ('FunctionType -> FUNC Signature','FunctionType',2,'p_function_type','parser.py',153),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_signature','parser.py',157),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',165),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',166),
  ('Result -> Parameters','Result',1,'p_result','parser.py',173),
  ('Result -> Type','Result',1,'p_result','parser.py',174),
  ('Parameters -> LPAREN ParameterListOpt RPAREN','Parameters',3,'p_parameters','parser.py',181),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_parameter_list_opt','parser.py',185),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_parameter_list_opt','parser.py',186),
  ('ParametersList -> Type','ParametersList',1,'p_parameter_list','parser.py',193),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_parameter_list','parser.py',194),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_parameter_list','parser.py',195),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_parameter_decl_comma_rep','parser.py',208),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_parameter_decl_comma_rep','parser.py',209),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_parameter_decl','parser.py',217),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_parameter_decl','parser.py',218),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_block','parser.py',233),
  ('StatementList -> StatementRep','StatementList',1,'p_statement_list','parser.py',239),
  ('StatementRep -> StatementRep Statement SEMICOL','StatementRep',3,'p_statement_rep','parser.py',243),
  ('StatementRep -> epsilon','StatementRep',1,'p_statement_rep','parser.py',244),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',257),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',258),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',259),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',263),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',264),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',274),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',275),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOL','ConstSpecRep',3,'p_const_spec_rep','parser.py',284),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',285),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',293),
  ('TypeExprListOpt -> TypeOpt EQUAL ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',301),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',302),
  ('IdentifierList -> IDENTIFIER IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',313),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',318),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',319),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',332),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',333),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOL','TypeSpecRep',3,'p_type_spec_rep','parser.py',342),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',343),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',351),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',352),
  ('AliasDecl -> IDENTIFIER EQUAL Type','AliasDecl',3,'p_alias_decl','parser.py',356),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',368),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',380),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',381),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOL','VarSpecRep',3,'p_var_spec_rep','parser.py',390),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',391),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',399),
  ('VarSpec -> IdentifierList EQUAL ExpressionList','VarSpec',3,'p_var_spec','parser.py',400),
  ('ExpressionListOpt -> EQUAL ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',417),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',418),
  ('ShortVarDecl -> IDENTIFIER COLONEQ Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',430),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',442),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',443),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',448),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',452),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',457),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_quali_ident','parser.py',466),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',475),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',476),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',477),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',484),
  ('BasicLit -> INTEGER','BasicLit',1,'p_basic_lit','parser.py',489),
  ('BasicLit -> FLOAT','BasicLit',1,'p_basic_lit','parser.py',490),
  ('BasicLit -> IMAGINARY','BasicLit',1,'p_basic_lit','parser.py',491),
  ('BasicLit -> RUNE','BasicLit',1,'p_basic_lit','parser.py',492),
  ('BasicLit -> STRING','BasicLit',1,'p_basic_lit','parser.py',493),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',497),
  ('CompositeLit -> LiteralType LiteralValue','CompositeLit',2,'p_comp_lit','parser.py',506),
  ('LiteralType -> ArrayType','LiteralType',1,'p_lit_type','parser.py',510),
  ('LiteralType -> ElementType','LiteralType',1,'p_lit_type','parser.py',511),
  ('LiteralType -> TypeName','LiteralType',1,'p_lit_type','parser.py',512),
  ('LiteralValue -> LBRACE ElementListOpt RBRACE','LiteralValue',3,'p_lit_val','parser.py',516),
  ('ElementListOpt -> ElementList','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',520),
  ('ElementListOpt -> epsilon','ElementListOpt',1,'p_elem_list_comma_opt','parser.py',521),
  ('ElementList -> KeyedElement KeyedElementCommaRep','ElementList',2,'p_elem_list','parser.py',525),
  ('KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement','KeyedElementCommaRep',3,'p_key_elem_comma_rep','parser.py',529),
  ('KeyedElementCommaRep -> epsilon','KeyedElementCommaRep',1,'p_key_elem_comma_rep','parser.py',530),
  ('KeyedElement -> Key COLON Element','KeyedElement',3,'p_key_elem','parser.py',537),
  ('KeyedElement -> Element','KeyedElement',1,'p_key_elem','parser.py',538),
  ('Key -> FieldName','Key',1,'p_key','parser.py',545),
  ('Key -> Expression','Key',1,'p_key','parser.py',546),
  ('Key -> LiteralValue','Key',1,'p_key','parser.py',547),
  ('FieldName -> IDENTIFIER','FieldName',1,'p_field_name','parser.py',551),
  ('Element -> Expression','Element',1,'p_elem','parser.py',555),
  ('Element -> LiteralValue','Element',1,'p_elem','parser.py',556),
  ('Conversion -> Type LPAREN Expression RPAREN','Conversion',4,'p_conversion','parser.py',565),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',574),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',575),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',576),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',577),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',578),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',579),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',580),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',587),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_index','parser.py',591),
  ('Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK','Slice',5,'p_slice','parser.py',595),
  ('Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK','Slice',7,'p_slice','parser.py',596),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',604),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',608),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',613),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',614),
  ('ExpressionListCommaOpt -> COMMA ExpressionList','ExpressionListCommaOpt',2,'p_expr_list_comma_opt','parser.py',630),
  ('ExpressionListCommaOpt -> epsilon','ExpressionListCommaOpt',1,'p_expr_list_comma_opt','parser.py',631),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',638),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',643),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',644),
  ('Expression -> UnaryExpr','Expression',1,'p_expression','parser.py',657),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expression','parser.py',658),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',668),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',669),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',673),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',674),
  ('BinaryOp -> OROR','BinaryOp',1,'p_binary_op','parser.py',683),
  ('BinaryOp -> AMPAMP','BinaryOp',1,'p_binary_op','parser.py',684),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',685),
  ('BinaryOp -> AddOp','BinaryOp',1,'p_binary_op','parser.py',686),
  ('BinaryOp -> MulOp','BinaryOp',1,'p_binary_op','parser.py',687),
  ('RelOp -> EQEQ','RelOp',1,'p_rel_op','parser.py',691),
  ('RelOp -> NOTEQ','RelOp',1,'p_rel_op','parser.py',692),
  ('RelOp -> LESS','RelOp',1,'p_rel_op','parser.py',693),
  ('RelOp -> GREAT','RelOp',1,'p_rel_op','parser.py',694),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',695),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',696),
  ('AddOp -> PLUS','AddOp',1,'p_add_op','parser.py',700),
  ('AddOp -> MINUS','AddOp',1,'p_add_op','parser.py',701),
  ('AddOp -> OR','AddOp',1,'p_add_op','parser.py',702),
  ('AddOp -> CARET','AddOp',1,'p_add_op','parser.py',703),
  ('MulOp -> TIMES','MulOp',1,'p_mul_op','parser.py',707),
  ('MulOp -> DIVIDE','MulOp',1,'p_mul_op','parser.py',708),
  ('MulOp -> MOD','MulOp',1,'p_mul_op','parser.py',709),
  ('MulOp -> AMPERS','MulOp',1,'p_mul_op','parser.py',710),
  ('MulOp -> LL','MulOp',1,'p_mul_op','parser.py',711),
  ('MulOp -> GG','MulOp',1,'p_mul_op','parser.py',712),
  ('MulOp -> AMPCAR','MulOp',1,'p_mul_op','parser.py',713),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',717),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',718),
  ('UnaryOp -> TIMES','UnaryOp',1,'p_unary_op','parser.py',719),
  ('UnaryOp -> AMPERS','UnaryOp',1,'p_unary_op','parser.py',720),
  ('UnaryOp -> NOT','UnaryOp',1,'p_unary_op','parser.py',721),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',730),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',731),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',732),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',733),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',734),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',735),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',736),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',737),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',738),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',739),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',740),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',744),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',745),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',746),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',747),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',748),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',752),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',758),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',762),
  ('IncDecStmt -> Expression PLUSPLUS','IncDecStmt',2,'p_inc_dec','parser.py',766),
  ('IncDecStmt -> Expression MINUSMIN','IncDecStmt',2,'p_inc_dec','parser.py',767),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',773),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',781),
  ('AssignOp -> PLUSEQ','AssignOp',1,'p_AssignOp','parser.py',785),
  ('AssignOp -> MINUSEQ','AssignOp',1,'p_AssignOp','parser.py',786),
  ('AssignOp -> TIMESEQ','AssignOp',1,'p_AssignOp','parser.py',787),
  ('AssignOp -> DIVIDEEQ','AssignOp',1,'p_AssignOp','parser.py',788),
  ('AssignOp -> MODEQ','AssignOp',1,'p_AssignOp','parser.py',789),
  ('AssignOp -> AMPEQ','AssignOp',1,'p_AssignOp','parser.py',790),
  ('AssignOp -> OREQ','AssignOp',1,'p_AssignOp','parser.py',791),
  ('AssignOp -> CAREQ','AssignOp',1,'p_AssignOp','parser.py',792),
  ('AssignOp -> LLEQ','AssignOp',1,'p_AssignOp','parser.py',793),
  ('AssignOp -> GGEQ','AssignOp',1,'p_AssignOp','parser.py',794),
  ('AssignOp -> EQUAL','AssignOp',1,'p_AssignOp','parser.py',795),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',804),
  ('SimpleStmtOpt -> SimpleStmt SEMICOL','SimpleStmtOpt',2,'p_SimpleStmtOpt','parser.py',812),
  ('SimpleStmtOpt -> epsilon','SimpleStmtOpt',1,'p_SimpleStmtOpt','parser.py',813),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',820),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',821),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',822),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',834),
  ('SwitchStmt -> TypeSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',835),
  ('ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE','ExprSwitchStmt',5,'p_expr_switch_stmt','parser.py',839),
  ('ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause','ExprCaseClauseRep',2,'p_expr_case_clause_rep','parser.py',843),
  ('ExprCaseClauseRep -> epsilon','ExprCaseClauseRep',1,'p_expr_case_clause_rep','parser.py',844),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_expr_case_clause','parser.py',851),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_expr_switch_case','parser.py',855),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_expr_switch_case','parser.py',856),
  ('TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE','TypeSwitchStmt',6,'p_type_switch_stmt','parser.py',863),
  ('TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN','TypeSwitchGuard',6,'p_type_switch_guard','parser.py',867),
  ('IdentifierOpt -> IDENTIFIER COLONEQ','IdentifierOpt',2,'p_identifier_opt','parser.py',872),
  ('IdentifierOpt -> epsilon','IdentifierOpt',1,'p_identifier_opt','parser.py',873),
  ('TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause','TypeCaseClauseOpt',2,'p_type_case_clause_opt','parser.py',881),
  ('TypeCaseClauseOpt -> epsilon','TypeCaseClauseOpt',1,'p_type_case_clause_opt','parser.py',882),
  ('TypeCaseClause -> TypeSwitchCase COLON StatementList','TypeCaseClause',3,'p_type_case_clause','parser.py',889),
  ('TypeSwitchCase -> CASE TypeList','TypeSwitchCase',2,'p_type_switch_case','parser.py',893),
  ('TypeSwitchCase -> DEFAULT','TypeSwitchCase',1,'p_type_switch_case','parser.py',894),
  ('TypeList -> Type TypeRep','TypeList',2,'p_type_list','parser.py',901),
  ('TypeRep -> TypeRep COMMA Type','TypeRep',3,'p_type_rep','parser.py',905),
  ('TypeRep -> epsilon','TypeRep',1,'p_type_rep','parser.py',906),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',918),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',925),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',926),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',927),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',935),
  ('ForClause -> SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmt','ForClause',5,'p_forclause','parser.py',939),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',947),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',948),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',955),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',959),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',960),
  ('ExpressionIdentifier -> ExpressionList EQUAL','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',964),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',977),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',983),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',984),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',991),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',997),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1003),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1004),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1011),
  ('Source -> PackageClause SEMICOL ImportDeclRep TopLevelDeclRep','Source',4,'p_source_file','parser.py',1022),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1031),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL','ImportDeclRep',3,'p_import_decl_rep','parser.py',1032),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1040),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1041),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1053),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1059),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1068),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',1069),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL','ImportSpecRep',3,'p_import_spec_rep','parser.py',1078),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1079),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1087),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1093),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1094),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1095),
  ('ImportPath -> STRING','ImportPath',1,'p_import_path','parser.py',1102),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1113),
]
