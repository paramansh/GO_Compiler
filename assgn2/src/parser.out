Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAN
    CONSTANT
    DEFER
    FALLTHROUGH
    SELECT
    LMINUS
    AMPCAREQ
    GO
    DDD
    MAP
    INDENT
    INTERFACE

Grammar

Rule 0     S' -> start
Rule 1     start -> Source
Rule 2     Type -> TypeName
Rule 3     Type -> TypeLit
Rule 4     Type -> LPAREN Type RPAREN
Rule 5     TypeName -> IDENTIFIER
Rule 6     TypeName -> QualifiedIdent
Rule 7     TypeLit -> ArrayType
Rule 8     TypeLit -> StructType
Rule 9     TypeLit -> PointerType
Rule 10    TypeLit -> FunctionType
Rule 11    TypeOpt -> Type
Rule 12    TypeOpt -> epsilon
Rule 13    ArrayType -> LBRACK ArrayLength RBRACK ElementType
Rule 14    ArrayLength -> Expression
Rule 15    ElementType -> Type
Rule 16    StructType -> STRUCT LBRACE FieldDeclRep RBRACE
Rule 17    FieldDeclRep -> FieldDeclRep FieldDecl SEMICOL
Rule 18    FieldDeclRep -> epsilon
Rule 19    FieldDecl -> IdentifierList Type TagOpt
Rule 20    TagOpt -> Tag
Rule 21    TagOpt -> epsilon
Rule 22    Tag -> STRING
Rule 23    PointerType -> TIMES BaseType
Rule 24    BaseType -> Type
Rule 25    FunctionType -> FUNC Signature
Rule 26    Signature -> Parameters ResultOpt
Rule 27    ResultOpt -> Result
Rule 28    ResultOpt -> epsilon
Rule 29    Result -> Parameters
Rule 30    Result -> Type
Rule 31    Parameters -> LPAREN ParameterListOpt RPAREN
Rule 32    ParameterListOpt -> ParametersList
Rule 33    ParameterListOpt -> epsilon
Rule 34    ParametersList -> Type
Rule 35    ParametersList -> IdentifierList Type
Rule 36    ParametersList -> ParameterDeclCommaRep
Rule 37    ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl
Rule 38    ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl
Rule 39    ParameterDecl -> IdentifierList Type
Rule 40    ParameterDecl -> Type
Rule 41    Block -> LBRACE StatementList RBRACE
Rule 42    StatementList -> StatementRep
Rule 43    StatementRep -> StatementRep Statement SEMICOL
Rule 44    StatementRep -> epsilon
Rule 45    Declaration -> ConstDecl
Rule 46    Declaration -> TypeDecl
Rule 47    Declaration -> VarDecl
Rule 48    TopLevelDecl -> Declaration
Rule 49    TopLevelDecl -> FunctionDecl
Rule 50    ConstDecl -> CONST ConstSpec
Rule 51    ConstDecl -> CONST LPAREN ConstSpecRep RPAREN
Rule 52    ConstSpecRep -> ConstSpecRep ConstSpec SEMICOL
Rule 53    ConstSpecRep -> epsilon
Rule 54    ConstSpec -> IdentifierList TypeExprListOpt
Rule 55    TypeExprListOpt -> TypeOpt EQUAL ExpressionList
Rule 56    TypeExprListOpt -> epsilon
Rule 57    IdentifierList -> IDENTIFIER IdentifierRep
Rule 58    IdentifierRep -> IdentifierRep COMMA IDENTIFIER
Rule 59    IdentifierRep -> epsilon
Rule 60    TypeDecl -> TYPE TypeSpec
Rule 61    TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN
Rule 62    TypeSpecRep -> TypeSpecRep TypeSpec SEMICOL
Rule 63    TypeSpecRep -> epsilon
Rule 64    TypeSpec -> AliasDecl
Rule 65    TypeSpec -> TypeDef
Rule 66    AliasDecl -> IDENTIFIER EQUAL Type
Rule 67    TypeDef -> IDENTIFIER Type
Rule 68    VarDecl -> VAR VarSpec
Rule 69    VarDecl -> VAR LPAREN VarSpecRep RPAREN
Rule 70    VarSpecRep -> VarSpecRep VarSpec SEMICOL
Rule 71    VarSpecRep -> epsilon
Rule 72    VarSpec -> IdentifierList Type ExpressionListOpt
Rule 73    VarSpec -> IdentifierList EQUAL ExpressionList
Rule 74    ExpressionListOpt -> EQUAL ExpressionList
Rule 75    ExpressionListOpt -> epsilon
Rule 76    ShortVarDecl -> IDENTIFIER COLONEQ Expression
Rule 77    FunctionDecl -> FUNC FunctionName Function
Rule 78    FunctionDecl -> FUNC FunctionName Signature
Rule 79    FunctionName -> IDENTIFIER
Rule 80    Function -> Signature FunctionBody
Rule 81    FunctionBody -> Block
Rule 82    QualifiedIdent -> IDENTIFIER DOT TypeName
Rule 83    epsilon -> <empty>
Rule 84    Operand -> Literal
Rule 85    Operand -> OperandName
Rule 86    Operand -> LPAREN Expression RPAREN
Rule 87    Literal -> BasicLit
Rule 88    BasicLit -> INTEGER
Rule 89    BasicLit -> FLOAT
Rule 90    BasicLit -> IMAGINARY
Rule 91    BasicLit -> RUNE
Rule 92    BasicLit -> STRING
Rule 93    OperandName -> IDENTIFIER
Rule 94    CompositeLit -> LiteralType LiteralValue
Rule 95    LiteralType -> ArrayType
Rule 96    LiteralType -> ElementType
Rule 97    LiteralType -> TypeName
Rule 98    LiteralValue -> LBRACE ElementListOpt RBRACE
Rule 99    ElementListOpt -> ElementList
Rule 100   ElementListOpt -> epsilon
Rule 101   ElementList -> KeyedElement KeyedElementCommaRep
Rule 102   KeyedElementCommaRep -> KeyedElementCommaRep COMMA KeyedElement
Rule 103   KeyedElementCommaRep -> epsilon
Rule 104   KeyedElement -> Key COLON Element
Rule 105   KeyedElement -> Element
Rule 106   Key -> FieldName
Rule 107   Key -> Expression
Rule 108   Key -> LiteralValue
Rule 109   FieldName -> IDENTIFIER
Rule 110   Element -> Expression
Rule 111   Element -> LiteralValue
Rule 112   Conversion -> Type LPAREN Expression RPAREN
Rule 113   PrimaryExpr -> Operand
Rule 114   PrimaryExpr -> Conversion
Rule 115   PrimaryExpr -> PrimaryExpr Selector
Rule 116   PrimaryExpr -> PrimaryExpr Index
Rule 117   PrimaryExpr -> PrimaryExpr Slice
Rule 118   PrimaryExpr -> PrimaryExpr TypeAssertion
Rule 119   PrimaryExpr -> PrimaryExpr Arguments
Rule 120   Selector -> DOT IDENTIFIER
Rule 121   Index -> LBRACK Expression RBRACK
Rule 122   Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK
Rule 123   Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK
Rule 124   TypeAssertion -> DOT LPAREN Type RPAREN
Rule 125   Arguments -> LPAREN ExpressionListTypeOpt RPAREN
Rule 126   ExpressionListTypeOpt -> ExpressionList
Rule 127   ExpressionListTypeOpt -> epsilon
Rule 128   ExpressionListCommaOpt -> COMMA ExpressionList
Rule 129   ExpressionListCommaOpt -> epsilon
Rule 130   ExpressionList -> Expression ExpressionRep
Rule 131   ExpressionRep -> ExpressionRep COMMA Expression
Rule 132   ExpressionRep -> epsilon
Rule 133   Expression -> UnaryExpr
Rule 134   Expression -> Expression BinaryOp Expression
Rule 135   ExpressionOpt -> Expression
Rule 136   ExpressionOpt -> epsilon
Rule 137   UnaryExpr -> PrimaryExpr
Rule 138   UnaryExpr -> UnaryOp UnaryExpr
Rule 139   UnaryExpr -> NOT UnaryExpr
Rule 140   BinaryOp -> OROR
Rule 141   BinaryOp -> AMPAMP
Rule 142   BinaryOp -> RelOp
Rule 143   BinaryOp -> AddOp
Rule 144   BinaryOp -> MulOp
Rule 145   RelOp -> EQEQ
Rule 146   RelOp -> NOTEQ
Rule 147   RelOp -> LESS
Rule 148   RelOp -> GREAT
Rule 149   RelOp -> LEQ
Rule 150   RelOp -> GEQ
Rule 151   AddOp -> PLUS
Rule 152   AddOp -> MINUS
Rule 153   AddOp -> OR
Rule 154   AddOp -> CARET
Rule 155   MulOp -> TIMES
Rule 156   MulOp -> DIVIDE
Rule 157   MulOp -> MOD
Rule 158   MulOp -> AMPERS
Rule 159   MulOp -> LL
Rule 160   MulOp -> GG
Rule 161   MulOp -> AMPCAR
Rule 162   UnaryOp -> PLUS
Rule 163   UnaryOp -> MINUS
Rule 164   UnaryOp -> TIMES
Rule 165   UnaryOp -> AMPERS
Rule 166   Statement -> Declaration
Rule 167   Statement -> LabeledStmt
Rule 168   Statement -> SimpleStmt
Rule 169   Statement -> ReturnStmt
Rule 170   Statement -> BreakStmt
Rule 171   Statement -> ContinueStmt
Rule 172   Statement -> GotoStmt
Rule 173   Statement -> Block
Rule 174   Statement -> IfStmt
Rule 175   Statement -> SwitchStmt
Rule 176   Statement -> ForStmt
Rule 177   SimpleStmt -> epsilon
Rule 178   SimpleStmt -> ExpressionStmt
Rule 179   SimpleStmt -> IncDecStmt
Rule 180   SimpleStmt -> Assignment
Rule 181   SimpleStmt -> ShortVarDecl
Rule 182   LabeledStmt -> Label COLON Statement
Rule 183   Label -> IDENTIFIER
Rule 184   ExpressionStmt -> Expression
Rule 185   IncDecStmt -> Expression PLUSPLUS
Rule 186   IncDecStmt -> Expression MINUSMIN
Rule 187   Assignment -> ExpressionList assign_op ExpressionList
Rule 188   assign_op -> AssignOp
Rule 189   AssignOp -> PLUSEQ
Rule 190   AssignOp -> MINUSEQ
Rule 191   AssignOp -> TIMESEQ
Rule 192   AssignOp -> DIVIDEEQ
Rule 193   AssignOp -> MODEQ
Rule 194   AssignOp -> AMPEQ
Rule 195   AssignOp -> OREQ
Rule 196   AssignOp -> CAREQ
Rule 197   AssignOp -> LLEQ
Rule 198   AssignOp -> GGEQ
Rule 199   AssignOp -> EQUAL
Rule 200   IfStmt -> IF Expression Block ElseOpt
Rule 201   SimpleStmtOpt -> SimpleStmt SEMICOL
Rule 202   SimpleStmtOpt -> epsilon
Rule 203   ElseOpt -> ELSE IfStmt
Rule 204   ElseOpt -> ELSE Block
Rule 205   ElseOpt -> epsilon
Rule 206   SwitchStmt -> ExprSwitchStmt
Rule 207   SwitchStmt -> TypeSwitchStmt
Rule 208   ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE
Rule 209   ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause
Rule 210   ExprCaseClauseRep -> epsilon
Rule 211   ExprCaseClause -> ExprSwitchCase COLON StatementList
Rule 212   ExprSwitchCase -> CASE ExpressionList
Rule 213   ExprSwitchCase -> DEFAULT
Rule 214   TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE
Rule 215   TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN
Rule 216   IdentifierOpt -> IDENTIFIER COLONEQ
Rule 217   IdentifierOpt -> epsilon
Rule 218   TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause
Rule 219   TypeCaseClauseOpt -> epsilon
Rule 220   TypeCaseClause -> TypeSwitchCase COLON StatementList
Rule 221   TypeSwitchCase -> CASE TypeList
Rule 222   TypeSwitchCase -> DEFAULT
Rule 223   TypeList -> Type TypeRep
Rule 224   TypeRep -> TypeRep COMMA Type
Rule 225   TypeRep -> epsilon
Rule 226   ForStmt -> FOR ConditionBlockOpt Block
Rule 227   ConditionBlockOpt -> epsilon
Rule 228   ConditionBlockOpt -> Condition
Rule 229   ConditionBlockOpt -> ForClause
Rule 230   ConditionBlockOpt -> RangeClause
Rule 231   Condition -> Expression
Rule 232   ForClause -> SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmt
Rule 233   ConditionOpt -> epsilon
Rule 234   ConditionOpt -> Condition
Rule 235   RangeClause -> ExpressionIdentListOpt RANGE Expression
Rule 236   ExpressionIdentListOpt -> epsilon
Rule 237   ExpressionIdentListOpt -> ExpressionIdentifier
Rule 238   ExpressionIdentifier -> ExpressionList EQUAL
Rule 239   ReturnStmt -> RETURN ExpressionListPureOpt
Rule 240   ExpressionListPureOpt -> ExpressionList
Rule 241   ExpressionListPureOpt -> epsilon
Rule 242   BreakStmt -> BREAK LabelOpt
Rule 243   ContinueStmt -> CONTINUE LabelOpt
Rule 244   LabelOpt -> Label
Rule 245   LabelOpt -> epsilon
Rule 246   GotoStmt -> GOTO Label
Rule 247   Source -> PackageClause SEMICOL ImportDeclRep TopLevelDeclRep
Rule 248   ImportDeclRep -> epsilon
Rule 249   ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL
Rule 250   TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL
Rule 251   TopLevelDeclRep -> epsilon
Rule 252   PackageClause -> PACKAGE PackageName
Rule 253   PackageName -> IDENTIFIER
Rule 254   ImportDecl -> IMPORT ImportSpec
Rule 255   ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN
Rule 256   ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL
Rule 257   ImportSpecRep -> epsilon
Rule 258   ImportSpec -> PackageNameDotOpt ImportPath
Rule 259   PackageNameDotOpt -> DOT
Rule 260   PackageNameDotOpt -> PackageName
Rule 261   PackageNameDotOpt -> epsilon
Rule 262   ImportPath -> STRING

Terminals, with rules where they appear

AMPAMP               : 141
AMPCAR               : 161
AMPCAREQ             : 
AMPEQ                : 194
AMPERS               : 158 165
BREAK                : 242
CAREQ                : 196
CARET                : 154
CASE                 : 212 221
CHAN                 : 
COLON                : 104 122 123 123 182 211 220
COLONEQ              : 76 216
COMMA                : 37 38 58 102 128 131 224
CONST                : 50 51
CONSTANT             : 
CONTINUE             : 243
DDD                  : 
DEFAULT              : 213 222
DEFER                : 
DIVIDE               : 156
DIVIDEEQ             : 192
DOT                  : 82 120 124 215 259
ELSE                 : 203 204
EQEQ                 : 145
EQUAL                : 55 66 73 74 199 238
FALLTHROUGH          : 
FLOAT                : 89
FOR                  : 226
FUNC                 : 25 77 78
GEQ                  : 150
GG                   : 160
GGEQ                 : 198
GO                   : 
GOTO                 : 246
GREAT                : 148
IDENTIFIER           : 5 57 58 66 67 76 79 82 93 109 120 183 216 253
IF                   : 200
IMAGINARY            : 90
IMPORT               : 254 255
INDENT               : 
INTEGER              : 88
INTERFACE            : 
LBRACE               : 16 41 98 208 214
LBRACK               : 13 121 122 123
LEQ                  : 149
LESS                 : 147
LL                   : 159
LLEQ                 : 197
LMINUS               : 
LPAREN               : 4 31 51 61 69 86 112 124 125 215 255
MAP                  : 
MINUS                : 152 163
MINUSEQ              : 190
MINUSMIN             : 186
MOD                  : 157
MODEQ                : 193
NOT                  : 139
NOTEQ                : 146
OR                   : 153
OREQ                 : 195
OROR                 : 140
PACKAGE              : 252
PLUS                 : 151 162
PLUSEQ               : 189
PLUSPLUS             : 185
RANGE                : 235
RBRACE               : 16 41 98 208 214
RBRACK               : 13 121 122 123
RETURN               : 239
RPAREN               : 4 31 51 61 69 86 112 124 125 215 255
RUNE                 : 91
SELECT               : 
SEMICOL              : 17 43 52 62 70 201 232 232 247 249 250 256
STRING               : 22 92 262
STRUCT               : 16
SWITCH               : 208 214
TIMES                : 23 155 164
TIMESEQ              : 191
TYPE                 : 60 61 215
VAR                  : 68 69
error                : 

Nonterminals, with rules where they appear

AddOp                : 143
AliasDecl            : 64
Arguments            : 119
ArrayLength          : 13
ArrayType            : 7 95
AssignOp             : 188
Assignment           : 180
BaseType             : 23
BasicLit             : 87
BinaryOp             : 134
Block                : 81 173 200 204 226
BreakStmt            : 170
CompositeLit         : 
Condition            : 228 234
ConditionBlockOpt    : 226
ConditionOpt         : 232
ConstDecl            : 45
ConstSpec            : 50 52
ConstSpecRep         : 51 52
ContinueStmt         : 171
Conversion           : 114
Declaration          : 48 166
Element              : 104 105
ElementList          : 99
ElementListOpt       : 98
ElementType          : 13 96
ElseOpt              : 200
ExprCaseClause       : 209
ExprCaseClauseRep    : 208 209
ExprSwitchCase       : 211
ExprSwitchStmt       : 206
Expression           : 14 76 86 107 110 112 121 123 123 130 131 134 134 135 184 185 186 200 231 235
ExpressionIdentListOpt : 235
ExpressionIdentifier : 237
ExpressionList       : 55 73 74 126 128 187 187 212 238 240
ExpressionListCommaOpt : 
ExpressionListOpt    : 72
ExpressionListPureOpt : 239
ExpressionListTypeOpt : 125
ExpressionOpt        : 122 122 123 208
ExpressionRep        : 130 131
ExpressionStmt       : 178
FieldDecl            : 17
FieldDeclRep         : 16 17
FieldName            : 106
ForClause            : 229
ForStmt              : 176
Function             : 77
FunctionBody         : 80
FunctionDecl         : 49
FunctionName         : 77 78
FunctionType         : 10
GotoStmt             : 172
IdentifierList       : 19 35 39 54 72 73
IdentifierOpt        : 215
IdentifierRep        : 57 58
IfStmt               : 174 203
ImportDecl           : 249
ImportDeclRep        : 247 249
ImportPath           : 258
ImportSpec           : 254 256
ImportSpecRep        : 255 256
IncDecStmt           : 179
Index                : 116
Key                  : 104
KeyedElement         : 101 102
KeyedElementCommaRep : 101 102
Label                : 182 244 246
LabelOpt             : 242 243
LabeledStmt          : 167
Literal              : 84
LiteralType          : 94
LiteralValue         : 94 108 111
MulOp                : 144
Operand              : 113
OperandName          : 85
PackageClause        : 247
PackageName          : 252 260
PackageNameDotOpt    : 258
ParameterDecl        : 37 38 38
ParameterDeclCommaRep : 36 37
ParameterListOpt     : 31
Parameters           : 26 29
ParametersList       : 32
PointerType          : 9
PrimaryExpr          : 115 116 117 118 119 137 215
QualifiedIdent       : 6
RangeClause          : 230
RelOp                : 142
Result               : 27
ResultOpt            : 26
ReturnStmt           : 169
Selector             : 115
ShortVarDecl         : 181
Signature            : 25 78 80
SimpleStmt           : 168 201 232 232
SimpleStmtOpt        : 214
Slice                : 117
Source               : 1
Statement            : 43 182
StatementList        : 41 211 220
StatementRep         : 42 43
StructType           : 8
SwitchStmt           : 175
Tag                  : 20
TagOpt               : 19
TopLevelDecl         : 250
TopLevelDeclRep      : 247 250
Type                 : 4 11 15 19 24 30 34 35 39 40 66 67 72 112 124 223 224
TypeAssertion        : 118
TypeCaseClause       : 218
TypeCaseClauseOpt    : 214 218
TypeDecl             : 46
TypeDef              : 65
TypeExprListOpt      : 54
TypeList             : 221
TypeLit              : 3
TypeName             : 2 82 97
TypeOpt              : 55
TypeRep              : 223 224
TypeSpec             : 60 62
TypeSpecRep          : 61 62
TypeSwitchCase       : 220
TypeSwitchGuard      : 214
TypeSwitchStmt       : 207
UnaryExpr            : 133 138 139
UnaryOp              : 138
VarDecl              : 47
VarSpec              : 68 70
VarSpecRep           : 69 70
assign_op            : 187
epsilon              : 12 18 21 28 33 44 53 56 59 63 71 75 100 103 127 129 132 136 177 202 205 210 217 219 225 227 233 236 241 245 248 251 257 261
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . Source
    (247) Source -> . PackageClause SEMICOL ImportDeclRep TopLevelDeclRep
    (252) PackageClause -> . PACKAGE PackageName

    PACKAGE         shift and go to state 2

    PackageClause                  shift and go to state 1
    Source                         shift and go to state 3
    start                          shift and go to state 4

state 1

    (247) Source -> PackageClause . SEMICOL ImportDeclRep TopLevelDeclRep

    SEMICOL         shift and go to state 5


state 2

    (252) PackageClause -> PACKAGE . PackageName
    (253) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 7

    PackageName                    shift and go to state 6

state 3

    (1) start -> Source .

    $end            reduce using rule 1 (start -> Source .)


state 4

    (0) S' -> start .



state 5

    (247) Source -> PackageClause SEMICOL . ImportDeclRep TopLevelDeclRep
    (248) ImportDeclRep -> . epsilon
    (249) ImportDeclRep -> . ImportDeclRep ImportDecl SEMICOL
    (83) epsilon -> .

    IMPORT          reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)
    CONST           reduce using rule 83 (epsilon -> .)
    TYPE            reduce using rule 83 (epsilon -> .)
    VAR             reduce using rule 83 (epsilon -> .)
    $end            reduce using rule 83 (epsilon -> .)

    ImportDeclRep                  shift and go to state 9
    epsilon                        shift and go to state 8

state 6

    (252) PackageClause -> PACKAGE PackageName .

    SEMICOL         reduce using rule 252 (PackageClause -> PACKAGE PackageName .)


state 7

    (253) PackageName -> IDENTIFIER .

    SEMICOL         reduce using rule 253 (PackageName -> IDENTIFIER .)
    STRING          reduce using rule 253 (PackageName -> IDENTIFIER .)


state 8

    (248) ImportDeclRep -> epsilon .

    IMPORT          reduce using rule 248 (ImportDeclRep -> epsilon .)
    FUNC            reduce using rule 248 (ImportDeclRep -> epsilon .)
    CONST           reduce using rule 248 (ImportDeclRep -> epsilon .)
    TYPE            reduce using rule 248 (ImportDeclRep -> epsilon .)
    VAR             reduce using rule 248 (ImportDeclRep -> epsilon .)
    $end            reduce using rule 248 (ImportDeclRep -> epsilon .)


state 9

    (247) Source -> PackageClause SEMICOL ImportDeclRep . TopLevelDeclRep
    (249) ImportDeclRep -> ImportDeclRep . ImportDecl SEMICOL
    (250) TopLevelDeclRep -> . TopLevelDeclRep TopLevelDecl SEMICOL
    (251) TopLevelDeclRep -> . epsilon
    (254) ImportDecl -> . IMPORT ImportSpec
    (255) ImportDecl -> . IMPORT LPAREN ImportSpecRep RPAREN
    (83) epsilon -> .

    IMPORT          shift and go to state 13
    FUNC            reduce using rule 83 (epsilon -> .)
    CONST           reduce using rule 83 (epsilon -> .)
    TYPE            reduce using rule 83 (epsilon -> .)
    VAR             reduce using rule 83 (epsilon -> .)
    $end            reduce using rule 83 (epsilon -> .)

    TopLevelDeclRep                shift and go to state 10
    epsilon                        shift and go to state 11
    ImportDecl                     shift and go to state 12

state 10

    (247) Source -> PackageClause SEMICOL ImportDeclRep TopLevelDeclRep .
    (250) TopLevelDeclRep -> TopLevelDeclRep . TopLevelDecl SEMICOL
    (48) TopLevelDecl -> . Declaration
    (49) TopLevelDecl -> . FunctionDecl
    (45) Declaration -> . ConstDecl
    (46) Declaration -> . TypeDecl
    (47) Declaration -> . VarDecl
    (77) FunctionDecl -> . FUNC FunctionName Function
    (78) FunctionDecl -> . FUNC FunctionName Signature
    (50) ConstDecl -> . CONST ConstSpec
    (51) ConstDecl -> . CONST LPAREN ConstSpecRep RPAREN
    (60) TypeDecl -> . TYPE TypeSpec
    (61) TypeDecl -> . TYPE LPAREN TypeSpecRep RPAREN
    (68) VarDecl -> . VAR VarSpec
    (69) VarDecl -> . VAR LPAREN VarSpecRep RPAREN

    $end            reduce using rule 247 (Source -> PackageClause SEMICOL ImportDeclRep TopLevelDeclRep .)
    FUNC            shift and go to state 20
    CONST           shift and go to state 14
    TYPE            shift and go to state 23
    VAR             shift and go to state 21

    TypeDecl                       shift and go to state 19
    VarDecl                        shift and go to state 22
    FunctionDecl                   shift and go to state 15
    TopLevelDecl                   shift and go to state 16
    Declaration                    shift and go to state 17
    ConstDecl                      shift and go to state 18

state 11

    (251) TopLevelDeclRep -> epsilon .

    FUNC            reduce using rule 251 (TopLevelDeclRep -> epsilon .)
    CONST           reduce using rule 251 (TopLevelDeclRep -> epsilon .)
    TYPE            reduce using rule 251 (TopLevelDeclRep -> epsilon .)
    VAR             reduce using rule 251 (TopLevelDeclRep -> epsilon .)
    $end            reduce using rule 251 (TopLevelDeclRep -> epsilon .)


state 12

    (249) ImportDeclRep -> ImportDeclRep ImportDecl . SEMICOL

    SEMICOL         shift and go to state 24


state 13

    (254) ImportDecl -> IMPORT . ImportSpec
    (255) ImportDecl -> IMPORT . LPAREN ImportSpecRep RPAREN
    (258) ImportSpec -> . PackageNameDotOpt ImportPath
    (259) PackageNameDotOpt -> . DOT
    (260) PackageNameDotOpt -> . PackageName
    (261) PackageNameDotOpt -> . epsilon
    (253) PackageName -> . IDENTIFIER
    (83) epsilon -> .

    LPAREN          shift and go to state 25
    DOT             shift and go to state 30
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 83 (epsilon -> .)

    ImportSpec                     shift and go to state 26
    epsilon                        shift and go to state 27
    PackageName                    shift and go to state 28
    PackageNameDotOpt              shift and go to state 29

state 14

    (50) ConstDecl -> CONST . ConstSpec
    (51) ConstDecl -> CONST . LPAREN ConstSpecRep RPAREN
    (54) ConstSpec -> . IdentifierList TypeExprListOpt
    (57) IdentifierList -> . IDENTIFIER IdentifierRep

    LPAREN          shift and go to state 32
    IDENTIFIER      shift and go to state 34

    ConstSpec                      shift and go to state 31
    IdentifierList                 shift and go to state 33

state 15

    (49) TopLevelDecl -> FunctionDecl .

    SEMICOL         reduce using rule 49 (TopLevelDecl -> FunctionDecl .)


state 16

    (250) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl . SEMICOL

    SEMICOL         shift and go to state 35


state 17

    (48) TopLevelDecl -> Declaration .

    SEMICOL         reduce using rule 48 (TopLevelDecl -> Declaration .)


state 18

    (45) Declaration -> ConstDecl .

    SEMICOL         reduce using rule 45 (Declaration -> ConstDecl .)


state 19

    (46) Declaration -> TypeDecl .

    SEMICOL         reduce using rule 46 (Declaration -> TypeDecl .)


state 20

    (77) FunctionDecl -> FUNC . FunctionName Function
    (78) FunctionDecl -> FUNC . FunctionName Signature
    (79) FunctionName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 36

    FunctionName                   shift and go to state 37

state 21

    (68) VarDecl -> VAR . VarSpec
    (69) VarDecl -> VAR . LPAREN VarSpecRep RPAREN
    (72) VarSpec -> . IdentifierList Type ExpressionListOpt
    (73) VarSpec -> . IdentifierList EQUAL ExpressionList
    (57) IdentifierList -> . IDENTIFIER IdentifierRep

    LPAREN          shift and go to state 39
    IDENTIFIER      shift and go to state 34

    VarSpec                        shift and go to state 38
    IdentifierList                 shift and go to state 40

state 22

    (47) Declaration -> VarDecl .

    SEMICOL         reduce using rule 47 (Declaration -> VarDecl .)


state 23

    (60) TypeDecl -> TYPE . TypeSpec
    (61) TypeDecl -> TYPE . LPAREN TypeSpecRep RPAREN
    (64) TypeSpec -> . AliasDecl
    (65) TypeSpec -> . TypeDef
    (66) AliasDecl -> . IDENTIFIER EQUAL Type
    (67) TypeDef -> . IDENTIFIER Type

    LPAREN          shift and go to state 43
    IDENTIFIER      shift and go to state 45

    TypeSpec                       shift and go to state 44
    TypeDef                        shift and go to state 41
    AliasDecl                      shift and go to state 42

state 24

    (249) ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .

    IMPORT          reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)
    FUNC            reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)
    CONST           reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)
    TYPE            reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)
    VAR             reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)
    $end            reduce using rule 249 (ImportDeclRep -> ImportDeclRep ImportDecl SEMICOL .)


state 25

    (255) ImportDecl -> IMPORT LPAREN . ImportSpecRep RPAREN
    (256) ImportSpecRep -> . ImportSpecRep ImportSpec SEMICOL
    (257) ImportSpecRep -> . epsilon
    (83) epsilon -> .

    RPAREN          reduce using rule 83 (epsilon -> .)
    DOT             reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 46
    ImportSpecRep                  shift and go to state 47

state 26

    (254) ImportDecl -> IMPORT ImportSpec .

    SEMICOL         reduce using rule 254 (ImportDecl -> IMPORT ImportSpec .)


state 27

    (261) PackageNameDotOpt -> epsilon .

    STRING          reduce using rule 261 (PackageNameDotOpt -> epsilon .)


state 28

    (260) PackageNameDotOpt -> PackageName .

    STRING          reduce using rule 260 (PackageNameDotOpt -> PackageName .)


state 29

    (258) ImportSpec -> PackageNameDotOpt . ImportPath
    (262) ImportPath -> . STRING

    STRING          shift and go to state 49

    ImportPath                     shift and go to state 48

state 30

    (259) PackageNameDotOpt -> DOT .

    STRING          reduce using rule 259 (PackageNameDotOpt -> DOT .)


state 31

    (50) ConstDecl -> CONST ConstSpec .

    SEMICOL         reduce using rule 50 (ConstDecl -> CONST ConstSpec .)


state 32

    (51) ConstDecl -> CONST LPAREN . ConstSpecRep RPAREN
    (52) ConstSpecRep -> . ConstSpecRep ConstSpec SEMICOL
    (53) ConstSpecRep -> . epsilon
    (83) epsilon -> .

    RPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)

    ConstSpecRep                   shift and go to state 50
    epsilon                        shift and go to state 51

state 33

    (54) ConstSpec -> IdentifierList . TypeExprListOpt
    (55) TypeExprListOpt -> . TypeOpt EQUAL ExpressionList
    (56) TypeExprListOpt -> . epsilon
    (11) TypeOpt -> . Type
    (12) TypeOpt -> . epsilon
    (83) epsilon -> .
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    SEMICOL         reduce using rule 83 (epsilon -> .)
    EQUAL           reduce using rule 83 (epsilon -> .)
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    TypeOpt                        shift and go to state 62
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    TypeLit                        shift and go to state 55
    TypeExprListOpt                shift and go to state 65
    epsilon                        shift and go to state 59
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    Type                           shift and go to state 54
    QualifiedIdent                 shift and go to state 68

state 34

    (57) IdentifierList -> IDENTIFIER . IdentifierRep
    (58) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (59) IdentifierRep -> . epsilon
    (83) epsilon -> .

    COMMA           reduce using rule 83 (epsilon -> .)
    LPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)
    EQUAL           reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 69
    IdentifierRep                  shift and go to state 70

state 35

    (250) TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .

    FUNC            reduce using rule 250 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .)
    CONST           reduce using rule 250 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .)
    TYPE            reduce using rule 250 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .)
    VAR             reduce using rule 250 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .)
    $end            reduce using rule 250 (TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOL .)


state 36

    (79) FunctionName -> IDENTIFIER .

    LPAREN          reduce using rule 79 (FunctionName -> IDENTIFIER .)


state 37

    (77) FunctionDecl -> FUNC FunctionName . Function
    (78) FunctionDecl -> FUNC FunctionName . Signature
    (80) Function -> . Signature FunctionBody
    (26) Signature -> . Parameters ResultOpt
    (31) Parameters -> . LPAREN ParameterListOpt RPAREN

    LPAREN          shift and go to state 74

    Function                       shift and go to state 71
    Parameters                     shift and go to state 72
    Signature                      shift and go to state 73

state 38

    (68) VarDecl -> VAR VarSpec .

    SEMICOL         reduce using rule 68 (VarDecl -> VAR VarSpec .)


state 39

    (69) VarDecl -> VAR LPAREN . VarSpecRep RPAREN
    (70) VarSpecRep -> . VarSpecRep VarSpec SEMICOL
    (71) VarSpecRep -> . epsilon
    (83) epsilon -> .

    RPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)

    VarSpecRep                     shift and go to state 75
    epsilon                        shift and go to state 76

state 40

    (72) VarSpec -> IdentifierList . Type ExpressionListOpt
    (73) VarSpec -> IdentifierList . EQUAL ExpressionList
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    EQUAL           shift and go to state 77
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 78
    TypeLit                        shift and go to state 55
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 41

    (65) TypeSpec -> TypeDef .

    SEMICOL         reduce using rule 65 (TypeSpec -> TypeDef .)


state 42

    (64) TypeSpec -> AliasDecl .

    SEMICOL         reduce using rule 64 (TypeSpec -> AliasDecl .)


state 43

    (61) TypeDecl -> TYPE LPAREN . TypeSpecRep RPAREN
    (62) TypeSpecRep -> . TypeSpecRep TypeSpec SEMICOL
    (63) TypeSpecRep -> . epsilon
    (83) epsilon -> .

    RPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)

    TypeSpecRep                    shift and go to state 79
    epsilon                        shift and go to state 80

state 44

    (60) TypeDecl -> TYPE TypeSpec .

    SEMICOL         reduce using rule 60 (TypeDecl -> TYPE TypeSpec .)


state 45

    (66) AliasDecl -> IDENTIFIER . EQUAL Type
    (67) TypeDef -> IDENTIFIER . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    EQUAL           shift and go to state 81
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 82
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 46

    (257) ImportSpecRep -> epsilon .

    RPAREN          reduce using rule 257 (ImportSpecRep -> epsilon .)
    DOT             reduce using rule 257 (ImportSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 257 (ImportSpecRep -> epsilon .)
    STRING          reduce using rule 257 (ImportSpecRep -> epsilon .)


state 47

    (255) ImportDecl -> IMPORT LPAREN ImportSpecRep . RPAREN
    (256) ImportSpecRep -> ImportSpecRep . ImportSpec SEMICOL
    (258) ImportSpec -> . PackageNameDotOpt ImportPath
    (259) PackageNameDotOpt -> . DOT
    (260) PackageNameDotOpt -> . PackageName
    (261) PackageNameDotOpt -> . epsilon
    (253) PackageName -> . IDENTIFIER
    (83) epsilon -> .

    RPAREN          shift and go to state 83
    DOT             shift and go to state 30
    IDENTIFIER      shift and go to state 7
    STRING          reduce using rule 83 (epsilon -> .)

    ImportSpec                     shift and go to state 84
    epsilon                        shift and go to state 27
    PackageName                    shift and go to state 28
    PackageNameDotOpt              shift and go to state 29

state 48

    (258) ImportSpec -> PackageNameDotOpt ImportPath .

    SEMICOL         reduce using rule 258 (ImportSpec -> PackageNameDotOpt ImportPath .)


state 49

    (262) ImportPath -> STRING .

    SEMICOL         reduce using rule 262 (ImportPath -> STRING .)


state 50

    (51) ConstDecl -> CONST LPAREN ConstSpecRep . RPAREN
    (52) ConstSpecRep -> ConstSpecRep . ConstSpec SEMICOL
    (54) ConstSpec -> . IdentifierList TypeExprListOpt
    (57) IdentifierList -> . IDENTIFIER IdentifierRep

    RPAREN          shift and go to state 86
    IDENTIFIER      shift and go to state 34

    ConstSpec                      shift and go to state 85
    IdentifierList                 shift and go to state 33

state 51

    (53) ConstSpecRep -> epsilon .

    RPAREN          reduce using rule 53 (ConstSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 53 (ConstSpecRep -> epsilon .)


state 52

    (25) FunctionType -> FUNC . Signature
    (26) Signature -> . Parameters ResultOpt
    (31) Parameters -> . LPAREN ParameterListOpt RPAREN

    LPAREN          shift and go to state 74

    Parameters                     shift and go to state 72
    Signature                      shift and go to state 87

state 53

    (7) TypeLit -> ArrayType .

    RPAREN          reduce using rule 7 (TypeLit -> ArrayType .)
    LPAREN          reduce using rule 7 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 7 (TypeLit -> ArrayType .)
    EQUAL           reduce using rule 7 (TypeLit -> ArrayType .)
    SEMICOL         reduce using rule 7 (TypeLit -> ArrayType .)
    LBRACE          reduce using rule 7 (TypeLit -> ArrayType .)
    STRING          reduce using rule 7 (TypeLit -> ArrayType .)
    COLON           reduce using rule 7 (TypeLit -> ArrayType .)


state 54

    (11) TypeOpt -> Type .

    EQUAL           reduce using rule 11 (TypeOpt -> Type .)


state 55

    (3) Type -> TypeLit .

    EQUAL           reduce using rule 3 (Type -> TypeLit .)
    SEMICOL         reduce using rule 3 (Type -> TypeLit .)
    RPAREN          reduce using rule 3 (Type -> TypeLit .)
    LBRACE          reduce using rule 3 (Type -> TypeLit .)
    COMMA           reduce using rule 3 (Type -> TypeLit .)
    LPAREN          reduce using rule 3 (Type -> TypeLit .)
    STRING          reduce using rule 3 (Type -> TypeLit .)
    COLON           reduce using rule 3 (Type -> TypeLit .)


state 56

    (2) Type -> TypeName .

    EQUAL           reduce using rule 2 (Type -> TypeName .)
    SEMICOL         reduce using rule 2 (Type -> TypeName .)
    RPAREN          reduce using rule 2 (Type -> TypeName .)
    LBRACE          reduce using rule 2 (Type -> TypeName .)
    COMMA           reduce using rule 2 (Type -> TypeName .)
    LPAREN          reduce using rule 2 (Type -> TypeName .)
    STRING          reduce using rule 2 (Type -> TypeName .)
    COLON           reduce using rule 2 (Type -> TypeName .)


state 57

    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName

    RPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    COMMA           reduce using rule 5 (TypeName -> IDENTIFIER .)
    COLON           reduce using rule 5 (TypeName -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (TypeName -> IDENTIFIER .)
    SEMICOL         reduce using rule 5 (TypeName -> IDENTIFIER .)
    LBRACE          reduce using rule 5 (TypeName -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    STRING          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88


state 58

    (8) TypeLit -> StructType .

    RPAREN          reduce using rule 8 (TypeLit -> StructType .)
    LPAREN          reduce using rule 8 (TypeLit -> StructType .)
    COMMA           reduce using rule 8 (TypeLit -> StructType .)
    EQUAL           reduce using rule 8 (TypeLit -> StructType .)
    SEMICOL         reduce using rule 8 (TypeLit -> StructType .)
    LBRACE          reduce using rule 8 (TypeLit -> StructType .)
    STRING          reduce using rule 8 (TypeLit -> StructType .)
    COLON           reduce using rule 8 (TypeLit -> StructType .)


state 59

    (56) TypeExprListOpt -> epsilon .
    (12) TypeOpt -> epsilon .

    SEMICOL         reduce using rule 56 (TypeExprListOpt -> epsilon .)
    EQUAL           reduce using rule 12 (TypeOpt -> epsilon .)


state 60

    (23) PointerType -> TIMES . BaseType
    (24) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    BaseType                       shift and go to state 90
    Type                           shift and go to state 89
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 61

    (4) Type -> LPAREN . Type RPAREN
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 91
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 62

    (55) TypeExprListOpt -> TypeOpt . EQUAL ExpressionList

    EQUAL           shift and go to state 92


state 63

    (16) StructType -> STRUCT . LBRACE FieldDeclRep RBRACE

    LBRACE          shift and go to state 93


state 64

    (13) ArrayType -> LBRACK . ArrayLength RBRACK ElementType
    (14) ArrayLength -> . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    TypeLit                        shift and go to state 55
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ArrayLength                    shift and go to state 111
    Expression                     shift and go to state 113
    PointerType                    shift and go to state 66
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 65

    (54) ConstSpec -> IdentifierList TypeExprListOpt .

    SEMICOL         reduce using rule 54 (ConstSpec -> IdentifierList TypeExprListOpt .)


state 66

    (9) TypeLit -> PointerType .

    RPAREN          reduce using rule 9 (TypeLit -> PointerType .)
    LPAREN          reduce using rule 9 (TypeLit -> PointerType .)
    COMMA           reduce using rule 9 (TypeLit -> PointerType .)
    EQUAL           reduce using rule 9 (TypeLit -> PointerType .)
    SEMICOL         reduce using rule 9 (TypeLit -> PointerType .)
    LBRACE          reduce using rule 9 (TypeLit -> PointerType .)
    STRING          reduce using rule 9 (TypeLit -> PointerType .)
    COLON           reduce using rule 9 (TypeLit -> PointerType .)


state 67

    (10) TypeLit -> FunctionType .

    RPAREN          reduce using rule 10 (TypeLit -> FunctionType .)
    LPAREN          reduce using rule 10 (TypeLit -> FunctionType .)
    COMMA           reduce using rule 10 (TypeLit -> FunctionType .)
    EQUAL           reduce using rule 10 (TypeLit -> FunctionType .)
    SEMICOL         reduce using rule 10 (TypeLit -> FunctionType .)
    LBRACE          reduce using rule 10 (TypeLit -> FunctionType .)
    STRING          reduce using rule 10 (TypeLit -> FunctionType .)
    COLON           reduce using rule 10 (TypeLit -> FunctionType .)


state 68

    (6) TypeName -> QualifiedIdent .

    RPAREN          reduce using rule 6 (TypeName -> QualifiedIdent .)
    COMMA           reduce using rule 6 (TypeName -> QualifiedIdent .)
    LPAREN          reduce using rule 6 (TypeName -> QualifiedIdent .)
    COLON           reduce using rule 6 (TypeName -> QualifiedIdent .)
    EQUAL           reduce using rule 6 (TypeName -> QualifiedIdent .)
    SEMICOL         reduce using rule 6 (TypeName -> QualifiedIdent .)
    LBRACE          reduce using rule 6 (TypeName -> QualifiedIdent .)
    STRING          reduce using rule 6 (TypeName -> QualifiedIdent .)


state 69

    (59) IdentifierRep -> epsilon .

    COMMA           reduce using rule 59 (IdentifierRep -> epsilon .)
    LPAREN          reduce using rule 59 (IdentifierRep -> epsilon .)
    IDENTIFIER      reduce using rule 59 (IdentifierRep -> epsilon .)
    LBRACK          reduce using rule 59 (IdentifierRep -> epsilon .)
    STRUCT          reduce using rule 59 (IdentifierRep -> epsilon .)
    TIMES           reduce using rule 59 (IdentifierRep -> epsilon .)
    FUNC            reduce using rule 59 (IdentifierRep -> epsilon .)
    EQUAL           reduce using rule 59 (IdentifierRep -> epsilon .)
    SEMICOL         reduce using rule 59 (IdentifierRep -> epsilon .)


state 70

    (57) IdentifierList -> IDENTIFIER IdentifierRep .
    (58) IdentifierRep -> IdentifierRep . COMMA IDENTIFIER

    EQUAL           reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    LPAREN          reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    IDENTIFIER      reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    LBRACK          reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    STRUCT          reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    TIMES           reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    FUNC            reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    SEMICOL         reduce using rule 57 (IdentifierList -> IDENTIFIER IdentifierRep .)
    COMMA           shift and go to state 117


state 71

    (77) FunctionDecl -> FUNC FunctionName Function .

    SEMICOL         reduce using rule 77 (FunctionDecl -> FUNC FunctionName Function .)


state 72

    (26) Signature -> Parameters . ResultOpt
    (27) ResultOpt -> . Result
    (28) ResultOpt -> . epsilon
    (29) Result -> . Parameters
    (30) Result -> . Type
    (83) epsilon -> .
    (31) Parameters -> . LPAREN ParameterListOpt RPAREN
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RPAREN          reduce using rule 83 (epsilon -> .)
    LBRACE          reduce using rule 83 (epsilon -> .)
    COMMA           reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)
    COLON           reduce using rule 83 (epsilon -> .)
    LPAREN          shift and go to state 122
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

  ! LPAREN          [ reduce using rule 83 (epsilon -> .) ]

    StructType                     shift and go to state 58
    Parameters                     shift and go to state 118
    epsilon                        shift and go to state 121
    ResultOpt                      shift and go to state 120
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    TypeLit                        shift and go to state 55
    Result                         shift and go to state 123
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    Type                           shift and go to state 119
    QualifiedIdent                 shift and go to state 68

state 73

    (78) FunctionDecl -> FUNC FunctionName Signature .
    (80) Function -> Signature . FunctionBody
    (81) FunctionBody -> . Block
    (41) Block -> . LBRACE StatementList RBRACE

    SEMICOL         reduce using rule 78 (FunctionDecl -> FUNC FunctionName Signature .)
    LBRACE          shift and go to state 125

    FunctionBody                   shift and go to state 124
    Block                          shift and go to state 126

state 74

    (31) Parameters -> LPAREN . ParameterListOpt RPAREN
    (32) ParameterListOpt -> . ParametersList
    (33) ParameterListOpt -> . epsilon
    (34) ParametersList -> . Type
    (35) ParametersList -> . IdentifierList Type
    (36) ParametersList -> . ParameterDeclCommaRep
    (83) epsilon -> .
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (57) IdentifierList -> . IDENTIFIER IdentifierRep
    (37) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (38) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (39) ParameterDecl -> . IdentifierList Type
    (40) ParameterDecl -> . Type
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    RPAREN          reduce using rule 83 (epsilon -> .)
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 132
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    epsilon                        shift and go to state 134
    ParameterListOpt               shift and go to state 127
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    TypeLit                        shift and go to state 55
    IdentifierList                 shift and go to state 128
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    ParametersList                 shift and go to state 131
    Type                           shift and go to state 130
    ParameterDeclCommaRep          shift and go to state 129
    QualifiedIdent                 shift and go to state 68
    ParameterDecl                  shift and go to state 133

state 75

    (69) VarDecl -> VAR LPAREN VarSpecRep . RPAREN
    (70) VarSpecRep -> VarSpecRep . VarSpec SEMICOL
    (72) VarSpec -> . IdentifierList Type ExpressionListOpt
    (73) VarSpec -> . IdentifierList EQUAL ExpressionList
    (57) IdentifierList -> . IDENTIFIER IdentifierRep

    RPAREN          shift and go to state 135
    IDENTIFIER      shift and go to state 34

    VarSpec                        shift and go to state 136
    IdentifierList                 shift and go to state 40

state 76

    (71) VarSpecRep -> epsilon .

    RPAREN          reduce using rule 71 (VarSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 71 (VarSpecRep -> epsilon .)


state 77

    (73) VarSpec -> IdentifierList EQUAL . ExpressionList
    (130) ExpressionList -> . Expression ExpressionRep
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 137
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 78

    (72) VarSpec -> IdentifierList Type . ExpressionListOpt
    (74) ExpressionListOpt -> . EQUAL ExpressionList
    (75) ExpressionListOpt -> . epsilon
    (83) epsilon -> .

    EQUAL           shift and go to state 139
    SEMICOL         reduce using rule 83 (epsilon -> .)

    ExpressionListOpt              shift and go to state 141
    epsilon                        shift and go to state 140

state 79

    (61) TypeDecl -> TYPE LPAREN TypeSpecRep . RPAREN
    (62) TypeSpecRep -> TypeSpecRep . TypeSpec SEMICOL
    (64) TypeSpec -> . AliasDecl
    (65) TypeSpec -> . TypeDef
    (66) AliasDecl -> . IDENTIFIER EQUAL Type
    (67) TypeDef -> . IDENTIFIER Type

    RPAREN          shift and go to state 142
    IDENTIFIER      shift and go to state 45

    TypeDef                        shift and go to state 41
    AliasDecl                      shift and go to state 42
    TypeSpec                       shift and go to state 143

state 80

    (63) TypeSpecRep -> epsilon .

    RPAREN          reduce using rule 63 (TypeSpecRep -> epsilon .)
    IDENTIFIER      reduce using rule 63 (TypeSpecRep -> epsilon .)


state 81

    (66) AliasDecl -> IDENTIFIER EQUAL . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 144
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 82

    (67) TypeDef -> IDENTIFIER Type .

    SEMICOL         reduce using rule 67 (TypeDef -> IDENTIFIER Type .)


state 83

    (255) ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN .

    SEMICOL         reduce using rule 255 (ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN .)


state 84

    (256) ImportSpecRep -> ImportSpecRep ImportSpec . SEMICOL

    SEMICOL         shift and go to state 145


state 85

    (52) ConstSpecRep -> ConstSpecRep ConstSpec . SEMICOL

    SEMICOL         shift and go to state 146


state 86

    (51) ConstDecl -> CONST LPAREN ConstSpecRep RPAREN .

    SEMICOL         reduce using rule 51 (ConstDecl -> CONST LPAREN ConstSpecRep RPAREN .)


state 87

    (25) FunctionType -> FUNC Signature .

    COMMA           reduce using rule 25 (FunctionType -> FUNC Signature .)
    RPAREN          reduce using rule 25 (FunctionType -> FUNC Signature .)
    LPAREN          reduce using rule 25 (FunctionType -> FUNC Signature .)
    EQUAL           reduce using rule 25 (FunctionType -> FUNC Signature .)
    STRING          reduce using rule 25 (FunctionType -> FUNC Signature .)
    SEMICOL         reduce using rule 25 (FunctionType -> FUNC Signature .)
    LBRACE          reduce using rule 25 (FunctionType -> FUNC Signature .)
    COLON           reduce using rule 25 (FunctionType -> FUNC Signature .)


state 88

    (82) QualifiedIdent -> IDENTIFIER DOT . TypeName
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName

    IDENTIFIER      shift and go to state 57

    TypeName                       shift and go to state 147
    QualifiedIdent                 shift and go to state 68

state 89

    (24) BaseType -> Type .

    RPAREN          reduce using rule 24 (BaseType -> Type .)
    LPAREN          reduce using rule 24 (BaseType -> Type .)
    EQUAL           reduce using rule 24 (BaseType -> Type .)
    SEMICOL         reduce using rule 24 (BaseType -> Type .)
    LBRACE          reduce using rule 24 (BaseType -> Type .)
    COMMA           reduce using rule 24 (BaseType -> Type .)
    STRING          reduce using rule 24 (BaseType -> Type .)
    COLON           reduce using rule 24 (BaseType -> Type .)


state 90

    (23) PointerType -> TIMES BaseType .

    LPAREN          reduce using rule 23 (PointerType -> TIMES BaseType .)
    EQUAL           reduce using rule 23 (PointerType -> TIMES BaseType .)
    SEMICOL         reduce using rule 23 (PointerType -> TIMES BaseType .)
    RPAREN          reduce using rule 23 (PointerType -> TIMES BaseType .)
    LBRACE          reduce using rule 23 (PointerType -> TIMES BaseType .)
    COMMA           reduce using rule 23 (PointerType -> TIMES BaseType .)
    STRING          reduce using rule 23 (PointerType -> TIMES BaseType .)
    COLON           reduce using rule 23 (PointerType -> TIMES BaseType .)


state 91

    (4) Type -> LPAREN Type . RPAREN

    RPAREN          shift and go to state 148


state 92

    (55) TypeExprListOpt -> TypeOpt EQUAL . ExpressionList
    (130) ExpressionList -> . Expression ExpressionRep
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Expression                     shift and go to state 138
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 149
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 93

    (16) StructType -> STRUCT LBRACE . FieldDeclRep RBRACE
    (17) FieldDeclRep -> . FieldDeclRep FieldDecl SEMICOL
    (18) FieldDeclRep -> . epsilon
    (83) epsilon -> .

    RBRACE          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)

    FieldDeclRep                   shift and go to state 150
    epsilon                        shift and go to state 151

state 94

    (114) PrimaryExpr -> Conversion .

    DOT             reduce using rule 114 (PrimaryExpr -> Conversion .)
    LBRACK          reduce using rule 114 (PrimaryExpr -> Conversion .)
    LPAREN          reduce using rule 114 (PrimaryExpr -> Conversion .)
    PLUSPLUS        reduce using rule 114 (PrimaryExpr -> Conversion .)
    MINUSMIN        reduce using rule 114 (PrimaryExpr -> Conversion .)
    OROR            reduce using rule 114 (PrimaryExpr -> Conversion .)
    AMPAMP          reduce using rule 114 (PrimaryExpr -> Conversion .)
    EQEQ            reduce using rule 114 (PrimaryExpr -> Conversion .)
    NOTEQ           reduce using rule 114 (PrimaryExpr -> Conversion .)
    LESS            reduce using rule 114 (PrimaryExpr -> Conversion .)
    GREAT           reduce using rule 114 (PrimaryExpr -> Conversion .)
    LEQ             reduce using rule 114 (PrimaryExpr -> Conversion .)
    GEQ             reduce using rule 114 (PrimaryExpr -> Conversion .)
    PLUS            reduce using rule 114 (PrimaryExpr -> Conversion .)
    MINUS           reduce using rule 114 (PrimaryExpr -> Conversion .)
    OR              reduce using rule 114 (PrimaryExpr -> Conversion .)
    CARET           reduce using rule 114 (PrimaryExpr -> Conversion .)
    TIMES           reduce using rule 114 (PrimaryExpr -> Conversion .)
    DIVIDE          reduce using rule 114 (PrimaryExpr -> Conversion .)
    MOD             reduce using rule 114 (PrimaryExpr -> Conversion .)
    AMPERS          reduce using rule 114 (PrimaryExpr -> Conversion .)
    LL              reduce using rule 114 (PrimaryExpr -> Conversion .)
    GG              reduce using rule 114 (PrimaryExpr -> Conversion .)
    AMPCAR          reduce using rule 114 (PrimaryExpr -> Conversion .)
    COMMA           reduce using rule 114 (PrimaryExpr -> Conversion .)
    SEMICOL         reduce using rule 114 (PrimaryExpr -> Conversion .)
    PLUSEQ          reduce using rule 114 (PrimaryExpr -> Conversion .)
    MINUSEQ         reduce using rule 114 (PrimaryExpr -> Conversion .)
    TIMESEQ         reduce using rule 114 (PrimaryExpr -> Conversion .)
    DIVIDEEQ        reduce using rule 114 (PrimaryExpr -> Conversion .)
    MODEQ           reduce using rule 114 (PrimaryExpr -> Conversion .)
    AMPEQ           reduce using rule 114 (PrimaryExpr -> Conversion .)
    OREQ            reduce using rule 114 (PrimaryExpr -> Conversion .)
    CAREQ           reduce using rule 114 (PrimaryExpr -> Conversion .)
    LLEQ            reduce using rule 114 (PrimaryExpr -> Conversion .)
    GGEQ            reduce using rule 114 (PrimaryExpr -> Conversion .)
    EQUAL           reduce using rule 114 (PrimaryExpr -> Conversion .)
    RPAREN          reduce using rule 114 (PrimaryExpr -> Conversion .)
    LBRACE          reduce using rule 114 (PrimaryExpr -> Conversion .)
    RBRACK          reduce using rule 114 (PrimaryExpr -> Conversion .)
    COLON           reduce using rule 114 (PrimaryExpr -> Conversion .)


state 95

    (138) UnaryExpr -> UnaryOp . UnaryExpr
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 152
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 96

    (137) UnaryExpr -> PrimaryExpr .
    (115) PrimaryExpr -> PrimaryExpr . Selector
    (116) PrimaryExpr -> PrimaryExpr . Index
    (117) PrimaryExpr -> PrimaryExpr . Slice
    (118) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (119) PrimaryExpr -> PrimaryExpr . Arguments
    (120) Selector -> . DOT IDENTIFIER
    (121) Index -> . LBRACK Expression RBRACK
    (122) Slice -> . LBRACK ExpressionOpt COLON ExpressionOpt RBRACK
    (123) Slice -> . LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK
    (124) TypeAssertion -> . DOT LPAREN Type RPAREN
    (125) Arguments -> . LPAREN ExpressionListTypeOpt RPAREN

    PLUSPLUS        reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    MINUSMIN        reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    OROR            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    AMPAMP          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    EQEQ            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    NOTEQ           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    LESS            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    GREAT           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    LEQ             reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    GEQ             reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    PLUS            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    MINUS           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    CARET           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    TIMES           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    DIVIDE          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    MOD             reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    AMPERS          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    LL              reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    GG              reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    AMPCAR          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    SEMICOL         reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    PLUSEQ          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    MINUSEQ         reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    TIMESEQ         reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    DIVIDEEQ        reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    MODEQ           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    AMPEQ           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    OREQ            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    CAREQ           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    LLEQ            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    GGEQ            reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    EQUAL           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    COLON           reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    LBRACE          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    RPAREN          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    RBRACK          reduce using rule 137 (UnaryExpr -> PrimaryExpr .)
    DOT             shift and go to state 160
    LBRACK          shift and go to state 155
    LPAREN          shift and go to state 159

    Index                          shift and go to state 153
    Slice                          shift and go to state 154
    Selector                       shift and go to state 156
    TypeAssertion                  shift and go to state 157
    Arguments                      shift and go to state 158

state 97

    (84) Operand -> Literal .

    DOT             reduce using rule 84 (Operand -> Literal .)
    LBRACK          reduce using rule 84 (Operand -> Literal .)
    LPAREN          reduce using rule 84 (Operand -> Literal .)
    OROR            reduce using rule 84 (Operand -> Literal .)
    AMPAMP          reduce using rule 84 (Operand -> Literal .)
    EQEQ            reduce using rule 84 (Operand -> Literal .)
    NOTEQ           reduce using rule 84 (Operand -> Literal .)
    LESS            reduce using rule 84 (Operand -> Literal .)
    GREAT           reduce using rule 84 (Operand -> Literal .)
    LEQ             reduce using rule 84 (Operand -> Literal .)
    GEQ             reduce using rule 84 (Operand -> Literal .)
    PLUS            reduce using rule 84 (Operand -> Literal .)
    MINUS           reduce using rule 84 (Operand -> Literal .)
    OR              reduce using rule 84 (Operand -> Literal .)
    CARET           reduce using rule 84 (Operand -> Literal .)
    TIMES           reduce using rule 84 (Operand -> Literal .)
    DIVIDE          reduce using rule 84 (Operand -> Literal .)
    MOD             reduce using rule 84 (Operand -> Literal .)
    AMPERS          reduce using rule 84 (Operand -> Literal .)
    LL              reduce using rule 84 (Operand -> Literal .)
    GG              reduce using rule 84 (Operand -> Literal .)
    AMPCAR          reduce using rule 84 (Operand -> Literal .)
    COMMA           reduce using rule 84 (Operand -> Literal .)
    COLON           reduce using rule 84 (Operand -> Literal .)
    SEMICOL         reduce using rule 84 (Operand -> Literal .)
    RPAREN          reduce using rule 84 (Operand -> Literal .)
    LBRACE          reduce using rule 84 (Operand -> Literal .)
    PLUSEQ          reduce using rule 84 (Operand -> Literal .)
    MINUSEQ         reduce using rule 84 (Operand -> Literal .)
    TIMESEQ         reduce using rule 84 (Operand -> Literal .)
    DIVIDEEQ        reduce using rule 84 (Operand -> Literal .)
    MODEQ           reduce using rule 84 (Operand -> Literal .)
    AMPEQ           reduce using rule 84 (Operand -> Literal .)
    OREQ            reduce using rule 84 (Operand -> Literal .)
    CAREQ           reduce using rule 84 (Operand -> Literal .)
    LLEQ            reduce using rule 84 (Operand -> Literal .)
    GGEQ            reduce using rule 84 (Operand -> Literal .)
    EQUAL           reduce using rule 84 (Operand -> Literal .)
    RBRACK          reduce using rule 84 (Operand -> Literal .)
    PLUSPLUS        reduce using rule 84 (Operand -> Literal .)
    MINUSMIN        reduce using rule 84 (Operand -> Literal .)


state 98

    (113) PrimaryExpr -> Operand .

    DOT             reduce using rule 113 (PrimaryExpr -> Operand .)
    LBRACK          reduce using rule 113 (PrimaryExpr -> Operand .)
    LPAREN          reduce using rule 113 (PrimaryExpr -> Operand .)
    PLUSPLUS        reduce using rule 113 (PrimaryExpr -> Operand .)
    MINUSMIN        reduce using rule 113 (PrimaryExpr -> Operand .)
    OROR            reduce using rule 113 (PrimaryExpr -> Operand .)
    AMPAMP          reduce using rule 113 (PrimaryExpr -> Operand .)
    EQEQ            reduce using rule 113 (PrimaryExpr -> Operand .)
    NOTEQ           reduce using rule 113 (PrimaryExpr -> Operand .)
    LESS            reduce using rule 113 (PrimaryExpr -> Operand .)
    GREAT           reduce using rule 113 (PrimaryExpr -> Operand .)
    LEQ             reduce using rule 113 (PrimaryExpr -> Operand .)
    GEQ             reduce using rule 113 (PrimaryExpr -> Operand .)
    PLUS            reduce using rule 113 (PrimaryExpr -> Operand .)
    MINUS           reduce using rule 113 (PrimaryExpr -> Operand .)
    OR              reduce using rule 113 (PrimaryExpr -> Operand .)
    CARET           reduce using rule 113 (PrimaryExpr -> Operand .)
    TIMES           reduce using rule 113 (PrimaryExpr -> Operand .)
    DIVIDE          reduce using rule 113 (PrimaryExpr -> Operand .)
    MOD             reduce using rule 113 (PrimaryExpr -> Operand .)
    AMPERS          reduce using rule 113 (PrimaryExpr -> Operand .)
    LL              reduce using rule 113 (PrimaryExpr -> Operand .)
    GG              reduce using rule 113 (PrimaryExpr -> Operand .)
    AMPCAR          reduce using rule 113 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 113 (PrimaryExpr -> Operand .)
    SEMICOL         reduce using rule 113 (PrimaryExpr -> Operand .)
    PLUSEQ          reduce using rule 113 (PrimaryExpr -> Operand .)
    MINUSEQ         reduce using rule 113 (PrimaryExpr -> Operand .)
    TIMESEQ         reduce using rule 113 (PrimaryExpr -> Operand .)
    DIVIDEEQ        reduce using rule 113 (PrimaryExpr -> Operand .)
    MODEQ           reduce using rule 113 (PrimaryExpr -> Operand .)
    AMPEQ           reduce using rule 113 (PrimaryExpr -> Operand .)
    OREQ            reduce using rule 113 (PrimaryExpr -> Operand .)
    CAREQ           reduce using rule 113 (PrimaryExpr -> Operand .)
    LLEQ            reduce using rule 113 (PrimaryExpr -> Operand .)
    GGEQ            reduce using rule 113 (PrimaryExpr -> Operand .)
    EQUAL           reduce using rule 113 (PrimaryExpr -> Operand .)
    RPAREN          reduce using rule 113 (PrimaryExpr -> Operand .)
    LBRACE          reduce using rule 113 (PrimaryExpr -> Operand .)
    RBRACK          reduce using rule 113 (PrimaryExpr -> Operand .)
    COLON           reduce using rule 113 (PrimaryExpr -> Operand .)


state 99

    (91) BasicLit -> RUNE .

    DOT             reduce using rule 91 (BasicLit -> RUNE .)
    LBRACK          reduce using rule 91 (BasicLit -> RUNE .)
    LPAREN          reduce using rule 91 (BasicLit -> RUNE .)
    LBRACE          reduce using rule 91 (BasicLit -> RUNE .)
    OROR            reduce using rule 91 (BasicLit -> RUNE .)
    AMPAMP          reduce using rule 91 (BasicLit -> RUNE .)
    EQEQ            reduce using rule 91 (BasicLit -> RUNE .)
    NOTEQ           reduce using rule 91 (BasicLit -> RUNE .)
    LESS            reduce using rule 91 (BasicLit -> RUNE .)
    GREAT           reduce using rule 91 (BasicLit -> RUNE .)
    LEQ             reduce using rule 91 (BasicLit -> RUNE .)
    GEQ             reduce using rule 91 (BasicLit -> RUNE .)
    PLUS            reduce using rule 91 (BasicLit -> RUNE .)
    MINUS           reduce using rule 91 (BasicLit -> RUNE .)
    OR              reduce using rule 91 (BasicLit -> RUNE .)
    CARET           reduce using rule 91 (BasicLit -> RUNE .)
    TIMES           reduce using rule 91 (BasicLit -> RUNE .)
    DIVIDE          reduce using rule 91 (BasicLit -> RUNE .)
    MOD             reduce using rule 91 (BasicLit -> RUNE .)
    AMPERS          reduce using rule 91 (BasicLit -> RUNE .)
    LL              reduce using rule 91 (BasicLit -> RUNE .)
    GG              reduce using rule 91 (BasicLit -> RUNE .)
    AMPCAR          reduce using rule 91 (BasicLit -> RUNE .)
    PLUSPLUS        reduce using rule 91 (BasicLit -> RUNE .)
    MINUSMIN        reduce using rule 91 (BasicLit -> RUNE .)
    COMMA           reduce using rule 91 (BasicLit -> RUNE .)
    SEMICOL         reduce using rule 91 (BasicLit -> RUNE .)
    PLUSEQ          reduce using rule 91 (BasicLit -> RUNE .)
    MINUSEQ         reduce using rule 91 (BasicLit -> RUNE .)
    TIMESEQ         reduce using rule 91 (BasicLit -> RUNE .)
    DIVIDEEQ        reduce using rule 91 (BasicLit -> RUNE .)
    MODEQ           reduce using rule 91 (BasicLit -> RUNE .)
    AMPEQ           reduce using rule 91 (BasicLit -> RUNE .)
    OREQ            reduce using rule 91 (BasicLit -> RUNE .)
    CAREQ           reduce using rule 91 (BasicLit -> RUNE .)
    LLEQ            reduce using rule 91 (BasicLit -> RUNE .)
    GGEQ            reduce using rule 91 (BasicLit -> RUNE .)
    EQUAL           reduce using rule 91 (BasicLit -> RUNE .)
    RPAREN          reduce using rule 91 (BasicLit -> RUNE .)
    COLON           reduce using rule 91 (BasicLit -> RUNE .)
    RBRACK          reduce using rule 91 (BasicLit -> RUNE .)


state 100

    (112) Conversion -> Type . LPAREN Expression RPAREN

    LPAREN          shift and go to state 161


state 101

    (163) UnaryOp -> MINUS .

    NOT             reduce using rule 163 (UnaryOp -> MINUS .)
    PLUS            reduce using rule 163 (UnaryOp -> MINUS .)
    MINUS           reduce using rule 163 (UnaryOp -> MINUS .)
    TIMES           reduce using rule 163 (UnaryOp -> MINUS .)
    AMPERS          reduce using rule 163 (UnaryOp -> MINUS .)
    LPAREN          reduce using rule 163 (UnaryOp -> MINUS .)
    IDENTIFIER      reduce using rule 163 (UnaryOp -> MINUS .)
    INTEGER         reduce using rule 163 (UnaryOp -> MINUS .)
    FLOAT           reduce using rule 163 (UnaryOp -> MINUS .)
    IMAGINARY       reduce using rule 163 (UnaryOp -> MINUS .)
    RUNE            reduce using rule 163 (UnaryOp -> MINUS .)
    STRING          reduce using rule 163 (UnaryOp -> MINUS .)
    LBRACK          reduce using rule 163 (UnaryOp -> MINUS .)
    STRUCT          reduce using rule 163 (UnaryOp -> MINUS .)
    FUNC            reduce using rule 163 (UnaryOp -> MINUS .)


state 102

    (85) Operand -> OperandName .

    DOT             reduce using rule 85 (Operand -> OperandName .)
    LBRACK          reduce using rule 85 (Operand -> OperandName .)
    LPAREN          reduce using rule 85 (Operand -> OperandName .)
    OROR            reduce using rule 85 (Operand -> OperandName .)
    AMPAMP          reduce using rule 85 (Operand -> OperandName .)
    EQEQ            reduce using rule 85 (Operand -> OperandName .)
    NOTEQ           reduce using rule 85 (Operand -> OperandName .)
    LESS            reduce using rule 85 (Operand -> OperandName .)
    GREAT           reduce using rule 85 (Operand -> OperandName .)
    LEQ             reduce using rule 85 (Operand -> OperandName .)
    GEQ             reduce using rule 85 (Operand -> OperandName .)
    PLUS            reduce using rule 85 (Operand -> OperandName .)
    MINUS           reduce using rule 85 (Operand -> OperandName .)
    OR              reduce using rule 85 (Operand -> OperandName .)
    CARET           reduce using rule 85 (Operand -> OperandName .)
    TIMES           reduce using rule 85 (Operand -> OperandName .)
    DIVIDE          reduce using rule 85 (Operand -> OperandName .)
    MOD             reduce using rule 85 (Operand -> OperandName .)
    AMPERS          reduce using rule 85 (Operand -> OperandName .)
    LL              reduce using rule 85 (Operand -> OperandName .)
    GG              reduce using rule 85 (Operand -> OperandName .)
    AMPCAR          reduce using rule 85 (Operand -> OperandName .)
    COMMA           reduce using rule 85 (Operand -> OperandName .)
    COLON           reduce using rule 85 (Operand -> OperandName .)
    SEMICOL         reduce using rule 85 (Operand -> OperandName .)
    RPAREN          reduce using rule 85 (Operand -> OperandName .)
    LBRACE          reduce using rule 85 (Operand -> OperandName .)
    PLUSEQ          reduce using rule 85 (Operand -> OperandName .)
    MINUSEQ         reduce using rule 85 (Operand -> OperandName .)
    TIMESEQ         reduce using rule 85 (Operand -> OperandName .)
    DIVIDEEQ        reduce using rule 85 (Operand -> OperandName .)
    MODEQ           reduce using rule 85 (Operand -> OperandName .)
    AMPEQ           reduce using rule 85 (Operand -> OperandName .)
    OREQ            reduce using rule 85 (Operand -> OperandName .)
    CAREQ           reduce using rule 85 (Operand -> OperandName .)
    LLEQ            reduce using rule 85 (Operand -> OperandName .)
    GGEQ            reduce using rule 85 (Operand -> OperandName .)
    EQUAL           reduce using rule 85 (Operand -> OperandName .)
    RBRACK          reduce using rule 85 (Operand -> OperandName .)
    PLUSPLUS        reduce using rule 85 (Operand -> OperandName .)
    MINUSMIN        reduce using rule 85 (Operand -> OperandName .)


state 103

    (87) Literal -> BasicLit .

    DOT             reduce using rule 87 (Literal -> BasicLit .)
    LBRACK          reduce using rule 87 (Literal -> BasicLit .)
    LPAREN          reduce using rule 87 (Literal -> BasicLit .)
    OROR            reduce using rule 87 (Literal -> BasicLit .)
    AMPAMP          reduce using rule 87 (Literal -> BasicLit .)
    EQEQ            reduce using rule 87 (Literal -> BasicLit .)
    NOTEQ           reduce using rule 87 (Literal -> BasicLit .)
    LESS            reduce using rule 87 (Literal -> BasicLit .)
    GREAT           reduce using rule 87 (Literal -> BasicLit .)
    LEQ             reduce using rule 87 (Literal -> BasicLit .)
    GEQ             reduce using rule 87 (Literal -> BasicLit .)
    PLUS            reduce using rule 87 (Literal -> BasicLit .)
    MINUS           reduce using rule 87 (Literal -> BasicLit .)
    OR              reduce using rule 87 (Literal -> BasicLit .)
    CARET           reduce using rule 87 (Literal -> BasicLit .)
    TIMES           reduce using rule 87 (Literal -> BasicLit .)
    DIVIDE          reduce using rule 87 (Literal -> BasicLit .)
    MOD             reduce using rule 87 (Literal -> BasicLit .)
    AMPERS          reduce using rule 87 (Literal -> BasicLit .)
    LL              reduce using rule 87 (Literal -> BasicLit .)
    GG              reduce using rule 87 (Literal -> BasicLit .)
    AMPCAR          reduce using rule 87 (Literal -> BasicLit .)
    RBRACK          reduce using rule 87 (Literal -> BasicLit .)
    COMMA           reduce using rule 87 (Literal -> BasicLit .)
    SEMICOL         reduce using rule 87 (Literal -> BasicLit .)
    RPAREN          reduce using rule 87 (Literal -> BasicLit .)
    COLON           reduce using rule 87 (Literal -> BasicLit .)
    PLUSPLUS        reduce using rule 87 (Literal -> BasicLit .)
    MINUSMIN        reduce using rule 87 (Literal -> BasicLit .)
    PLUSEQ          reduce using rule 87 (Literal -> BasicLit .)
    MINUSEQ         reduce using rule 87 (Literal -> BasicLit .)
    TIMESEQ         reduce using rule 87 (Literal -> BasicLit .)
    DIVIDEEQ        reduce using rule 87 (Literal -> BasicLit .)
    MODEQ           reduce using rule 87 (Literal -> BasicLit .)
    AMPEQ           reduce using rule 87 (Literal -> BasicLit .)
    OREQ            reduce using rule 87 (Literal -> BasicLit .)
    CAREQ           reduce using rule 87 (Literal -> BasicLit .)
    LLEQ            reduce using rule 87 (Literal -> BasicLit .)
    GGEQ            reduce using rule 87 (Literal -> BasicLit .)
    EQUAL           reduce using rule 87 (Literal -> BasicLit .)
    LBRACE          reduce using rule 87 (Literal -> BasicLit .)


state 104

    (162) UnaryOp -> PLUS .

    NOT             reduce using rule 162 (UnaryOp -> PLUS .)
    PLUS            reduce using rule 162 (UnaryOp -> PLUS .)
    MINUS           reduce using rule 162 (UnaryOp -> PLUS .)
    TIMES           reduce using rule 162 (UnaryOp -> PLUS .)
    AMPERS          reduce using rule 162 (UnaryOp -> PLUS .)
    LPAREN          reduce using rule 162 (UnaryOp -> PLUS .)
    IDENTIFIER      reduce using rule 162 (UnaryOp -> PLUS .)
    INTEGER         reduce using rule 162 (UnaryOp -> PLUS .)
    FLOAT           reduce using rule 162 (UnaryOp -> PLUS .)
    IMAGINARY       reduce using rule 162 (UnaryOp -> PLUS .)
    RUNE            reduce using rule 162 (UnaryOp -> PLUS .)
    STRING          reduce using rule 162 (UnaryOp -> PLUS .)
    LBRACK          reduce using rule 162 (UnaryOp -> PLUS .)
    STRUCT          reduce using rule 162 (UnaryOp -> PLUS .)
    FUNC            reduce using rule 162 (UnaryOp -> PLUS .)


state 105

    (88) BasicLit -> INTEGER .

    DOT             reduce using rule 88 (BasicLit -> INTEGER .)
    LBRACK          reduce using rule 88 (BasicLit -> INTEGER .)
    LPAREN          reduce using rule 88 (BasicLit -> INTEGER .)
    LBRACE          reduce using rule 88 (BasicLit -> INTEGER .)
    OROR            reduce using rule 88 (BasicLit -> INTEGER .)
    AMPAMP          reduce using rule 88 (BasicLit -> INTEGER .)
    EQEQ            reduce using rule 88 (BasicLit -> INTEGER .)
    NOTEQ           reduce using rule 88 (BasicLit -> INTEGER .)
    LESS            reduce using rule 88 (BasicLit -> INTEGER .)
    GREAT           reduce using rule 88 (BasicLit -> INTEGER .)
    LEQ             reduce using rule 88 (BasicLit -> INTEGER .)
    GEQ             reduce using rule 88 (BasicLit -> INTEGER .)
    PLUS            reduce using rule 88 (BasicLit -> INTEGER .)
    MINUS           reduce using rule 88 (BasicLit -> INTEGER .)
    OR              reduce using rule 88 (BasicLit -> INTEGER .)
    CARET           reduce using rule 88 (BasicLit -> INTEGER .)
    TIMES           reduce using rule 88 (BasicLit -> INTEGER .)
    DIVIDE          reduce using rule 88 (BasicLit -> INTEGER .)
    MOD             reduce using rule 88 (BasicLit -> INTEGER .)
    AMPERS          reduce using rule 88 (BasicLit -> INTEGER .)
    LL              reduce using rule 88 (BasicLit -> INTEGER .)
    GG              reduce using rule 88 (BasicLit -> INTEGER .)
    AMPCAR          reduce using rule 88 (BasicLit -> INTEGER .)
    PLUSPLUS        reduce using rule 88 (BasicLit -> INTEGER .)
    MINUSMIN        reduce using rule 88 (BasicLit -> INTEGER .)
    COMMA           reduce using rule 88 (BasicLit -> INTEGER .)
    SEMICOL         reduce using rule 88 (BasicLit -> INTEGER .)
    PLUSEQ          reduce using rule 88 (BasicLit -> INTEGER .)
    MINUSEQ         reduce using rule 88 (BasicLit -> INTEGER .)
    TIMESEQ         reduce using rule 88 (BasicLit -> INTEGER .)
    DIVIDEEQ        reduce using rule 88 (BasicLit -> INTEGER .)
    MODEQ           reduce using rule 88 (BasicLit -> INTEGER .)
    AMPEQ           reduce using rule 88 (BasicLit -> INTEGER .)
    OREQ            reduce using rule 88 (BasicLit -> INTEGER .)
    CAREQ           reduce using rule 88 (BasicLit -> INTEGER .)
    LLEQ            reduce using rule 88 (BasicLit -> INTEGER .)
    GGEQ            reduce using rule 88 (BasicLit -> INTEGER .)
    EQUAL           reduce using rule 88 (BasicLit -> INTEGER .)
    RPAREN          reduce using rule 88 (BasicLit -> INTEGER .)
    COLON           reduce using rule 88 (BasicLit -> INTEGER .)
    RBRACK          reduce using rule 88 (BasicLit -> INTEGER .)


state 106

    (90) BasicLit -> IMAGINARY .

    DOT             reduce using rule 90 (BasicLit -> IMAGINARY .)
    LBRACK          reduce using rule 90 (BasicLit -> IMAGINARY .)
    LPAREN          reduce using rule 90 (BasicLit -> IMAGINARY .)
    LBRACE          reduce using rule 90 (BasicLit -> IMAGINARY .)
    OROR            reduce using rule 90 (BasicLit -> IMAGINARY .)
    AMPAMP          reduce using rule 90 (BasicLit -> IMAGINARY .)
    EQEQ            reduce using rule 90 (BasicLit -> IMAGINARY .)
    NOTEQ           reduce using rule 90 (BasicLit -> IMAGINARY .)
    LESS            reduce using rule 90 (BasicLit -> IMAGINARY .)
    GREAT           reduce using rule 90 (BasicLit -> IMAGINARY .)
    LEQ             reduce using rule 90 (BasicLit -> IMAGINARY .)
    GEQ             reduce using rule 90 (BasicLit -> IMAGINARY .)
    PLUS            reduce using rule 90 (BasicLit -> IMAGINARY .)
    MINUS           reduce using rule 90 (BasicLit -> IMAGINARY .)
    OR              reduce using rule 90 (BasicLit -> IMAGINARY .)
    CARET           reduce using rule 90 (BasicLit -> IMAGINARY .)
    TIMES           reduce using rule 90 (BasicLit -> IMAGINARY .)
    DIVIDE          reduce using rule 90 (BasicLit -> IMAGINARY .)
    MOD             reduce using rule 90 (BasicLit -> IMAGINARY .)
    AMPERS          reduce using rule 90 (BasicLit -> IMAGINARY .)
    LL              reduce using rule 90 (BasicLit -> IMAGINARY .)
    GG              reduce using rule 90 (BasicLit -> IMAGINARY .)
    AMPCAR          reduce using rule 90 (BasicLit -> IMAGINARY .)
    PLUSPLUS        reduce using rule 90 (BasicLit -> IMAGINARY .)
    MINUSMIN        reduce using rule 90 (BasicLit -> IMAGINARY .)
    COMMA           reduce using rule 90 (BasicLit -> IMAGINARY .)
    SEMICOL         reduce using rule 90 (BasicLit -> IMAGINARY .)
    PLUSEQ          reduce using rule 90 (BasicLit -> IMAGINARY .)
    MINUSEQ         reduce using rule 90 (BasicLit -> IMAGINARY .)
    TIMESEQ         reduce using rule 90 (BasicLit -> IMAGINARY .)
    DIVIDEEQ        reduce using rule 90 (BasicLit -> IMAGINARY .)
    MODEQ           reduce using rule 90 (BasicLit -> IMAGINARY .)
    AMPEQ           reduce using rule 90 (BasicLit -> IMAGINARY .)
    OREQ            reduce using rule 90 (BasicLit -> IMAGINARY .)
    CAREQ           reduce using rule 90 (BasicLit -> IMAGINARY .)
    LLEQ            reduce using rule 90 (BasicLit -> IMAGINARY .)
    GGEQ            reduce using rule 90 (BasicLit -> IMAGINARY .)
    EQUAL           reduce using rule 90 (BasicLit -> IMAGINARY .)
    RPAREN          reduce using rule 90 (BasicLit -> IMAGINARY .)
    COLON           reduce using rule 90 (BasicLit -> IMAGINARY .)
    RBRACK          reduce using rule 90 (BasicLit -> IMAGINARY .)


state 107

    (93) OperandName -> IDENTIFIER .
    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName

  ! reduce/reduce conflict for LPAREN resolved using rule 5 (TypeName -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    LBRACK          reduce using rule 93 (OperandName -> IDENTIFIER .)
    OROR            reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPAMP          reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    NOTEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LESS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GREAT           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 93 (OperandName -> IDENTIFIER .)
    CARET           reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMES           reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPERS          reduce using rule 93 (OperandName -> IDENTIFIER .)
    LL              reduce using rule 93 (OperandName -> IDENTIFIER .)
    GG              reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPCAR          reduce using rule 93 (OperandName -> IDENTIFIER .)
    RBRACK          reduce using rule 93 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 93 (OperandName -> IDENTIFIER .)
    SEMICOL         reduce using rule 93 (OperandName -> IDENTIFIER .)
    RPAREN          reduce using rule 93 (OperandName -> IDENTIFIER .)
    COLON           reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSMIN        reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSEQ          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMESEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDEEQ        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MODEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OREQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    CAREQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LLEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GGEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQUAL           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LBRACE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88

  ! DOT             [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]


state 108

    (92) BasicLit -> STRING .

    DOT             reduce using rule 92 (BasicLit -> STRING .)
    LBRACK          reduce using rule 92 (BasicLit -> STRING .)
    LPAREN          reduce using rule 92 (BasicLit -> STRING .)
    LBRACE          reduce using rule 92 (BasicLit -> STRING .)
    OROR            reduce using rule 92 (BasicLit -> STRING .)
    AMPAMP          reduce using rule 92 (BasicLit -> STRING .)
    EQEQ            reduce using rule 92 (BasicLit -> STRING .)
    NOTEQ           reduce using rule 92 (BasicLit -> STRING .)
    LESS            reduce using rule 92 (BasicLit -> STRING .)
    GREAT           reduce using rule 92 (BasicLit -> STRING .)
    LEQ             reduce using rule 92 (BasicLit -> STRING .)
    GEQ             reduce using rule 92 (BasicLit -> STRING .)
    PLUS            reduce using rule 92 (BasicLit -> STRING .)
    MINUS           reduce using rule 92 (BasicLit -> STRING .)
    OR              reduce using rule 92 (BasicLit -> STRING .)
    CARET           reduce using rule 92 (BasicLit -> STRING .)
    TIMES           reduce using rule 92 (BasicLit -> STRING .)
    DIVIDE          reduce using rule 92 (BasicLit -> STRING .)
    MOD             reduce using rule 92 (BasicLit -> STRING .)
    AMPERS          reduce using rule 92 (BasicLit -> STRING .)
    LL              reduce using rule 92 (BasicLit -> STRING .)
    GG              reduce using rule 92 (BasicLit -> STRING .)
    AMPCAR          reduce using rule 92 (BasicLit -> STRING .)
    PLUSPLUS        reduce using rule 92 (BasicLit -> STRING .)
    MINUSMIN        reduce using rule 92 (BasicLit -> STRING .)
    COMMA           reduce using rule 92 (BasicLit -> STRING .)
    SEMICOL         reduce using rule 92 (BasicLit -> STRING .)
    PLUSEQ          reduce using rule 92 (BasicLit -> STRING .)
    MINUSEQ         reduce using rule 92 (BasicLit -> STRING .)
    TIMESEQ         reduce using rule 92 (BasicLit -> STRING .)
    DIVIDEEQ        reduce using rule 92 (BasicLit -> STRING .)
    MODEQ           reduce using rule 92 (BasicLit -> STRING .)
    AMPEQ           reduce using rule 92 (BasicLit -> STRING .)
    OREQ            reduce using rule 92 (BasicLit -> STRING .)
    CAREQ           reduce using rule 92 (BasicLit -> STRING .)
    LLEQ            reduce using rule 92 (BasicLit -> STRING .)
    GGEQ            reduce using rule 92 (BasicLit -> STRING .)
    EQUAL           reduce using rule 92 (BasicLit -> STRING .)
    RPAREN          reduce using rule 92 (BasicLit -> STRING .)
    COLON           reduce using rule 92 (BasicLit -> STRING .)
    RBRACK          reduce using rule 92 (BasicLit -> STRING .)


state 109

    (133) Expression -> UnaryExpr .

    RBRACK          reduce using rule 133 (Expression -> UnaryExpr .)
    OROR            reduce using rule 133 (Expression -> UnaryExpr .)
    AMPAMP          reduce using rule 133 (Expression -> UnaryExpr .)
    EQEQ            reduce using rule 133 (Expression -> UnaryExpr .)
    NOTEQ           reduce using rule 133 (Expression -> UnaryExpr .)
    LESS            reduce using rule 133 (Expression -> UnaryExpr .)
    GREAT           reduce using rule 133 (Expression -> UnaryExpr .)
    LEQ             reduce using rule 133 (Expression -> UnaryExpr .)
    GEQ             reduce using rule 133 (Expression -> UnaryExpr .)
    PLUS            reduce using rule 133 (Expression -> UnaryExpr .)
    MINUS           reduce using rule 133 (Expression -> UnaryExpr .)
    OR              reduce using rule 133 (Expression -> UnaryExpr .)
    CARET           reduce using rule 133 (Expression -> UnaryExpr .)
    TIMES           reduce using rule 133 (Expression -> UnaryExpr .)
    DIVIDE          reduce using rule 133 (Expression -> UnaryExpr .)
    MOD             reduce using rule 133 (Expression -> UnaryExpr .)
    AMPERS          reduce using rule 133 (Expression -> UnaryExpr .)
    LL              reduce using rule 133 (Expression -> UnaryExpr .)
    GG              reduce using rule 133 (Expression -> UnaryExpr .)
    AMPCAR          reduce using rule 133 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 133 (Expression -> UnaryExpr .)
    SEMICOL         reduce using rule 133 (Expression -> UnaryExpr .)
    RPAREN          reduce using rule 133 (Expression -> UnaryExpr .)
    PLUSPLUS        reduce using rule 133 (Expression -> UnaryExpr .)
    MINUSMIN        reduce using rule 133 (Expression -> UnaryExpr .)
    LBRACE          reduce using rule 133 (Expression -> UnaryExpr .)
    EQUAL           reduce using rule 133 (Expression -> UnaryExpr .)
    PLUSEQ          reduce using rule 133 (Expression -> UnaryExpr .)
    MINUSEQ         reduce using rule 133 (Expression -> UnaryExpr .)
    TIMESEQ         reduce using rule 133 (Expression -> UnaryExpr .)
    DIVIDEEQ        reduce using rule 133 (Expression -> UnaryExpr .)
    MODEQ           reduce using rule 133 (Expression -> UnaryExpr .)
    AMPEQ           reduce using rule 133 (Expression -> UnaryExpr .)
    OREQ            reduce using rule 133 (Expression -> UnaryExpr .)
    CAREQ           reduce using rule 133 (Expression -> UnaryExpr .)
    LLEQ            reduce using rule 133 (Expression -> UnaryExpr .)
    GGEQ            reduce using rule 133 (Expression -> UnaryExpr .)
    COLON           reduce using rule 133 (Expression -> UnaryExpr .)


state 110

    (164) UnaryOp -> TIMES .
    (23) PointerType -> TIMES . BaseType
    (24) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    NOT             reduce using rule 164 (UnaryOp -> TIMES .)
    PLUS            reduce using rule 164 (UnaryOp -> TIMES .)
    MINUS           reduce using rule 164 (UnaryOp -> TIMES .)
    AMPERS          reduce using rule 164 (UnaryOp -> TIMES .)
    INTEGER         reduce using rule 164 (UnaryOp -> TIMES .)
    FLOAT           reduce using rule 164 (UnaryOp -> TIMES .)
    IMAGINARY       reduce using rule 164 (UnaryOp -> TIMES .)
    RUNE            reduce using rule 164 (UnaryOp -> TIMES .)
    STRING          reduce using rule 164 (UnaryOp -> TIMES .)
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

  ! TIMES           [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! LPAREN          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! IDENTIFIER      [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! LBRACK          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! STRUCT          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! FUNC            [ reduce using rule 164 (UnaryOp -> TIMES .) ]

    StructType                     shift and go to state 58
    BaseType                       shift and go to state 90
    Type                           shift and go to state 89
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 111

    (13) ArrayType -> LBRACK ArrayLength . RBRACK ElementType

    RBRACK          shift and go to state 162


state 112

    (86) Operand -> LPAREN . Expression RPAREN
    (4) Type -> LPAREN . Type RPAREN
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING

    LPAREN          shift and go to state 165
    NOT             shift and go to state 116
    IDENTIFIER      shift and go to state 164
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    TypeLit                        shift and go to state 55
    OperandName                    shift and go to state 102
    PointerType                    shift and go to state 66
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 166
    Type                           shift and go to state 163
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 113

    (14) ArrayLength -> Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    RBRACK          reduce using rule 14 (ArrayLength -> Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 114

    (89) BasicLit -> FLOAT .

    DOT             reduce using rule 89 (BasicLit -> FLOAT .)
    LBRACK          reduce using rule 89 (BasicLit -> FLOAT .)
    LPAREN          reduce using rule 89 (BasicLit -> FLOAT .)
    LBRACE          reduce using rule 89 (BasicLit -> FLOAT .)
    OROR            reduce using rule 89 (BasicLit -> FLOAT .)
    AMPAMP          reduce using rule 89 (BasicLit -> FLOAT .)
    EQEQ            reduce using rule 89 (BasicLit -> FLOAT .)
    NOTEQ           reduce using rule 89 (BasicLit -> FLOAT .)
    LESS            reduce using rule 89 (BasicLit -> FLOAT .)
    GREAT           reduce using rule 89 (BasicLit -> FLOAT .)
    LEQ             reduce using rule 89 (BasicLit -> FLOAT .)
    GEQ             reduce using rule 89 (BasicLit -> FLOAT .)
    PLUS            reduce using rule 89 (BasicLit -> FLOAT .)
    MINUS           reduce using rule 89 (BasicLit -> FLOAT .)
    OR              reduce using rule 89 (BasicLit -> FLOAT .)
    CARET           reduce using rule 89 (BasicLit -> FLOAT .)
    TIMES           reduce using rule 89 (BasicLit -> FLOAT .)
    DIVIDE          reduce using rule 89 (BasicLit -> FLOAT .)
    MOD             reduce using rule 89 (BasicLit -> FLOAT .)
    AMPERS          reduce using rule 89 (BasicLit -> FLOAT .)
    LL              reduce using rule 89 (BasicLit -> FLOAT .)
    GG              reduce using rule 89 (BasicLit -> FLOAT .)
    AMPCAR          reduce using rule 89 (BasicLit -> FLOAT .)
    PLUSPLUS        reduce using rule 89 (BasicLit -> FLOAT .)
    MINUSMIN        reduce using rule 89 (BasicLit -> FLOAT .)
    COMMA           reduce using rule 89 (BasicLit -> FLOAT .)
    SEMICOL         reduce using rule 89 (BasicLit -> FLOAT .)
    PLUSEQ          reduce using rule 89 (BasicLit -> FLOAT .)
    MINUSEQ         reduce using rule 89 (BasicLit -> FLOAT .)
    TIMESEQ         reduce using rule 89 (BasicLit -> FLOAT .)
    DIVIDEEQ        reduce using rule 89 (BasicLit -> FLOAT .)
    MODEQ           reduce using rule 89 (BasicLit -> FLOAT .)
    AMPEQ           reduce using rule 89 (BasicLit -> FLOAT .)
    OREQ            reduce using rule 89 (BasicLit -> FLOAT .)
    CAREQ           reduce using rule 89 (BasicLit -> FLOAT .)
    LLEQ            reduce using rule 89 (BasicLit -> FLOAT .)
    GGEQ            reduce using rule 89 (BasicLit -> FLOAT .)
    EQUAL           reduce using rule 89 (BasicLit -> FLOAT .)
    RPAREN          reduce using rule 89 (BasicLit -> FLOAT .)
    COLON           reduce using rule 89 (BasicLit -> FLOAT .)
    RBRACK          reduce using rule 89 (BasicLit -> FLOAT .)


state 115

    (165) UnaryOp -> AMPERS .

    NOT             reduce using rule 165 (UnaryOp -> AMPERS .)
    PLUS            reduce using rule 165 (UnaryOp -> AMPERS .)
    MINUS           reduce using rule 165 (UnaryOp -> AMPERS .)
    TIMES           reduce using rule 165 (UnaryOp -> AMPERS .)
    AMPERS          reduce using rule 165 (UnaryOp -> AMPERS .)
    LPAREN          reduce using rule 165 (UnaryOp -> AMPERS .)
    IDENTIFIER      reduce using rule 165 (UnaryOp -> AMPERS .)
    INTEGER         reduce using rule 165 (UnaryOp -> AMPERS .)
    FLOAT           reduce using rule 165 (UnaryOp -> AMPERS .)
    IMAGINARY       reduce using rule 165 (UnaryOp -> AMPERS .)
    RUNE            reduce using rule 165 (UnaryOp -> AMPERS .)
    STRING          reduce using rule 165 (UnaryOp -> AMPERS .)
    LBRACK          reduce using rule 165 (UnaryOp -> AMPERS .)
    STRUCT          reduce using rule 165 (UnaryOp -> AMPERS .)
    FUNC            reduce using rule 165 (UnaryOp -> AMPERS .)


state 116

    (139) UnaryExpr -> NOT . UnaryExpr
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 190
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 117

    (58) IdentifierRep -> IdentifierRep COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 191


state 118

    (29) Result -> Parameters .

    EQUAL           reduce using rule 29 (Result -> Parameters .)
    SEMICOL         reduce using rule 29 (Result -> Parameters .)
    RPAREN          reduce using rule 29 (Result -> Parameters .)
    LBRACE          reduce using rule 29 (Result -> Parameters .)
    COMMA           reduce using rule 29 (Result -> Parameters .)
    LPAREN          reduce using rule 29 (Result -> Parameters .)
    STRING          reduce using rule 29 (Result -> Parameters .)
    COLON           reduce using rule 29 (Result -> Parameters .)


state 119

    (30) Result -> Type .

    EQUAL           reduce using rule 30 (Result -> Type .)
    SEMICOL         reduce using rule 30 (Result -> Type .)
    RPAREN          reduce using rule 30 (Result -> Type .)
    LBRACE          reduce using rule 30 (Result -> Type .)
    COMMA           reduce using rule 30 (Result -> Type .)
    LPAREN          reduce using rule 30 (Result -> Type .)
    STRING          reduce using rule 30 (Result -> Type .)
    COLON           reduce using rule 30 (Result -> Type .)


state 120

    (26) Signature -> Parameters ResultOpt .

    LBRACE          reduce using rule 26 (Signature -> Parameters ResultOpt .)
    SEMICOL         reduce using rule 26 (Signature -> Parameters ResultOpt .)
    EQUAL           reduce using rule 26 (Signature -> Parameters ResultOpt .)
    RPAREN          reduce using rule 26 (Signature -> Parameters ResultOpt .)
    COMMA           reduce using rule 26 (Signature -> Parameters ResultOpt .)
    LPAREN          reduce using rule 26 (Signature -> Parameters ResultOpt .)
    STRING          reduce using rule 26 (Signature -> Parameters ResultOpt .)
    COLON           reduce using rule 26 (Signature -> Parameters ResultOpt .)


state 121

    (28) ResultOpt -> epsilon .

    EQUAL           reduce using rule 28 (ResultOpt -> epsilon .)
    SEMICOL         reduce using rule 28 (ResultOpt -> epsilon .)
    RPAREN          reduce using rule 28 (ResultOpt -> epsilon .)
    LBRACE          reduce using rule 28 (ResultOpt -> epsilon .)
    COMMA           reduce using rule 28 (ResultOpt -> epsilon .)
    LPAREN          reduce using rule 28 (ResultOpt -> epsilon .)
    STRING          reduce using rule 28 (ResultOpt -> epsilon .)
    COLON           reduce using rule 28 (ResultOpt -> epsilon .)


state 122

    (31) Parameters -> LPAREN . ParameterListOpt RPAREN
    (4) Type -> LPAREN . Type RPAREN
    (32) ParameterListOpt -> . ParametersList
    (33) ParameterListOpt -> . epsilon
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (34) ParametersList -> . Type
    (35) ParametersList -> . IdentifierList Type
    (36) ParametersList -> . ParameterDeclCommaRep
    (83) epsilon -> .
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (57) IdentifierList -> . IDENTIFIER IdentifierRep
    (37) ParameterDeclCommaRep -> . ParameterDeclCommaRep COMMA ParameterDecl
    (38) ParameterDeclCommaRep -> . ParameterDecl COMMA ParameterDecl
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature
    (39) ParameterDecl -> . IdentifierList Type
    (40) ParameterDecl -> . Type

    LPAREN          shift and go to state 61
    RPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      shift and go to state 193
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    TypeLit                        shift and go to state 55
    IdentifierList                 shift and go to state 128
    ParameterListOpt               shift and go to state 127
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    epsilon                        shift and go to state 134
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    ParametersList                 shift and go to state 131
    Type                           shift and go to state 192
    ParameterDeclCommaRep          shift and go to state 129
    QualifiedIdent                 shift and go to state 68
    ParameterDecl                  shift and go to state 133

state 123

    (27) ResultOpt -> Result .

    EQUAL           reduce using rule 27 (ResultOpt -> Result .)
    SEMICOL         reduce using rule 27 (ResultOpt -> Result .)
    RPAREN          reduce using rule 27 (ResultOpt -> Result .)
    LBRACE          reduce using rule 27 (ResultOpt -> Result .)
    COMMA           reduce using rule 27 (ResultOpt -> Result .)
    LPAREN          reduce using rule 27 (ResultOpt -> Result .)
    STRING          reduce using rule 27 (ResultOpt -> Result .)
    COLON           reduce using rule 27 (ResultOpt -> Result .)


state 124

    (80) Function -> Signature FunctionBody .

    SEMICOL         reduce using rule 80 (Function -> Signature FunctionBody .)


state 125

    (41) Block -> LBRACE . StatementList RBRACE
    (42) StatementList -> . StatementRep
    (43) StatementRep -> . StatementRep Statement SEMICOL
    (44) StatementRep -> . epsilon
    (83) epsilon -> .

    RETURN          reduce using rule 83 (epsilon -> .)
    BREAK           reduce using rule 83 (epsilon -> .)
    CONTINUE        reduce using rule 83 (epsilon -> .)
    GOTO            reduce using rule 83 (epsilon -> .)
    LBRACE          reduce using rule 83 (epsilon -> .)
    IF              reduce using rule 83 (epsilon -> .)
    FOR             reduce using rule 83 (epsilon -> .)
    CONST           reduce using rule 83 (epsilon -> .)
    TYPE            reduce using rule 83 (epsilon -> .)
    VAR             reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    SWITCH          reduce using rule 83 (epsilon -> .)
    NOT             reduce using rule 83 (epsilon -> .)
    PLUS            reduce using rule 83 (epsilon -> .)
    MINUS           reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    AMPERS          reduce using rule 83 (epsilon -> .)
    LPAREN          reduce using rule 83 (epsilon -> .)
    INTEGER         reduce using rule 83 (epsilon -> .)
    FLOAT           reduce using rule 83 (epsilon -> .)
    IMAGINARY       reduce using rule 83 (epsilon -> .)
    RUNE            reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RBRACE          reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 195
    StatementRep                   shift and go to state 194
    StatementList                  shift and go to state 196

state 126

    (81) FunctionBody -> Block .

    SEMICOL         reduce using rule 81 (FunctionBody -> Block .)


state 127

    (31) Parameters -> LPAREN ParameterListOpt . RPAREN

    RPAREN          shift and go to state 197


state 128

    (35) ParametersList -> IdentifierList . Type
    (39) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 198
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 129

    (36) ParametersList -> ParameterDeclCommaRep .
    (37) ParameterDeclCommaRep -> ParameterDeclCommaRep . COMMA ParameterDecl

    RPAREN          reduce using rule 36 (ParametersList -> ParameterDeclCommaRep .)
    COMMA           shift and go to state 199


state 130

    (34) ParametersList -> Type .
    (40) ParameterDecl -> Type .

    RPAREN          reduce using rule 34 (ParametersList -> Type .)
    COMMA           reduce using rule 40 (ParameterDecl -> Type .)


state 131

    (32) ParameterListOpt -> ParametersList .

    RPAREN          reduce using rule 32 (ParameterListOpt -> ParametersList .)


state 132

    (57) IdentifierList -> IDENTIFIER . IdentifierRep
    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (58) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (59) IdentifierRep -> . epsilon
    (83) epsilon -> .

  ! reduce/reduce conflict for COMMA resolved using rule 5 (TypeName -> IDENTIFIER .)
    COMMA           reduce using rule 5 (TypeName -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88
    LPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)

  ! COMMA           [ reduce using rule 83 (epsilon -> .) ]

    epsilon                        shift and go to state 69
    IdentifierRep                  shift and go to state 70

state 133

    (38) ParameterDeclCommaRep -> ParameterDecl . COMMA ParameterDecl

    COMMA           shift and go to state 200


state 134

    (33) ParameterListOpt -> epsilon .

    RPAREN          reduce using rule 33 (ParameterListOpt -> epsilon .)


state 135

    (69) VarDecl -> VAR LPAREN VarSpecRep RPAREN .

    SEMICOL         reduce using rule 69 (VarDecl -> VAR LPAREN VarSpecRep RPAREN .)


state 136

    (70) VarSpecRep -> VarSpecRep VarSpec . SEMICOL

    SEMICOL         shift and go to state 201


state 137

    (73) VarSpec -> IdentifierList EQUAL ExpressionList .

    SEMICOL         reduce using rule 73 (VarSpec -> IdentifierList EQUAL ExpressionList .)


state 138

    (130) ExpressionList -> Expression . ExpressionRep
    (134) Expression -> Expression . BinaryOp Expression
    (131) ExpressionRep -> . ExpressionRep COMMA Expression
    (132) ExpressionRep -> . epsilon
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (83) epsilon -> .
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    COMMA           reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RPAREN          reduce using rule 83 (epsilon -> .)
    LBRACE          reduce using rule 83 (epsilon -> .)
    COLON           reduce using rule 83 (epsilon -> .)
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    ExpressionRep                  shift and go to state 202
    RelOp                          shift and go to state 185
    epsilon                        shift and go to state 203
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 139

    (74) ExpressionListOpt -> EQUAL . ExpressionList
    (130) ExpressionList -> . Expression ExpressionRep
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 204
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 140

    (75) ExpressionListOpt -> epsilon .

    SEMICOL         reduce using rule 75 (ExpressionListOpt -> epsilon .)


state 141

    (72) VarSpec -> IdentifierList Type ExpressionListOpt .

    SEMICOL         reduce using rule 72 (VarSpec -> IdentifierList Type ExpressionListOpt .)


state 142

    (61) TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN .

    SEMICOL         reduce using rule 61 (TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN .)


state 143

    (62) TypeSpecRep -> TypeSpecRep TypeSpec . SEMICOL

    SEMICOL         shift and go to state 205


state 144

    (66) AliasDecl -> IDENTIFIER EQUAL Type .

    SEMICOL         reduce using rule 66 (AliasDecl -> IDENTIFIER EQUAL Type .)


state 145

    (256) ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL .

    RPAREN          reduce using rule 256 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL .)
    DOT             reduce using rule 256 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL .)
    IDENTIFIER      reduce using rule 256 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL .)
    STRING          reduce using rule 256 (ImportSpecRep -> ImportSpecRep ImportSpec SEMICOL .)


state 146

    (52) ConstSpecRep -> ConstSpecRep ConstSpec SEMICOL .

    RPAREN          reduce using rule 52 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOL .)
    IDENTIFIER      reduce using rule 52 (ConstSpecRep -> ConstSpecRep ConstSpec SEMICOL .)


state 147

    (82) QualifiedIdent -> IDENTIFIER DOT TypeName .

    RPAREN          reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LPAREN          reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    SEMICOL         reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COMMA           reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    STRING          reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    COLON           reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    EQUAL           reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)
    LBRACE          reduce using rule 82 (QualifiedIdent -> IDENTIFIER DOT TypeName .)


state 148

    (4) Type -> LPAREN Type RPAREN .

    EQUAL           reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    SEMICOL         reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    RPAREN          reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    LBRACE          reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    COMMA           reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    LPAREN          reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    STRING          reduce using rule 4 (Type -> LPAREN Type RPAREN .)
    COLON           reduce using rule 4 (Type -> LPAREN Type RPAREN .)


state 149

    (55) TypeExprListOpt -> TypeOpt EQUAL ExpressionList .

    SEMICOL         reduce using rule 55 (TypeExprListOpt -> TypeOpt EQUAL ExpressionList .)


state 150

    (16) StructType -> STRUCT LBRACE FieldDeclRep . RBRACE
    (17) FieldDeclRep -> FieldDeclRep . FieldDecl SEMICOL
    (19) FieldDecl -> . IdentifierList Type TagOpt
    (57) IdentifierList -> . IDENTIFIER IdentifierRep

    RBRACE          shift and go to state 208
    IDENTIFIER      shift and go to state 34

    FieldDecl                      shift and go to state 206
    IdentifierList                 shift and go to state 207

state 151

    (18) FieldDeclRep -> epsilon .

    RBRACE          reduce using rule 18 (FieldDeclRep -> epsilon .)
    IDENTIFIER      reduce using rule 18 (FieldDeclRep -> epsilon .)


state 152

    (138) UnaryExpr -> UnaryOp UnaryExpr .

    PLUSPLUS        reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUSMIN        reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    OROR            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    AMPAMP          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQEQ            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    NOTEQ           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    LESS            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    GREAT           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    LEQ             reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    GEQ             reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUS            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUS           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    OR              reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    CARET           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    TIMES           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIVIDE          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    MOD             reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    AMPERS          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    LL              reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    GG              reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    AMPCAR          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    COMMA           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    SEMICOL         reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    PLUSEQ          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    MINUSEQ         reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    TIMESEQ         reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    DIVIDEEQ        reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    MODEQ           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    AMPEQ           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    OREQ            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    CAREQ           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    LLEQ            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    GGEQ            reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    EQUAL           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    COLON           reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    LBRACE          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    RPAREN          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)
    RBRACK          reduce using rule 138 (UnaryExpr -> UnaryOp UnaryExpr .)


state 153

    (116) PrimaryExpr -> PrimaryExpr Index .

    DOT             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LBRACK          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LPAREN          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    PLUSPLUS        reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    MINUSMIN        reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    OROR            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    AMPAMP          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    EQEQ            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    NOTEQ           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LESS            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    GREAT           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LEQ             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    GEQ             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    OR              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    CARET           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    TIMES           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDE          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    MOD             reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    AMPERS          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LL              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    GG              reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    AMPCAR          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    COMMA           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    SEMICOL         reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    PLUSEQ          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    MINUSEQ         reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    TIMESEQ         reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDEEQ        reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    MODEQ           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    AMPEQ           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    OREQ            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    CAREQ           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LLEQ            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    GGEQ            reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    EQUAL           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    RPAREN          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    LBRACE          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    RBRACK          reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)
    COLON           reduce using rule 116 (PrimaryExpr -> PrimaryExpr Index .)


state 154

    (117) PrimaryExpr -> PrimaryExpr Slice .

    DOT             reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LBRACK          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LPAREN          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUSPLUS        reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUSMIN        reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    OROR            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    AMPAMP          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    EQEQ            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    NOTEQ           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LESS            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    GREAT           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LEQ             reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    GEQ             reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUS            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUS           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    OR              reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    CARET           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    TIMES           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    DIVIDE          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    MOD             reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    AMPERS          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LL              reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    GG              reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    AMPCAR          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    COMMA           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    SEMICOL         reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    PLUSEQ          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    MINUSEQ         reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    TIMESEQ         reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    DIVIDEEQ        reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    MODEQ           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    AMPEQ           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    OREQ            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    CAREQ           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LLEQ            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    GGEQ            reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    EQUAL           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    RPAREN          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    LBRACE          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    RBRACK          reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)
    COLON           reduce using rule 117 (PrimaryExpr -> PrimaryExpr Slice .)


state 155

    (121) Index -> LBRACK . Expression RBRACK
    (122) Slice -> LBRACK . ExpressionOpt COLON ExpressionOpt RBRACK
    (123) Slice -> LBRACK . ExpressionOpt COLON Expression COLON Expression RBRACK
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (135) ExpressionOpt -> . Expression
    (136) ExpressionOpt -> . epsilon
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (83) epsilon -> .
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    COLON           reduce using rule 83 (epsilon -> .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    ExpressionOpt                  shift and go to state 209
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 210
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 211
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 156

    (115) PrimaryExpr -> PrimaryExpr Selector .

    DOT             reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LBRACK          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LPAREN          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUSPLUS        reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUSMIN        reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    OROR            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    AMPAMP          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    EQEQ            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    NOTEQ           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LESS            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    GREAT           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    GEQ             reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    CARET           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    TIMES           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    MOD             reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    AMPERS          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LL              reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    GG              reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    AMPCAR          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOL         reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUSEQ          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUSEQ         reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    TIMESEQ         reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDEEQ        reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    MODEQ           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    AMPEQ           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    OREQ            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    CAREQ           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LLEQ            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    GGEQ            reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    EQUAL           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    RPAREN          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    LBRACE          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    RBRACK          reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)
    COLON           reduce using rule 115 (PrimaryExpr -> PrimaryExpr Selector .)


state 157

    (118) PrimaryExpr -> PrimaryExpr TypeAssertion .

    DOT             reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LBRACK          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LPAREN          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUSPLUS        reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUSMIN        reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OROR            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AMPAMP          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    EQEQ            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    NOTEQ           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LESS            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GREAT           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LEQ             reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GEQ             reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUS            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUS           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OR              reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    CARET           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    TIMES           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIVIDE          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MOD             reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AMPERS          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LL              reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GG              reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AMPCAR          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COMMA           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    SEMICOL         reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    PLUSEQ          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MINUSEQ         reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    TIMESEQ         reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    DIVIDEEQ        reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    MODEQ           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    AMPEQ           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    OREQ            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    CAREQ           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LLEQ            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    GGEQ            reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    EQUAL           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RPAREN          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    LBRACE          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    RBRACK          reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)
    COLON           reduce using rule 118 (PrimaryExpr -> PrimaryExpr TypeAssertion .)


state 158

    (119) PrimaryExpr -> PrimaryExpr Arguments .

    DOT             reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LBRACK          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LPAREN          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUSPLUS        reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUSMIN        reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    OROR            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMPAMP          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQEQ            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    NOTEQ           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LESS            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    GREAT           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LEQ             reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    GEQ             reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR              reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    CARET           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    TIMES           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    MOD             reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMPERS          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LL              reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    GG              reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMPCAR          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    COMMA           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    SEMICOL         reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUSEQ          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUSEQ         reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    TIMESEQ         reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDEEQ        reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    MODEQ           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMPEQ           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    OREQ            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    CAREQ           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LLEQ            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    GGEQ            reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQUAL           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    RPAREN          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    LBRACE          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    RBRACK          reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)
    COLON           reduce using rule 119 (PrimaryExpr -> PrimaryExpr Arguments .)


state 159

    (125) Arguments -> LPAREN . ExpressionListTypeOpt RPAREN
    (126) ExpressionListTypeOpt -> . ExpressionList
    (127) ExpressionListTypeOpt -> . epsilon
    (130) ExpressionList -> . Expression ExpressionRep
    (83) epsilon -> .
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    RPAREN          reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Operand                        shift and go to state 98
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 212
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 213
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    PrimaryExpr                    shift and go to state 96
    FunctionType                   shift and go to state 67
    ExpressionListTypeOpt          shift and go to state 214
    QualifiedIdent                 shift and go to state 68

state 160

    (120) Selector -> DOT . IDENTIFIER
    (124) TypeAssertion -> DOT . LPAREN Type RPAREN

    IDENTIFIER      shift and go to state 215
    LPAREN          shift and go to state 216


state 161

    (112) Conversion -> Type LPAREN . Expression RPAREN
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 217
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 162

    (13) ArrayType -> LBRACK ArrayLength RBRACK . ElementType
    (15) ElementType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    TypeLit                        shift and go to state 55
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    ElementType                    shift and go to state 219
    Type                           shift and go to state 218
    QualifiedIdent                 shift and go to state 68

state 163

    (4) Type -> LPAREN Type . RPAREN
    (112) Conversion -> Type . LPAREN Expression RPAREN

    RPAREN          shift and go to state 148
    LPAREN          shift and go to state 161


state 164

    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (93) OperandName -> IDENTIFIER .

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 5 (TypeName -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (TypeName -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88
    LBRACK          reduce using rule 93 (OperandName -> IDENTIFIER .)
    OROR            reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPAMP          reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    NOTEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LESS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GREAT           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 93 (OperandName -> IDENTIFIER .)
    CARET           reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMES           reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPERS          reduce using rule 93 (OperandName -> IDENTIFIER .)
    LL              reduce using rule 93 (OperandName -> IDENTIFIER .)
    GG              reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPCAR          reduce using rule 93 (OperandName -> IDENTIFIER .)

  ! DOT             [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]


state 165

    (4) Type -> LPAREN . Type RPAREN
    (86) Operand -> LPAREN . Expression RPAREN
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING

    LPAREN          shift and go to state 165
    IDENTIFIER      shift and go to state 164
    NOT             shift and go to state 116
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 220
    FUNC            shift and go to state 52
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    AMPERS          shift and go to state 115
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 163
    OperandName                    shift and go to state 102
    TypeLit                        shift and go to state 55
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 96
    Expression                     shift and go to state 166
    PointerType                    shift and go to state 66
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 166

    (86) Operand -> LPAREN Expression . RPAREN
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    RPAREN          shift and go to state 221
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 167

    (140) BinaryOp -> OROR .

    NOT             reduce using rule 140 (BinaryOp -> OROR .)
    PLUS            reduce using rule 140 (BinaryOp -> OROR .)
    MINUS           reduce using rule 140 (BinaryOp -> OROR .)
    TIMES           reduce using rule 140 (BinaryOp -> OROR .)
    AMPERS          reduce using rule 140 (BinaryOp -> OROR .)
    LPAREN          reduce using rule 140 (BinaryOp -> OROR .)
    IDENTIFIER      reduce using rule 140 (BinaryOp -> OROR .)
    INTEGER         reduce using rule 140 (BinaryOp -> OROR .)
    FLOAT           reduce using rule 140 (BinaryOp -> OROR .)
    IMAGINARY       reduce using rule 140 (BinaryOp -> OROR .)
    RUNE            reduce using rule 140 (BinaryOp -> OROR .)
    STRING          reduce using rule 140 (BinaryOp -> OROR .)
    LBRACK          reduce using rule 140 (BinaryOp -> OROR .)
    STRUCT          reduce using rule 140 (BinaryOp -> OROR .)
    FUNC            reduce using rule 140 (BinaryOp -> OROR .)


state 168

    (154) AddOp -> CARET .

    NOT             reduce using rule 154 (AddOp -> CARET .)
    PLUS            reduce using rule 154 (AddOp -> CARET .)
    MINUS           reduce using rule 154 (AddOp -> CARET .)
    TIMES           reduce using rule 154 (AddOp -> CARET .)
    AMPERS          reduce using rule 154 (AddOp -> CARET .)
    LPAREN          reduce using rule 154 (AddOp -> CARET .)
    IDENTIFIER      reduce using rule 154 (AddOp -> CARET .)
    INTEGER         reduce using rule 154 (AddOp -> CARET .)
    FLOAT           reduce using rule 154 (AddOp -> CARET .)
    IMAGINARY       reduce using rule 154 (AddOp -> CARET .)
    RUNE            reduce using rule 154 (AddOp -> CARET .)
    STRING          reduce using rule 154 (AddOp -> CARET .)
    LBRACK          reduce using rule 154 (AddOp -> CARET .)
    STRUCT          reduce using rule 154 (AddOp -> CARET .)
    FUNC            reduce using rule 154 (AddOp -> CARET .)


state 169

    (148) RelOp -> GREAT .

    NOT             reduce using rule 148 (RelOp -> GREAT .)
    PLUS            reduce using rule 148 (RelOp -> GREAT .)
    MINUS           reduce using rule 148 (RelOp -> GREAT .)
    TIMES           reduce using rule 148 (RelOp -> GREAT .)
    AMPERS          reduce using rule 148 (RelOp -> GREAT .)
    LPAREN          reduce using rule 148 (RelOp -> GREAT .)
    IDENTIFIER      reduce using rule 148 (RelOp -> GREAT .)
    INTEGER         reduce using rule 148 (RelOp -> GREAT .)
    FLOAT           reduce using rule 148 (RelOp -> GREAT .)
    IMAGINARY       reduce using rule 148 (RelOp -> GREAT .)
    RUNE            reduce using rule 148 (RelOp -> GREAT .)
    STRING          reduce using rule 148 (RelOp -> GREAT .)
    LBRACK          reduce using rule 148 (RelOp -> GREAT .)
    STRUCT          reduce using rule 148 (RelOp -> GREAT .)
    FUNC            reduce using rule 148 (RelOp -> GREAT .)


state 170

    (161) MulOp -> AMPCAR .

    NOT             reduce using rule 161 (MulOp -> AMPCAR .)
    PLUS            reduce using rule 161 (MulOp -> AMPCAR .)
    MINUS           reduce using rule 161 (MulOp -> AMPCAR .)
    TIMES           reduce using rule 161 (MulOp -> AMPCAR .)
    AMPERS          reduce using rule 161 (MulOp -> AMPCAR .)
    LPAREN          reduce using rule 161 (MulOp -> AMPCAR .)
    IDENTIFIER      reduce using rule 161 (MulOp -> AMPCAR .)
    INTEGER         reduce using rule 161 (MulOp -> AMPCAR .)
    FLOAT           reduce using rule 161 (MulOp -> AMPCAR .)
    IMAGINARY       reduce using rule 161 (MulOp -> AMPCAR .)
    RUNE            reduce using rule 161 (MulOp -> AMPCAR .)
    STRING          reduce using rule 161 (MulOp -> AMPCAR .)
    LBRACK          reduce using rule 161 (MulOp -> AMPCAR .)
    STRUCT          reduce using rule 161 (MulOp -> AMPCAR .)
    FUNC            reduce using rule 161 (MulOp -> AMPCAR .)


state 171

    (147) RelOp -> LESS .

    NOT             reduce using rule 147 (RelOp -> LESS .)
    PLUS            reduce using rule 147 (RelOp -> LESS .)
    MINUS           reduce using rule 147 (RelOp -> LESS .)
    TIMES           reduce using rule 147 (RelOp -> LESS .)
    AMPERS          reduce using rule 147 (RelOp -> LESS .)
    LPAREN          reduce using rule 147 (RelOp -> LESS .)
    IDENTIFIER      reduce using rule 147 (RelOp -> LESS .)
    INTEGER         reduce using rule 147 (RelOp -> LESS .)
    FLOAT           reduce using rule 147 (RelOp -> LESS .)
    IMAGINARY       reduce using rule 147 (RelOp -> LESS .)
    RUNE            reduce using rule 147 (RelOp -> LESS .)
    STRING          reduce using rule 147 (RelOp -> LESS .)
    LBRACK          reduce using rule 147 (RelOp -> LESS .)
    STRUCT          reduce using rule 147 (RelOp -> LESS .)
    FUNC            reduce using rule 147 (RelOp -> LESS .)


state 172

    (145) RelOp -> EQEQ .

    NOT             reduce using rule 145 (RelOp -> EQEQ .)
    PLUS            reduce using rule 145 (RelOp -> EQEQ .)
    MINUS           reduce using rule 145 (RelOp -> EQEQ .)
    TIMES           reduce using rule 145 (RelOp -> EQEQ .)
    AMPERS          reduce using rule 145 (RelOp -> EQEQ .)
    LPAREN          reduce using rule 145 (RelOp -> EQEQ .)
    IDENTIFIER      reduce using rule 145 (RelOp -> EQEQ .)
    INTEGER         reduce using rule 145 (RelOp -> EQEQ .)
    FLOAT           reduce using rule 145 (RelOp -> EQEQ .)
    IMAGINARY       reduce using rule 145 (RelOp -> EQEQ .)
    RUNE            reduce using rule 145 (RelOp -> EQEQ .)
    STRING          reduce using rule 145 (RelOp -> EQEQ .)
    LBRACK          reduce using rule 145 (RelOp -> EQEQ .)
    STRUCT          reduce using rule 145 (RelOp -> EQEQ .)
    FUNC            reduce using rule 145 (RelOp -> EQEQ .)


state 173

    (141) BinaryOp -> AMPAMP .

    NOT             reduce using rule 141 (BinaryOp -> AMPAMP .)
    PLUS            reduce using rule 141 (BinaryOp -> AMPAMP .)
    MINUS           reduce using rule 141 (BinaryOp -> AMPAMP .)
    TIMES           reduce using rule 141 (BinaryOp -> AMPAMP .)
    AMPERS          reduce using rule 141 (BinaryOp -> AMPAMP .)
    LPAREN          reduce using rule 141 (BinaryOp -> AMPAMP .)
    IDENTIFIER      reduce using rule 141 (BinaryOp -> AMPAMP .)
    INTEGER         reduce using rule 141 (BinaryOp -> AMPAMP .)
    FLOAT           reduce using rule 141 (BinaryOp -> AMPAMP .)
    IMAGINARY       reduce using rule 141 (BinaryOp -> AMPAMP .)
    RUNE            reduce using rule 141 (BinaryOp -> AMPAMP .)
    STRING          reduce using rule 141 (BinaryOp -> AMPAMP .)
    LBRACK          reduce using rule 141 (BinaryOp -> AMPAMP .)
    STRUCT          reduce using rule 141 (BinaryOp -> AMPAMP .)
    FUNC            reduce using rule 141 (BinaryOp -> AMPAMP .)


state 174

    (144) BinaryOp -> MulOp .

    NOT             reduce using rule 144 (BinaryOp -> MulOp .)
    PLUS            reduce using rule 144 (BinaryOp -> MulOp .)
    MINUS           reduce using rule 144 (BinaryOp -> MulOp .)
    TIMES           reduce using rule 144 (BinaryOp -> MulOp .)
    AMPERS          reduce using rule 144 (BinaryOp -> MulOp .)
    LPAREN          reduce using rule 144 (BinaryOp -> MulOp .)
    IDENTIFIER      reduce using rule 144 (BinaryOp -> MulOp .)
    INTEGER         reduce using rule 144 (BinaryOp -> MulOp .)
    FLOAT           reduce using rule 144 (BinaryOp -> MulOp .)
    IMAGINARY       reduce using rule 144 (BinaryOp -> MulOp .)
    RUNE            reduce using rule 144 (BinaryOp -> MulOp .)
    STRING          reduce using rule 144 (BinaryOp -> MulOp .)
    LBRACK          reduce using rule 144 (BinaryOp -> MulOp .)
    STRUCT          reduce using rule 144 (BinaryOp -> MulOp .)
    FUNC            reduce using rule 144 (BinaryOp -> MulOp .)


state 175

    (152) AddOp -> MINUS .

    NOT             reduce using rule 152 (AddOp -> MINUS .)
    PLUS            reduce using rule 152 (AddOp -> MINUS .)
    MINUS           reduce using rule 152 (AddOp -> MINUS .)
    TIMES           reduce using rule 152 (AddOp -> MINUS .)
    AMPERS          reduce using rule 152 (AddOp -> MINUS .)
    LPAREN          reduce using rule 152 (AddOp -> MINUS .)
    IDENTIFIER      reduce using rule 152 (AddOp -> MINUS .)
    INTEGER         reduce using rule 152 (AddOp -> MINUS .)
    FLOAT           reduce using rule 152 (AddOp -> MINUS .)
    IMAGINARY       reduce using rule 152 (AddOp -> MINUS .)
    RUNE            reduce using rule 152 (AddOp -> MINUS .)
    STRING          reduce using rule 152 (AddOp -> MINUS .)
    LBRACK          reduce using rule 152 (AddOp -> MINUS .)
    STRUCT          reduce using rule 152 (AddOp -> MINUS .)
    FUNC            reduce using rule 152 (AddOp -> MINUS .)


state 176

    (150) RelOp -> GEQ .

    NOT             reduce using rule 150 (RelOp -> GEQ .)
    PLUS            reduce using rule 150 (RelOp -> GEQ .)
    MINUS           reduce using rule 150 (RelOp -> GEQ .)
    TIMES           reduce using rule 150 (RelOp -> GEQ .)
    AMPERS          reduce using rule 150 (RelOp -> GEQ .)
    LPAREN          reduce using rule 150 (RelOp -> GEQ .)
    IDENTIFIER      reduce using rule 150 (RelOp -> GEQ .)
    INTEGER         reduce using rule 150 (RelOp -> GEQ .)
    FLOAT           reduce using rule 150 (RelOp -> GEQ .)
    IMAGINARY       reduce using rule 150 (RelOp -> GEQ .)
    RUNE            reduce using rule 150 (RelOp -> GEQ .)
    STRING          reduce using rule 150 (RelOp -> GEQ .)
    LBRACK          reduce using rule 150 (RelOp -> GEQ .)
    STRUCT          reduce using rule 150 (RelOp -> GEQ .)
    FUNC            reduce using rule 150 (RelOp -> GEQ .)


state 177

    (159) MulOp -> LL .

    NOT             reduce using rule 159 (MulOp -> LL .)
    PLUS            reduce using rule 159 (MulOp -> LL .)
    MINUS           reduce using rule 159 (MulOp -> LL .)
    TIMES           reduce using rule 159 (MulOp -> LL .)
    AMPERS          reduce using rule 159 (MulOp -> LL .)
    LPAREN          reduce using rule 159 (MulOp -> LL .)
    IDENTIFIER      reduce using rule 159 (MulOp -> LL .)
    INTEGER         reduce using rule 159 (MulOp -> LL .)
    FLOAT           reduce using rule 159 (MulOp -> LL .)
    IMAGINARY       reduce using rule 159 (MulOp -> LL .)
    RUNE            reduce using rule 159 (MulOp -> LL .)
    STRING          reduce using rule 159 (MulOp -> LL .)
    LBRACK          reduce using rule 159 (MulOp -> LL .)
    STRUCT          reduce using rule 159 (MulOp -> LL .)
    FUNC            reduce using rule 159 (MulOp -> LL .)


state 178

    (146) RelOp -> NOTEQ .

    NOT             reduce using rule 146 (RelOp -> NOTEQ .)
    PLUS            reduce using rule 146 (RelOp -> NOTEQ .)
    MINUS           reduce using rule 146 (RelOp -> NOTEQ .)
    TIMES           reduce using rule 146 (RelOp -> NOTEQ .)
    AMPERS          reduce using rule 146 (RelOp -> NOTEQ .)
    LPAREN          reduce using rule 146 (RelOp -> NOTEQ .)
    IDENTIFIER      reduce using rule 146 (RelOp -> NOTEQ .)
    INTEGER         reduce using rule 146 (RelOp -> NOTEQ .)
    FLOAT           reduce using rule 146 (RelOp -> NOTEQ .)
    IMAGINARY       reduce using rule 146 (RelOp -> NOTEQ .)
    RUNE            reduce using rule 146 (RelOp -> NOTEQ .)
    STRING          reduce using rule 146 (RelOp -> NOTEQ .)
    LBRACK          reduce using rule 146 (RelOp -> NOTEQ .)
    STRUCT          reduce using rule 146 (RelOp -> NOTEQ .)
    FUNC            reduce using rule 146 (RelOp -> NOTEQ .)


state 179

    (151) AddOp -> PLUS .

    NOT             reduce using rule 151 (AddOp -> PLUS .)
    PLUS            reduce using rule 151 (AddOp -> PLUS .)
    MINUS           reduce using rule 151 (AddOp -> PLUS .)
    TIMES           reduce using rule 151 (AddOp -> PLUS .)
    AMPERS          reduce using rule 151 (AddOp -> PLUS .)
    LPAREN          reduce using rule 151 (AddOp -> PLUS .)
    IDENTIFIER      reduce using rule 151 (AddOp -> PLUS .)
    INTEGER         reduce using rule 151 (AddOp -> PLUS .)
    FLOAT           reduce using rule 151 (AddOp -> PLUS .)
    IMAGINARY       reduce using rule 151 (AddOp -> PLUS .)
    RUNE            reduce using rule 151 (AddOp -> PLUS .)
    STRING          reduce using rule 151 (AddOp -> PLUS .)
    LBRACK          reduce using rule 151 (AddOp -> PLUS .)
    STRUCT          reduce using rule 151 (AddOp -> PLUS .)
    FUNC            reduce using rule 151 (AddOp -> PLUS .)


state 180

    (134) Expression -> Expression BinaryOp . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 222
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 181

    (143) BinaryOp -> AddOp .

    NOT             reduce using rule 143 (BinaryOp -> AddOp .)
    PLUS            reduce using rule 143 (BinaryOp -> AddOp .)
    MINUS           reduce using rule 143 (BinaryOp -> AddOp .)
    TIMES           reduce using rule 143 (BinaryOp -> AddOp .)
    AMPERS          reduce using rule 143 (BinaryOp -> AddOp .)
    LPAREN          reduce using rule 143 (BinaryOp -> AddOp .)
    IDENTIFIER      reduce using rule 143 (BinaryOp -> AddOp .)
    INTEGER         reduce using rule 143 (BinaryOp -> AddOp .)
    FLOAT           reduce using rule 143 (BinaryOp -> AddOp .)
    IMAGINARY       reduce using rule 143 (BinaryOp -> AddOp .)
    RUNE            reduce using rule 143 (BinaryOp -> AddOp .)
    STRING          reduce using rule 143 (BinaryOp -> AddOp .)
    LBRACK          reduce using rule 143 (BinaryOp -> AddOp .)
    STRUCT          reduce using rule 143 (BinaryOp -> AddOp .)
    FUNC            reduce using rule 143 (BinaryOp -> AddOp .)


state 182

    (156) MulOp -> DIVIDE .

    NOT             reduce using rule 156 (MulOp -> DIVIDE .)
    PLUS            reduce using rule 156 (MulOp -> DIVIDE .)
    MINUS           reduce using rule 156 (MulOp -> DIVIDE .)
    TIMES           reduce using rule 156 (MulOp -> DIVIDE .)
    AMPERS          reduce using rule 156 (MulOp -> DIVIDE .)
    LPAREN          reduce using rule 156 (MulOp -> DIVIDE .)
    IDENTIFIER      reduce using rule 156 (MulOp -> DIVIDE .)
    INTEGER         reduce using rule 156 (MulOp -> DIVIDE .)
    FLOAT           reduce using rule 156 (MulOp -> DIVIDE .)
    IMAGINARY       reduce using rule 156 (MulOp -> DIVIDE .)
    RUNE            reduce using rule 156 (MulOp -> DIVIDE .)
    STRING          reduce using rule 156 (MulOp -> DIVIDE .)
    LBRACK          reduce using rule 156 (MulOp -> DIVIDE .)
    STRUCT          reduce using rule 156 (MulOp -> DIVIDE .)
    FUNC            reduce using rule 156 (MulOp -> DIVIDE .)


state 183

    (155) MulOp -> TIMES .

    NOT             reduce using rule 155 (MulOp -> TIMES .)
    PLUS            reduce using rule 155 (MulOp -> TIMES .)
    MINUS           reduce using rule 155 (MulOp -> TIMES .)
    TIMES           reduce using rule 155 (MulOp -> TIMES .)
    AMPERS          reduce using rule 155 (MulOp -> TIMES .)
    LPAREN          reduce using rule 155 (MulOp -> TIMES .)
    IDENTIFIER      reduce using rule 155 (MulOp -> TIMES .)
    INTEGER         reduce using rule 155 (MulOp -> TIMES .)
    FLOAT           reduce using rule 155 (MulOp -> TIMES .)
    IMAGINARY       reduce using rule 155 (MulOp -> TIMES .)
    RUNE            reduce using rule 155 (MulOp -> TIMES .)
    STRING          reduce using rule 155 (MulOp -> TIMES .)
    LBRACK          reduce using rule 155 (MulOp -> TIMES .)
    STRUCT          reduce using rule 155 (MulOp -> TIMES .)
    FUNC            reduce using rule 155 (MulOp -> TIMES .)


state 184

    (160) MulOp -> GG .

    NOT             reduce using rule 160 (MulOp -> GG .)
    PLUS            reduce using rule 160 (MulOp -> GG .)
    MINUS           reduce using rule 160 (MulOp -> GG .)
    TIMES           reduce using rule 160 (MulOp -> GG .)
    AMPERS          reduce using rule 160 (MulOp -> GG .)
    LPAREN          reduce using rule 160 (MulOp -> GG .)
    IDENTIFIER      reduce using rule 160 (MulOp -> GG .)
    INTEGER         reduce using rule 160 (MulOp -> GG .)
    FLOAT           reduce using rule 160 (MulOp -> GG .)
    IMAGINARY       reduce using rule 160 (MulOp -> GG .)
    RUNE            reduce using rule 160 (MulOp -> GG .)
    STRING          reduce using rule 160 (MulOp -> GG .)
    LBRACK          reduce using rule 160 (MulOp -> GG .)
    STRUCT          reduce using rule 160 (MulOp -> GG .)
    FUNC            reduce using rule 160 (MulOp -> GG .)


state 185

    (142) BinaryOp -> RelOp .

    NOT             reduce using rule 142 (BinaryOp -> RelOp .)
    PLUS            reduce using rule 142 (BinaryOp -> RelOp .)
    MINUS           reduce using rule 142 (BinaryOp -> RelOp .)
    TIMES           reduce using rule 142 (BinaryOp -> RelOp .)
    AMPERS          reduce using rule 142 (BinaryOp -> RelOp .)
    LPAREN          reduce using rule 142 (BinaryOp -> RelOp .)
    IDENTIFIER      reduce using rule 142 (BinaryOp -> RelOp .)
    INTEGER         reduce using rule 142 (BinaryOp -> RelOp .)
    FLOAT           reduce using rule 142 (BinaryOp -> RelOp .)
    IMAGINARY       reduce using rule 142 (BinaryOp -> RelOp .)
    RUNE            reduce using rule 142 (BinaryOp -> RelOp .)
    STRING          reduce using rule 142 (BinaryOp -> RelOp .)
    LBRACK          reduce using rule 142 (BinaryOp -> RelOp .)
    STRUCT          reduce using rule 142 (BinaryOp -> RelOp .)
    FUNC            reduce using rule 142 (BinaryOp -> RelOp .)


state 186

    (158) MulOp -> AMPERS .

    NOT             reduce using rule 158 (MulOp -> AMPERS .)
    PLUS            reduce using rule 158 (MulOp -> AMPERS .)
    MINUS           reduce using rule 158 (MulOp -> AMPERS .)
    TIMES           reduce using rule 158 (MulOp -> AMPERS .)
    AMPERS          reduce using rule 158 (MulOp -> AMPERS .)
    LPAREN          reduce using rule 158 (MulOp -> AMPERS .)
    IDENTIFIER      reduce using rule 158 (MulOp -> AMPERS .)
    INTEGER         reduce using rule 158 (MulOp -> AMPERS .)
    FLOAT           reduce using rule 158 (MulOp -> AMPERS .)
    IMAGINARY       reduce using rule 158 (MulOp -> AMPERS .)
    RUNE            reduce using rule 158 (MulOp -> AMPERS .)
    STRING          reduce using rule 158 (MulOp -> AMPERS .)
    LBRACK          reduce using rule 158 (MulOp -> AMPERS .)
    STRUCT          reduce using rule 158 (MulOp -> AMPERS .)
    FUNC            reduce using rule 158 (MulOp -> AMPERS .)


state 187

    (149) RelOp -> LEQ .

    NOT             reduce using rule 149 (RelOp -> LEQ .)
    PLUS            reduce using rule 149 (RelOp -> LEQ .)
    MINUS           reduce using rule 149 (RelOp -> LEQ .)
    TIMES           reduce using rule 149 (RelOp -> LEQ .)
    AMPERS          reduce using rule 149 (RelOp -> LEQ .)
    LPAREN          reduce using rule 149 (RelOp -> LEQ .)
    IDENTIFIER      reduce using rule 149 (RelOp -> LEQ .)
    INTEGER         reduce using rule 149 (RelOp -> LEQ .)
    FLOAT           reduce using rule 149 (RelOp -> LEQ .)
    IMAGINARY       reduce using rule 149 (RelOp -> LEQ .)
    RUNE            reduce using rule 149 (RelOp -> LEQ .)
    STRING          reduce using rule 149 (RelOp -> LEQ .)
    LBRACK          reduce using rule 149 (RelOp -> LEQ .)
    STRUCT          reduce using rule 149 (RelOp -> LEQ .)
    FUNC            reduce using rule 149 (RelOp -> LEQ .)


state 188

    (153) AddOp -> OR .

    NOT             reduce using rule 153 (AddOp -> OR .)
    PLUS            reduce using rule 153 (AddOp -> OR .)
    MINUS           reduce using rule 153 (AddOp -> OR .)
    TIMES           reduce using rule 153 (AddOp -> OR .)
    AMPERS          reduce using rule 153 (AddOp -> OR .)
    LPAREN          reduce using rule 153 (AddOp -> OR .)
    IDENTIFIER      reduce using rule 153 (AddOp -> OR .)
    INTEGER         reduce using rule 153 (AddOp -> OR .)
    FLOAT           reduce using rule 153 (AddOp -> OR .)
    IMAGINARY       reduce using rule 153 (AddOp -> OR .)
    RUNE            reduce using rule 153 (AddOp -> OR .)
    STRING          reduce using rule 153 (AddOp -> OR .)
    LBRACK          reduce using rule 153 (AddOp -> OR .)
    STRUCT          reduce using rule 153 (AddOp -> OR .)
    FUNC            reduce using rule 153 (AddOp -> OR .)


state 189

    (157) MulOp -> MOD .

    NOT             reduce using rule 157 (MulOp -> MOD .)
    PLUS            reduce using rule 157 (MulOp -> MOD .)
    MINUS           reduce using rule 157 (MulOp -> MOD .)
    TIMES           reduce using rule 157 (MulOp -> MOD .)
    AMPERS          reduce using rule 157 (MulOp -> MOD .)
    LPAREN          reduce using rule 157 (MulOp -> MOD .)
    IDENTIFIER      reduce using rule 157 (MulOp -> MOD .)
    INTEGER         reduce using rule 157 (MulOp -> MOD .)
    FLOAT           reduce using rule 157 (MulOp -> MOD .)
    IMAGINARY       reduce using rule 157 (MulOp -> MOD .)
    RUNE            reduce using rule 157 (MulOp -> MOD .)
    STRING          reduce using rule 157 (MulOp -> MOD .)
    LBRACK          reduce using rule 157 (MulOp -> MOD .)
    STRUCT          reduce using rule 157 (MulOp -> MOD .)
    FUNC            reduce using rule 157 (MulOp -> MOD .)


state 190

    (139) UnaryExpr -> NOT UnaryExpr .

    PLUSPLUS        reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    MINUSMIN        reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    OROR            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    AMPAMP          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    EQEQ            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    NOTEQ           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    LESS            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    GREAT           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    LEQ             reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    GEQ             reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    PLUS            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    MINUS           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    OR              reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    CARET           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    TIMES           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    DIVIDE          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    MOD             reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    AMPERS          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    LL              reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    GG              reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    AMPCAR          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    COMMA           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    SEMICOL         reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    PLUSEQ          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    MINUSEQ         reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    TIMESEQ         reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    DIVIDEEQ        reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    MODEQ           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    AMPEQ           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    OREQ            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    CAREQ           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    LLEQ            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    GGEQ            reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    EQUAL           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    COLON           reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    LBRACE          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    RPAREN          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)
    RBRACK          reduce using rule 139 (UnaryExpr -> NOT UnaryExpr .)


state 191

    (58) IdentifierRep -> IdentifierRep COMMA IDENTIFIER .

    COMMA           reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LPAREN          reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    IDENTIFIER      reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    LBRACK          reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    STRUCT          reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    TIMES           reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    FUNC            reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    EQUAL           reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)
    SEMICOL         reduce using rule 58 (IdentifierRep -> IdentifierRep COMMA IDENTIFIER .)


state 192

    (4) Type -> LPAREN Type . RPAREN
    (34) ParametersList -> Type .
    (40) ParameterDecl -> Type .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 148
    COMMA           reduce using rule 40 (ParameterDecl -> Type .)

  ! RPAREN          [ reduce using rule 34 (ParametersList -> Type .) ]


state 193

    (5) TypeName -> IDENTIFIER .
    (57) IdentifierList -> IDENTIFIER . IdentifierRep
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName
    (58) IdentifierRep -> . IdentifierRep COMMA IDENTIFIER
    (59) IdentifierRep -> . epsilon
    (83) epsilon -> .

  ! reduce/reduce conflict for COMMA resolved using rule 5 (TypeName -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    COMMA           reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88
    LPAREN          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)

  ! COMMA           [ reduce using rule 83 (epsilon -> .) ]

    epsilon                        shift and go to state 69
    IdentifierRep                  shift and go to state 70

state 194

    (42) StatementList -> StatementRep .
    (43) StatementRep -> StatementRep . Statement SEMICOL
    (166) Statement -> . Declaration
    (167) Statement -> . LabeledStmt
    (168) Statement -> . SimpleStmt
    (169) Statement -> . ReturnStmt
    (170) Statement -> . BreakStmt
    (171) Statement -> . ContinueStmt
    (172) Statement -> . GotoStmt
    (173) Statement -> . Block
    (174) Statement -> . IfStmt
    (175) Statement -> . SwitchStmt
    (176) Statement -> . ForStmt
    (45) Declaration -> . ConstDecl
    (46) Declaration -> . TypeDecl
    (47) Declaration -> . VarDecl
    (182) LabeledStmt -> . Label COLON Statement
    (177) SimpleStmt -> . epsilon
    (178) SimpleStmt -> . ExpressionStmt
    (179) SimpleStmt -> . IncDecStmt
    (180) SimpleStmt -> . Assignment
    (181) SimpleStmt -> . ShortVarDecl
    (239) ReturnStmt -> . RETURN ExpressionListPureOpt
    (242) BreakStmt -> . BREAK LabelOpt
    (243) ContinueStmt -> . CONTINUE LabelOpt
    (246) GotoStmt -> . GOTO Label
    (41) Block -> . LBRACE StatementList RBRACE
    (200) IfStmt -> . IF Expression Block ElseOpt
    (206) SwitchStmt -> . ExprSwitchStmt
    (207) SwitchStmt -> . TypeSwitchStmt
    (226) ForStmt -> . FOR ConditionBlockOpt Block
    (50) ConstDecl -> . CONST ConstSpec
    (51) ConstDecl -> . CONST LPAREN ConstSpecRep RPAREN
    (60) TypeDecl -> . TYPE TypeSpec
    (61) TypeDecl -> . TYPE LPAREN TypeSpecRep RPAREN
    (68) VarDecl -> . VAR VarSpec
    (69) VarDecl -> . VAR LPAREN VarSpecRep RPAREN
    (183) Label -> . IDENTIFIER
    (83) epsilon -> .
    (184) ExpressionStmt -> . Expression
    (185) IncDecStmt -> . Expression PLUSPLUS
    (186) IncDecStmt -> . Expression MINUSMIN
    (187) Assignment -> . ExpressionList assign_op ExpressionList
    (76) ShortVarDecl -> . IDENTIFIER COLONEQ Expression
    (208) ExprSwitchStmt -> . SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE
    (214) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (130) ExpressionList -> . Expression ExpressionRep
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    RBRACE          reduce using rule 42 (StatementList -> StatementRep .)
    CASE            reduce using rule 42 (StatementList -> StatementRep .)
    DEFAULT         reduce using rule 42 (StatementList -> StatementRep .)
    RETURN          shift and go to state 229
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 238
    GOTO            shift and go to state 249
    LBRACE          shift and go to state 125
    IF              shift and go to state 251
    FOR             shift and go to state 235
    CONST           shift and go to state 14
    TYPE            shift and go to state 23
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 241
    SEMICOL         reduce using rule 83 (epsilon -> .)
    SWITCH          shift and go to state 239
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    ContinueStmt                   shift and go to state 223
    Conversion                     shift and go to state 94
    SimpleStmt                     shift and go to state 247
    Label                          shift and go to state 230
    ExpressionStmt                 shift and go to state 224
    PointerType                    shift and go to state 66
    ForStmt                        shift and go to state 248
    ExprSwitchStmt                 shift and go to state 231
    Statement                      shift and go to state 225
    Type                           shift and go to state 100
    IfStmt                         shift and go to state 232
    OperandName                    shift and go to state 102
    ArrayType                      shift and go to state 53
    Assignment                     shift and go to state 226
    TypeName                       shift and go to state 56
    IncDecStmt                     shift and go to state 233
    Declaration                    shift and go to state 240
    FunctionType                   shift and go to state 67
    GotoStmt                       shift and go to state 234
    StructType                     shift and go to state 58
    TypeDecl                       shift and go to state 19
    LabeledStmt                    shift and go to state 227
    epsilon                        shift and go to state 242
    UnaryExpr                      shift and go to state 109
    Operand                        shift and go to state 98
    ExpressionList                 shift and go to state 243
    Literal                        shift and go to state 97
    Expression                     shift and go to state 244
    ShortVarDecl                   shift and go to state 250
    Block                          shift and go to state 236
    TypeSwitchStmt                 shift and go to state 228
    BreakStmt                      shift and go to state 252
    SwitchStmt                     shift and go to state 237
    VarDecl                        shift and go to state 22
    TypeLit                        shift and go to state 55
    BasicLit                       shift and go to state 103
    PrimaryExpr                    shift and go to state 96
    ReturnStmt                     shift and go to state 246
    ConstDecl                      shift and go to state 18
    QualifiedIdent                 shift and go to state 68

state 195

    (44) StatementRep -> epsilon .

    RETURN          reduce using rule 44 (StatementRep -> epsilon .)
    BREAK           reduce using rule 44 (StatementRep -> epsilon .)
    CONTINUE        reduce using rule 44 (StatementRep -> epsilon .)
    GOTO            reduce using rule 44 (StatementRep -> epsilon .)
    LBRACE          reduce using rule 44 (StatementRep -> epsilon .)
    IF              reduce using rule 44 (StatementRep -> epsilon .)
    FOR             reduce using rule 44 (StatementRep -> epsilon .)
    CONST           reduce using rule 44 (StatementRep -> epsilon .)
    TYPE            reduce using rule 44 (StatementRep -> epsilon .)
    VAR             reduce using rule 44 (StatementRep -> epsilon .)
    IDENTIFIER      reduce using rule 44 (StatementRep -> epsilon .)
    SWITCH          reduce using rule 44 (StatementRep -> epsilon .)
    NOT             reduce using rule 44 (StatementRep -> epsilon .)
    PLUS            reduce using rule 44 (StatementRep -> epsilon .)
    MINUS           reduce using rule 44 (StatementRep -> epsilon .)
    TIMES           reduce using rule 44 (StatementRep -> epsilon .)
    AMPERS          reduce using rule 44 (StatementRep -> epsilon .)
    LPAREN          reduce using rule 44 (StatementRep -> epsilon .)
    INTEGER         reduce using rule 44 (StatementRep -> epsilon .)
    FLOAT           reduce using rule 44 (StatementRep -> epsilon .)
    IMAGINARY       reduce using rule 44 (StatementRep -> epsilon .)
    RUNE            reduce using rule 44 (StatementRep -> epsilon .)
    STRING          reduce using rule 44 (StatementRep -> epsilon .)
    LBRACK          reduce using rule 44 (StatementRep -> epsilon .)
    STRUCT          reduce using rule 44 (StatementRep -> epsilon .)
    FUNC            reduce using rule 44 (StatementRep -> epsilon .)
    SEMICOL         reduce using rule 44 (StatementRep -> epsilon .)
    RBRACE          reduce using rule 44 (StatementRep -> epsilon .)
    CASE            reduce using rule 44 (StatementRep -> epsilon .)
    DEFAULT         reduce using rule 44 (StatementRep -> epsilon .)


state 196

    (41) Block -> LBRACE StatementList . RBRACE

    RBRACE          shift and go to state 253


state 197

    (31) Parameters -> LPAREN ParameterListOpt RPAREN .

    LPAREN          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    IDENTIFIER      reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    LBRACK          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    STRUCT          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    TIMES           reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    FUNC            reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    EQUAL           reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    SEMICOL         reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    RPAREN          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    LBRACE          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    COMMA           reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    STRING          reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)
    COLON           reduce using rule 31 (Parameters -> LPAREN ParameterListOpt RPAREN .)


state 198

    (35) ParametersList -> IdentifierList Type .
    (39) ParameterDecl -> IdentifierList Type .

    RPAREN          reduce using rule 35 (ParametersList -> IdentifierList Type .)
    COMMA           reduce using rule 39 (ParameterDecl -> IdentifierList Type .)


state 199

    (37) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA . ParameterDecl
    (39) ParameterDecl -> . IdentifierList Type
    (40) ParameterDecl -> . Type
    (57) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    IDENTIFIER      shift and go to state 132
    LPAREN          shift and go to state 61
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    ParameterDecl                  shift and go to state 256
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    TypeLit                        shift and go to state 55
    IdentifierList                 shift and go to state 254
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    Type                           shift and go to state 255
    QualifiedIdent                 shift and go to state 68

state 200

    (38) ParameterDeclCommaRep -> ParameterDecl COMMA . ParameterDecl
    (39) ParameterDecl -> . IdentifierList Type
    (40) ParameterDecl -> . Type
    (57) IdentifierList -> . IDENTIFIER IdentifierRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    IDENTIFIER      shift and go to state 132
    LPAREN          shift and go to state 61
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    TypeLit                        shift and go to state 55
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    IdentifierList                 shift and go to state 254
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    Type                           shift and go to state 255
    QualifiedIdent                 shift and go to state 68
    ParameterDecl                  shift and go to state 257

state 201

    (70) VarSpecRep -> VarSpecRep VarSpec SEMICOL .

    RPAREN          reduce using rule 70 (VarSpecRep -> VarSpecRep VarSpec SEMICOL .)
    IDENTIFIER      reduce using rule 70 (VarSpecRep -> VarSpecRep VarSpec SEMICOL .)


state 202

    (130) ExpressionList -> Expression ExpressionRep .
    (131) ExpressionRep -> ExpressionRep . COMMA Expression

    SEMICOL         reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    RPAREN          reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    PLUSEQ          reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    MINUSEQ         reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    TIMESEQ         reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    DIVIDEEQ        reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    MODEQ           reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    AMPEQ           reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    OREQ            reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    CAREQ           reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    LLEQ            reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    GGEQ            reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    EQUAL           reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    LBRACE          reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    COLON           reduce using rule 130 (ExpressionList -> Expression ExpressionRep .)
    COMMA           shift and go to state 258


state 203

    (132) ExpressionRep -> epsilon .

    COMMA           reduce using rule 132 (ExpressionRep -> epsilon .)
    EQUAL           reduce using rule 132 (ExpressionRep -> epsilon .)
    PLUSEQ          reduce using rule 132 (ExpressionRep -> epsilon .)
    MINUSEQ         reduce using rule 132 (ExpressionRep -> epsilon .)
    TIMESEQ         reduce using rule 132 (ExpressionRep -> epsilon .)
    DIVIDEEQ        reduce using rule 132 (ExpressionRep -> epsilon .)
    MODEQ           reduce using rule 132 (ExpressionRep -> epsilon .)
    AMPEQ           reduce using rule 132 (ExpressionRep -> epsilon .)
    OREQ            reduce using rule 132 (ExpressionRep -> epsilon .)
    CAREQ           reduce using rule 132 (ExpressionRep -> epsilon .)
    LLEQ            reduce using rule 132 (ExpressionRep -> epsilon .)
    GGEQ            reduce using rule 132 (ExpressionRep -> epsilon .)
    SEMICOL         reduce using rule 132 (ExpressionRep -> epsilon .)
    RPAREN          reduce using rule 132 (ExpressionRep -> epsilon .)
    LBRACE          reduce using rule 132 (ExpressionRep -> epsilon .)
    COLON           reduce using rule 132 (ExpressionRep -> epsilon .)


state 204

    (74) ExpressionListOpt -> EQUAL ExpressionList .

    SEMICOL         reduce using rule 74 (ExpressionListOpt -> EQUAL ExpressionList .)


state 205

    (62) TypeSpecRep -> TypeSpecRep TypeSpec SEMICOL .

    RPAREN          reduce using rule 62 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOL .)
    IDENTIFIER      reduce using rule 62 (TypeSpecRep -> TypeSpecRep TypeSpec SEMICOL .)


state 206

    (17) FieldDeclRep -> FieldDeclRep FieldDecl . SEMICOL

    SEMICOL         shift and go to state 259


state 207

    (19) FieldDecl -> IdentifierList . Type TagOpt
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 260
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 208

    (16) StructType -> STRUCT LBRACE FieldDeclRep RBRACE .

    LPAREN          reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    COMMA           reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    COLON           reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    STRING          reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    SEMICOL         reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    RPAREN          reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    EQUAL           reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)
    LBRACE          reduce using rule 16 (StructType -> STRUCT LBRACE FieldDeclRep RBRACE .)


state 209

    (122) Slice -> LBRACK ExpressionOpt . COLON ExpressionOpt RBRACK
    (123) Slice -> LBRACK ExpressionOpt . COLON Expression COLON Expression RBRACK

    COLON           shift and go to state 261


state 210

    (136) ExpressionOpt -> epsilon .

    COLON           reduce using rule 136 (ExpressionOpt -> epsilon .)
    RBRACK          reduce using rule 136 (ExpressionOpt -> epsilon .)


state 211

    (121) Index -> LBRACK Expression . RBRACK
    (134) Expression -> Expression . BinaryOp Expression
    (135) ExpressionOpt -> Expression .
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    RBRACK          shift and go to state 262
    COLON           reduce using rule 135 (ExpressionOpt -> Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 212

    (127) ExpressionListTypeOpt -> epsilon .

    RPAREN          reduce using rule 127 (ExpressionListTypeOpt -> epsilon .)


state 213

    (126) ExpressionListTypeOpt -> ExpressionList .

    RPAREN          reduce using rule 126 (ExpressionListTypeOpt -> ExpressionList .)


state 214

    (125) Arguments -> LPAREN ExpressionListTypeOpt . RPAREN

    RPAREN          shift and go to state 263


state 215

    (120) Selector -> DOT IDENTIFIER .

    DOT             reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LBRACK          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    OROR            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    AMPAMP          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    EQEQ            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    NOTEQ           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LESS            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    GREAT           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LEQ             reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    GEQ             reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    PLUS            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    MINUS           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    OR              reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    CARET           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    TIMES           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    DIVIDE          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    MOD             reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    AMPERS          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LL              reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    GG              reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    AMPCAR          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    RBRACK          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    COMMA           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    SEMICOL         reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    COLON           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    PLUSPLUS        reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    MINUSMIN        reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    PLUSEQ          reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    MINUSEQ         reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    TIMESEQ         reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    DIVIDEEQ        reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    MODEQ           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    AMPEQ           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    OREQ            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    CAREQ           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LLEQ            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    GGEQ            reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    EQUAL           reduce using rule 120 (Selector -> DOT IDENTIFIER .)
    LBRACE          reduce using rule 120 (Selector -> DOT IDENTIFIER .)


state 216

    (124) TypeAssertion -> DOT LPAREN . Type RPAREN
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 264
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 217

    (112) Conversion -> Type LPAREN Expression . RPAREN
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    RPAREN          shift and go to state 265
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 218

    (15) ElementType -> Type .

    EQUAL           reduce using rule 15 (ElementType -> Type .)
    SEMICOL         reduce using rule 15 (ElementType -> Type .)
    RPAREN          reduce using rule 15 (ElementType -> Type .)
    LBRACE          reduce using rule 15 (ElementType -> Type .)
    COMMA           reduce using rule 15 (ElementType -> Type .)
    LPAREN          reduce using rule 15 (ElementType -> Type .)
    STRING          reduce using rule 15 (ElementType -> Type .)
    COLON           reduce using rule 15 (ElementType -> Type .)


state 219

    (13) ArrayType -> LBRACK ArrayLength RBRACK ElementType .

    LPAREN          reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    RPAREN          reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    COMMA           reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    EQUAL           reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    SEMICOL         reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    LBRACE          reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    STRING          reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)
    COLON           reduce using rule 13 (ArrayType -> LBRACK ArrayLength RBRACK ElementType .)


state 220

    (23) PointerType -> TIMES . BaseType
    (164) UnaryOp -> TIMES .
    (24) BaseType -> . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    NOT             reduce using rule 164 (UnaryOp -> TIMES .)
    PLUS            reduce using rule 164 (UnaryOp -> TIMES .)
    MINUS           reduce using rule 164 (UnaryOp -> TIMES .)
    AMPERS          reduce using rule 164 (UnaryOp -> TIMES .)
    INTEGER         reduce using rule 164 (UnaryOp -> TIMES .)
    FLOAT           reduce using rule 164 (UnaryOp -> TIMES .)
    IMAGINARY       reduce using rule 164 (UnaryOp -> TIMES .)
    RUNE            reduce using rule 164 (UnaryOp -> TIMES .)
    STRING          reduce using rule 164 (UnaryOp -> TIMES .)
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

  ! TIMES           [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! LPAREN          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! IDENTIFIER      [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! LBRACK          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! STRUCT          [ reduce using rule 164 (UnaryOp -> TIMES .) ]
  ! FUNC            [ reduce using rule 164 (UnaryOp -> TIMES .) ]

    StructType                     shift and go to state 58
    BaseType                       shift and go to state 90
    Type                           shift and go to state 89
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 221

    (86) Operand -> LPAREN Expression RPAREN .

    DOT             reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LBRACK          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    OROR            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    AMPAMP          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    EQEQ            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    NOTEQ           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LESS            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    GREAT           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LEQ             reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    GEQ             reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    OR              reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    MOD             reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    AMPERS          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LL              reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    GG              reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    AMPCAR          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    SEMICOL         reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    PLUSEQ          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    MINUSEQ         reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    TIMESEQ         reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    DIVIDEEQ        reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    MODEQ           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    AMPEQ           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    OREQ            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    CAREQ           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    LLEQ            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    GGEQ            reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    PLUSPLUS        reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)
    MINUSMIN        reduce using rule 86 (Operand -> LPAREN Expression RPAREN .)


state 222

    (134) Expression -> Expression BinaryOp Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

  ! shift/reduce conflict for OROR resolved as shift
  ! shift/reduce conflict for AMPAMP resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREAT resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AMPERS resolved as shift
  ! shift/reduce conflict for LL resolved as shift
  ! shift/reduce conflict for GG resolved as shift
  ! shift/reduce conflict for AMPCAR resolved as shift
    RBRACK          reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    COMMA           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    SEMICOL         reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    RPAREN          reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    PLUSPLUS        reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    MINUSMIN        reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    LBRACE          reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    EQUAL           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    PLUSEQ          reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    MINUSEQ         reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    TIMESEQ         reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    DIVIDEEQ        reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    MODEQ           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    AMPEQ           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    OREQ            reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    CAREQ           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    LLEQ            reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    GGEQ            reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    COLON           reduce using rule 134 (Expression -> Expression BinaryOp Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

  ! OROR            [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! AMPAMP          [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! EQEQ            [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! NOTEQ           [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! LESS            [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! GREAT           [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! LEQ             [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! GEQ             [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! PLUS            [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! MINUS           [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! OR              [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! CARET           [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! TIMES           [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! DIVIDE          [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! MOD             [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! AMPERS          [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! LL              [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! GG              [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]
  ! AMPCAR          [ reduce using rule 134 (Expression -> Expression BinaryOp Expression .) ]

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 223

    (171) Statement -> ContinueStmt .

    SEMICOL         reduce using rule 171 (Statement -> ContinueStmt .)


state 224

    (178) SimpleStmt -> ExpressionStmt .

    SEMICOL         reduce using rule 178 (SimpleStmt -> ExpressionStmt .)
    LBRACE          reduce using rule 178 (SimpleStmt -> ExpressionStmt .)


state 225

    (43) StatementRep -> StatementRep Statement . SEMICOL

    SEMICOL         shift and go to state 266


state 226

    (180) SimpleStmt -> Assignment .

    SEMICOL         reduce using rule 180 (SimpleStmt -> Assignment .)
    LBRACE          reduce using rule 180 (SimpleStmt -> Assignment .)


state 227

    (167) Statement -> LabeledStmt .

    SEMICOL         reduce using rule 167 (Statement -> LabeledStmt .)


state 228

    (207) SwitchStmt -> TypeSwitchStmt .

    SEMICOL         reduce using rule 207 (SwitchStmt -> TypeSwitchStmt .)


state 229

    (239) ReturnStmt -> RETURN . ExpressionListPureOpt
    (240) ExpressionListPureOpt -> . ExpressionList
    (241) ExpressionListPureOpt -> . epsilon
    (130) ExpressionList -> . Expression ExpressionRep
    (83) epsilon -> .
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    SEMICOL         reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ExpressionListPureOpt          shift and go to state 267
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 268
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 269
    ArrayType                      shift and go to state 53
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 230

    (182) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 270


state 231

    (206) SwitchStmt -> ExprSwitchStmt .

    SEMICOL         reduce using rule 206 (SwitchStmt -> ExprSwitchStmt .)


state 232

    (174) Statement -> IfStmt .

    SEMICOL         reduce using rule 174 (Statement -> IfStmt .)


state 233

    (179) SimpleStmt -> IncDecStmt .

    SEMICOL         reduce using rule 179 (SimpleStmt -> IncDecStmt .)
    LBRACE          reduce using rule 179 (SimpleStmt -> IncDecStmt .)


state 234

    (172) Statement -> GotoStmt .

    SEMICOL         reduce using rule 172 (Statement -> GotoStmt .)


state 235

    (226) ForStmt -> FOR . ConditionBlockOpt Block
    (227) ConditionBlockOpt -> . epsilon
    (228) ConditionBlockOpt -> . Condition
    (229) ConditionBlockOpt -> . ForClause
    (230) ConditionBlockOpt -> . RangeClause
    (83) epsilon -> .
    (231) Condition -> . Expression
    (232) ForClause -> . SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmt
    (235) RangeClause -> . ExpressionIdentListOpt RANGE Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (177) SimpleStmt -> . epsilon
    (178) SimpleStmt -> . ExpressionStmt
    (179) SimpleStmt -> . IncDecStmt
    (180) SimpleStmt -> . Assignment
    (181) SimpleStmt -> . ShortVarDecl
    (236) ExpressionIdentListOpt -> . epsilon
    (237) ExpressionIdentListOpt -> . ExpressionIdentifier
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (184) ExpressionStmt -> . Expression
    (185) IncDecStmt -> . Expression PLUSPLUS
    (186) IncDecStmt -> . Expression MINUSMIN
    (187) Assignment -> . ExpressionList assign_op ExpressionList
    (76) ShortVarDecl -> . IDENTIFIER COLONEQ Expression
    (238) ExpressionIdentifier -> . ExpressionList EQUAL
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (130) ExpressionList -> . Expression ExpressionRep
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LBRACE          reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RANGE           reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    IDENTIFIER      shift and go to state 273
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    SimpleStmt                     shift and go to state 271
    ExpressionStmt                 shift and go to state 224
    PointerType                    shift and go to state 66
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    Assignment                     shift and go to state 226
    TypeName                       shift and go to state 56
    RangeClause                    shift and go to state 272
    IncDecStmt                     shift and go to state 233
    Condition                      shift and go to state 274
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 275
    UnaryExpr                      shift and go to state 109
    ConditionBlockOpt              shift and go to state 276
    ExpressionIdentListOpt         shift and go to state 277
    ExpressionList                 shift and go to state 280
    ArrayType                      shift and go to state 53
    ForClause                      shift and go to state 278
    Expression                     shift and go to state 279
    ShortVarDecl                   shift and go to state 250
    Literal                        shift and go to state 97
    TypeLit                        shift and go to state 55
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68
    ExpressionIdentifier           shift and go to state 281

state 236

    (173) Statement -> Block .

    SEMICOL         reduce using rule 173 (Statement -> Block .)


state 237

    (175) Statement -> SwitchStmt .

    SEMICOL         reduce using rule 175 (Statement -> SwitchStmt .)


state 238

    (243) ContinueStmt -> CONTINUE . LabelOpt
    (244) LabelOpt -> . Label
    (245) LabelOpt -> . epsilon
    (183) Label -> . IDENTIFIER
    (83) epsilon -> .

    IDENTIFIER      shift and go to state 283
    SEMICOL         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 282
    LabelOpt                       shift and go to state 284
    Label                          shift and go to state 285

state 239

    (208) ExprSwitchStmt -> SWITCH . ExpressionOpt LBRACE ExprCaseClauseRep RBRACE
    (214) TypeSwitchStmt -> SWITCH . SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE
    (135) ExpressionOpt -> . Expression
    (136) ExpressionOpt -> . epsilon
    (201) SimpleStmtOpt -> . SimpleStmt SEMICOL
    (202) SimpleStmtOpt -> . epsilon
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (83) epsilon -> .
    (177) SimpleStmt -> . epsilon
    (178) SimpleStmt -> . ExpressionStmt
    (179) SimpleStmt -> . IncDecStmt
    (180) SimpleStmt -> . Assignment
    (181) SimpleStmt -> . ShortVarDecl
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (184) ExpressionStmt -> . Expression
    (185) IncDecStmt -> . Expression PLUSPLUS
    (186) IncDecStmt -> . Expression MINUSMIN
    (187) Assignment -> . ExpressionList assign_op ExpressionList
    (76) ShortVarDecl -> . IDENTIFIER COLONEQ Expression
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (130) ExpressionList -> . Expression ExpressionRep
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for IMAGINARY resolved as shift
  ! shift/reduce conflict for RUNE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
    LBRACE          reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    IDENTIFIER      shift and go to state 273
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

  ! IDENTIFIER      [ reduce using rule 83 (epsilon -> .) ]
  ! LPAREN          [ reduce using rule 83 (epsilon -> .) ]
  ! INTEGER         [ reduce using rule 83 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 83 (epsilon -> .) ]
  ! IMAGINARY       [ reduce using rule 83 (epsilon -> .) ]
  ! RUNE            [ reduce using rule 83 (epsilon -> .) ]
  ! STRING          [ reduce using rule 83 (epsilon -> .) ]
  ! LBRACK          [ reduce using rule 83 (epsilon -> .) ]
  ! STRUCT          [ reduce using rule 83 (epsilon -> .) ]
  ! TIMES           [ reduce using rule 83 (epsilon -> .) ]
  ! FUNC            [ reduce using rule 83 (epsilon -> .) ]

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    SimpleStmt                     shift and go to state 286
    ExpressionStmt                 shift and go to state 224
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    Assignment                     shift and go to state 226
    TypeName                       shift and go to state 56
    IncDecStmt                     shift and go to state 233
    ExpressionOpt                  shift and go to state 287
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 288
    UnaryExpr                      shift and go to state 109
    PrimaryExpr                    shift and go to state 96
    SimpleStmtOpt                  shift and go to state 289
    ExpressionList                 shift and go to state 243
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Expression                     shift and go to state 290
    ShortVarDecl                   shift and go to state 250
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 240

    (166) Statement -> Declaration .

    SEMICOL         reduce using rule 166 (Statement -> Declaration .)


state 241

    (183) Label -> IDENTIFIER .
    (76) ShortVarDecl -> IDENTIFIER . COLONEQ Expression
    (93) OperandName -> IDENTIFIER .
    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName

  ! reduce/reduce conflict for LPAREN resolved using rule 5 (TypeName -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    COLON           reduce using rule 183 (Label -> IDENTIFIER .)
    COLONEQ         shift and go to state 291
    LBRACK          reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSMIN        reduce using rule 93 (OperandName -> IDENTIFIER .)
    OROR            reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPAMP          reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    NOTEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LESS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GREAT           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 93 (OperandName -> IDENTIFIER .)
    CARET           reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMES           reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPERS          reduce using rule 93 (OperandName -> IDENTIFIER .)
    LL              reduce using rule 93 (OperandName -> IDENTIFIER .)
    GG              reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPCAR          reduce using rule 93 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 93 (OperandName -> IDENTIFIER .)
    SEMICOL         reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSEQ          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMESEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDEEQ        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MODEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OREQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    CAREQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LLEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GGEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQUAL           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88

  ! DOT             [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]


state 242

    (177) SimpleStmt -> epsilon .

    SEMICOL         reduce using rule 177 (SimpleStmt -> epsilon .)
    LBRACE          reduce using rule 177 (SimpleStmt -> epsilon .)


state 243

    (187) Assignment -> ExpressionList . assign_op ExpressionList
    (188) assign_op -> . AssignOp
    (189) AssignOp -> . PLUSEQ
    (190) AssignOp -> . MINUSEQ
    (191) AssignOp -> . TIMESEQ
    (192) AssignOp -> . DIVIDEEQ
    (193) AssignOp -> . MODEQ
    (194) AssignOp -> . AMPEQ
    (195) AssignOp -> . OREQ
    (196) AssignOp -> . CAREQ
    (197) AssignOp -> . LLEQ
    (198) AssignOp -> . GGEQ
    (199) AssignOp -> . EQUAL

    PLUSEQ          shift and go to state 296
    MINUSEQ         shift and go to state 301
    TIMESEQ         shift and go to state 295
    DIVIDEEQ        shift and go to state 304
    MODEQ           shift and go to state 297
    AMPEQ           shift and go to state 302
    OREQ            shift and go to state 300
    CAREQ           shift and go to state 294
    LLEQ            shift and go to state 299
    GGEQ            shift and go to state 298
    EQUAL           shift and go to state 293

    AssignOp                       shift and go to state 292
    assign_op                      shift and go to state 303

state 244

    (184) ExpressionStmt -> Expression .
    (185) IncDecStmt -> Expression . PLUSPLUS
    (186) IncDecStmt -> Expression . MINUSMIN
    (134) Expression -> Expression . BinaryOp Expression
    (130) ExpressionList -> Expression . ExpressionRep
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (131) ExpressionRep -> . ExpressionRep COMMA Expression
    (132) ExpressionRep -> . epsilon
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR
    (83) epsilon -> .

    SEMICOL         reduce using rule 184 (ExpressionStmt -> Expression .)
    LBRACE          reduce using rule 184 (ExpressionStmt -> Expression .)
    PLUSPLUS        shift and go to state 305
    MINUSMIN        shift and go to state 306
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170
    COMMA           reduce using rule 83 (epsilon -> .)
    PLUSEQ          reduce using rule 83 (epsilon -> .)
    MINUSEQ         reduce using rule 83 (epsilon -> .)
    TIMESEQ         reduce using rule 83 (epsilon -> .)
    DIVIDEEQ        reduce using rule 83 (epsilon -> .)
    MODEQ           reduce using rule 83 (epsilon -> .)
    AMPEQ           reduce using rule 83 (epsilon -> .)
    OREQ            reduce using rule 83 (epsilon -> .)
    CAREQ           reduce using rule 83 (epsilon -> .)
    LLEQ            reduce using rule 83 (epsilon -> .)
    GGEQ            reduce using rule 83 (epsilon -> .)
    EQUAL           reduce using rule 83 (epsilon -> .)

    AddOp                          shift and go to state 181
    ExpressionRep                  shift and go to state 202
    RelOp                          shift and go to state 185
    epsilon                        shift and go to state 203
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 245

    (242) BreakStmt -> BREAK . LabelOpt
    (244) LabelOpt -> . Label
    (245) LabelOpt -> . epsilon
    (183) Label -> . IDENTIFIER
    (83) epsilon -> .

    IDENTIFIER      shift and go to state 283
    SEMICOL         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 282
    LabelOpt                       shift and go to state 307
    Label                          shift and go to state 285

state 246

    (169) Statement -> ReturnStmt .

    SEMICOL         reduce using rule 169 (Statement -> ReturnStmt .)


state 247

    (168) Statement -> SimpleStmt .

    SEMICOL         reduce using rule 168 (Statement -> SimpleStmt .)


state 248

    (176) Statement -> ForStmt .

    SEMICOL         reduce using rule 176 (Statement -> ForStmt .)


state 249

    (246) GotoStmt -> GOTO . Label
    (183) Label -> . IDENTIFIER

    IDENTIFIER      shift and go to state 283

    Label                          shift and go to state 308

state 250

    (181) SimpleStmt -> ShortVarDecl .

    SEMICOL         reduce using rule 181 (SimpleStmt -> ShortVarDecl .)
    LBRACE          reduce using rule 181 (SimpleStmt -> ShortVarDecl .)


state 251

    (200) IfStmt -> IF . Expression Block ElseOpt
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    PointerType                    shift and go to state 66
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 309
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 252

    (170) Statement -> BreakStmt .

    SEMICOL         reduce using rule 170 (Statement -> BreakStmt .)


state 253

    (41) Block -> LBRACE StatementList RBRACE .

    SEMICOL         reduce using rule 41 (Block -> LBRACE StatementList RBRACE .)
    ELSE            reduce using rule 41 (Block -> LBRACE StatementList RBRACE .)


state 254

    (39) ParameterDecl -> IdentifierList . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 310
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 255

    (40) ParameterDecl -> Type .

    COMMA           reduce using rule 40 (ParameterDecl -> Type .)
    RPAREN          reduce using rule 40 (ParameterDecl -> Type .)


state 256

    (37) ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .

    COMMA           reduce using rule 37 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)
    RPAREN          reduce using rule 37 (ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl .)


state 257

    (38) ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .

    COMMA           reduce using rule 38 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)
    RPAREN          reduce using rule 38 (ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl .)


state 258

    (131) ExpressionRep -> ExpressionRep COMMA . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 311
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 259

    (17) FieldDeclRep -> FieldDeclRep FieldDecl SEMICOL .

    RBRACE          reduce using rule 17 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOL .)
    IDENTIFIER      reduce using rule 17 (FieldDeclRep -> FieldDeclRep FieldDecl SEMICOL .)


state 260

    (19) FieldDecl -> IdentifierList Type . TagOpt
    (20) TagOpt -> . Tag
    (21) TagOpt -> . epsilon
    (22) Tag -> . STRING
    (83) epsilon -> .

    STRING          shift and go to state 312
    SEMICOL         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 313
    Tag                            shift and go to state 314
    TagOpt                         shift and go to state 315

state 261

    (122) Slice -> LBRACK ExpressionOpt COLON . ExpressionOpt RBRACK
    (123) Slice -> LBRACK ExpressionOpt COLON . Expression COLON Expression RBRACK
    (135) ExpressionOpt -> . Expression
    (136) ExpressionOpt -> . epsilon
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (83) epsilon -> .
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    RBRACK          reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    ExpressionOpt                  shift and go to state 316
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 210
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 317
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 262

    (121) Index -> LBRACK Expression RBRACK .

    DOT             reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LBRACK          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LPAREN          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    OROR            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    AMPAMP          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    EQEQ            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    NOTEQ           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LESS            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    GREAT           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LEQ             reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    GEQ             reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    PLUS            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    MINUS           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    OR              reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    CARET           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    TIMES           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    DIVIDE          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    MOD             reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    AMPERS          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LL              reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    GG              reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    AMPCAR          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    RBRACK          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    COMMA           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    SEMICOL         reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    RPAREN          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    COLON           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    PLUSPLUS        reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    MINUSMIN        reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    PLUSEQ          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    MINUSEQ         reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    TIMESEQ         reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    DIVIDEEQ        reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    MODEQ           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    AMPEQ           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    OREQ            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    CAREQ           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LLEQ            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    GGEQ            reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    EQUAL           reduce using rule 121 (Index -> LBRACK Expression RBRACK .)
    LBRACE          reduce using rule 121 (Index -> LBRACK Expression RBRACK .)


state 263

    (125) Arguments -> LPAREN ExpressionListTypeOpt RPAREN .

    DOT             reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LBRACK          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LPAREN          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    OROR            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AMPAMP          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    EQEQ            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    NOTEQ           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LESS            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    GREAT           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LEQ             reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    GEQ             reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    PLUS            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MINUS           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    OR              reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    CARET           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    TIMES           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    DIVIDE          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MOD             reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AMPERS          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LL              reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    GG              reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AMPCAR          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RBRACK          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    COMMA           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    SEMICOL         reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    RPAREN          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    COLON           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    PLUSPLUS        reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MINUSMIN        reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    PLUSEQ          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MINUSEQ         reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    TIMESEQ         reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    DIVIDEEQ        reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    MODEQ           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    AMPEQ           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    OREQ            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    CAREQ           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LLEQ            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    GGEQ            reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    EQUAL           reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)
    LBRACE          reduce using rule 125 (Arguments -> LPAREN ExpressionListTypeOpt RPAREN .)


state 264

    (124) TypeAssertion -> DOT LPAREN Type . RPAREN

    RPAREN          shift and go to state 318


state 265

    (112) Conversion -> Type LPAREN Expression RPAREN .

    DOT             reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LBRACK          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    OROR            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    AMPAMP          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    EQEQ            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    NOTEQ           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LESS            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    GREAT           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LEQ             reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    GEQ             reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    PLUS            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    MINUS           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    OR              reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    CARET           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    TIMES           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    DIVIDE          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    MOD             reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    AMPERS          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LL              reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    GG              reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    AMPCAR          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    RBRACK          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    COMMA           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    SEMICOL         reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    COLON           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    PLUSPLUS        reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    MINUSMIN        reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    PLUSEQ          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    MINUSEQ         reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    TIMESEQ         reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    DIVIDEEQ        reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    MODEQ           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    AMPEQ           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    OREQ            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    CAREQ           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LLEQ            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    GGEQ            reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    EQUAL           reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 112 (Conversion -> Type LPAREN Expression RPAREN .)


state 266

    (43) StatementRep -> StatementRep Statement SEMICOL .

    RETURN          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    BREAK           reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    CONTINUE        reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    GOTO            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    LBRACE          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    IF              reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    FOR             reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    CONST           reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    TYPE            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    VAR             reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    IDENTIFIER      reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    SWITCH          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    NOT             reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    PLUS            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    MINUS           reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    TIMES           reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    AMPERS          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    LPAREN          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    INTEGER         reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    FLOAT           reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    IMAGINARY       reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    RUNE            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    STRING          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    LBRACK          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    STRUCT          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    FUNC            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    SEMICOL         reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    RBRACE          reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    CASE            reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)
    DEFAULT         reduce using rule 43 (StatementRep -> StatementRep Statement SEMICOL .)


state 267

    (239) ReturnStmt -> RETURN ExpressionListPureOpt .

    SEMICOL         reduce using rule 239 (ReturnStmt -> RETURN ExpressionListPureOpt .)


state 268

    (241) ExpressionListPureOpt -> epsilon .

    SEMICOL         reduce using rule 241 (ExpressionListPureOpt -> epsilon .)


state 269

    (240) ExpressionListPureOpt -> ExpressionList .

    SEMICOL         reduce using rule 240 (ExpressionListPureOpt -> ExpressionList .)


state 270

    (182) LabeledStmt -> Label COLON . Statement
    (166) Statement -> . Declaration
    (167) Statement -> . LabeledStmt
    (168) Statement -> . SimpleStmt
    (169) Statement -> . ReturnStmt
    (170) Statement -> . BreakStmt
    (171) Statement -> . ContinueStmt
    (172) Statement -> . GotoStmt
    (173) Statement -> . Block
    (174) Statement -> . IfStmt
    (175) Statement -> . SwitchStmt
    (176) Statement -> . ForStmt
    (45) Declaration -> . ConstDecl
    (46) Declaration -> . TypeDecl
    (47) Declaration -> . VarDecl
    (182) LabeledStmt -> . Label COLON Statement
    (177) SimpleStmt -> . epsilon
    (178) SimpleStmt -> . ExpressionStmt
    (179) SimpleStmt -> . IncDecStmt
    (180) SimpleStmt -> . Assignment
    (181) SimpleStmt -> . ShortVarDecl
    (239) ReturnStmt -> . RETURN ExpressionListPureOpt
    (242) BreakStmt -> . BREAK LabelOpt
    (243) ContinueStmt -> . CONTINUE LabelOpt
    (246) GotoStmt -> . GOTO Label
    (41) Block -> . LBRACE StatementList RBRACE
    (200) IfStmt -> . IF Expression Block ElseOpt
    (206) SwitchStmt -> . ExprSwitchStmt
    (207) SwitchStmt -> . TypeSwitchStmt
    (226) ForStmt -> . FOR ConditionBlockOpt Block
    (50) ConstDecl -> . CONST ConstSpec
    (51) ConstDecl -> . CONST LPAREN ConstSpecRep RPAREN
    (60) TypeDecl -> . TYPE TypeSpec
    (61) TypeDecl -> . TYPE LPAREN TypeSpecRep RPAREN
    (68) VarDecl -> . VAR VarSpec
    (69) VarDecl -> . VAR LPAREN VarSpecRep RPAREN
    (183) Label -> . IDENTIFIER
    (83) epsilon -> .
    (184) ExpressionStmt -> . Expression
    (185) IncDecStmt -> . Expression PLUSPLUS
    (186) IncDecStmt -> . Expression MINUSMIN
    (187) Assignment -> . ExpressionList assign_op ExpressionList
    (76) ShortVarDecl -> . IDENTIFIER COLONEQ Expression
    (208) ExprSwitchStmt -> . SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE
    (214) TypeSwitchStmt -> . SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (130) ExpressionList -> . Expression ExpressionRep
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    RETURN          shift and go to state 229
    BREAK           shift and go to state 245
    CONTINUE        shift and go to state 238
    GOTO            shift and go to state 249
    LBRACE          shift and go to state 125
    IF              shift and go to state 251
    FOR             shift and go to state 235
    CONST           shift and go to state 14
    TYPE            shift and go to state 23
    VAR             shift and go to state 21
    IDENTIFIER      shift and go to state 241
    SEMICOL         reduce using rule 83 (epsilon -> .)
    SWITCH          shift and go to state 239
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    ContinueStmt                   shift and go to state 223
    Conversion                     shift and go to state 94
    SimpleStmt                     shift and go to state 247
    Label                          shift and go to state 230
    ExpressionStmt                 shift and go to state 224
    PointerType                    shift and go to state 66
    ForStmt                        shift and go to state 248
    ExprSwitchStmt                 shift and go to state 231
    Statement                      shift and go to state 319
    Type                           shift and go to state 100
    IfStmt                         shift and go to state 232
    OperandName                    shift and go to state 102
    ArrayType                      shift and go to state 53
    Assignment                     shift and go to state 226
    TypeName                       shift and go to state 56
    IncDecStmt                     shift and go to state 233
    Declaration                    shift and go to state 240
    FunctionType                   shift and go to state 67
    GotoStmt                       shift and go to state 234
    StructType                     shift and go to state 58
    TypeDecl                       shift and go to state 19
    LabeledStmt                    shift and go to state 227
    epsilon                        shift and go to state 242
    UnaryExpr                      shift and go to state 109
    Operand                        shift and go to state 98
    ExpressionList                 shift and go to state 243
    Literal                        shift and go to state 97
    Expression                     shift and go to state 244
    ShortVarDecl                   shift and go to state 250
    Block                          shift and go to state 236
    TypeSwitchStmt                 shift and go to state 228
    BreakStmt                      shift and go to state 252
    SwitchStmt                     shift and go to state 237
    VarDecl                        shift and go to state 22
    TypeLit                        shift and go to state 55
    BasicLit                       shift and go to state 103
    PrimaryExpr                    shift and go to state 96
    ReturnStmt                     shift and go to state 246
    ConstDecl                      shift and go to state 18
    QualifiedIdent                 shift and go to state 68

state 271

    (232) ForClause -> SimpleStmt . SEMICOL ConditionOpt SEMICOL SimpleStmt

    SEMICOL         shift and go to state 320


state 272

    (230) ConditionBlockOpt -> RangeClause .

    LBRACE          reduce using rule 230 (ConditionBlockOpt -> RangeClause .)


state 273

    (76) ShortVarDecl -> IDENTIFIER . COLONEQ Expression
    (93) OperandName -> IDENTIFIER .
    (5) TypeName -> IDENTIFIER .
    (82) QualifiedIdent -> IDENTIFIER . DOT TypeName

  ! reduce/reduce conflict for LPAREN resolved using rule 5 (TypeName -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    COLONEQ         shift and go to state 291
    LBRACK          reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSPLUS        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSMIN        reduce using rule 93 (OperandName -> IDENTIFIER .)
    OROR            reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPAMP          reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    NOTEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LESS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GREAT           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    GEQ             reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUS            reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUS           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OR              reduce using rule 93 (OperandName -> IDENTIFIER .)
    CARET           reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMES           reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MOD             reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPERS          reduce using rule 93 (OperandName -> IDENTIFIER .)
    LL              reduce using rule 93 (OperandName -> IDENTIFIER .)
    GG              reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPCAR          reduce using rule 93 (OperandName -> IDENTIFIER .)
    COMMA           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LBRACE          reduce using rule 93 (OperandName -> IDENTIFIER .)
    PLUSEQ          reduce using rule 93 (OperandName -> IDENTIFIER .)
    MINUSEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    TIMESEQ         reduce using rule 93 (OperandName -> IDENTIFIER .)
    DIVIDEEQ        reduce using rule 93 (OperandName -> IDENTIFIER .)
    MODEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    AMPEQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    OREQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    CAREQ           reduce using rule 93 (OperandName -> IDENTIFIER .)
    LLEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    GGEQ            reduce using rule 93 (OperandName -> IDENTIFIER .)
    EQUAL           reduce using rule 93 (OperandName -> IDENTIFIER .)
    SEMICOL         reduce using rule 93 (OperandName -> IDENTIFIER .)
    LPAREN          reduce using rule 5 (TypeName -> IDENTIFIER .)
    DOT             shift and go to state 88

  ! DOT             [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 93 (OperandName -> IDENTIFIER .) ]


state 274

    (228) ConditionBlockOpt -> Condition .

    LBRACE          reduce using rule 228 (ConditionBlockOpt -> Condition .)


state 275

    (227) ConditionBlockOpt -> epsilon .
    (177) SimpleStmt -> epsilon .
    (236) ExpressionIdentListOpt -> epsilon .

    LBRACE          reduce using rule 227 (ConditionBlockOpt -> epsilon .)
    SEMICOL         reduce using rule 177 (SimpleStmt -> epsilon .)
    RANGE           reduce using rule 236 (ExpressionIdentListOpt -> epsilon .)


state 276

    (226) ForStmt -> FOR ConditionBlockOpt . Block
    (41) Block -> . LBRACE StatementList RBRACE

    LBRACE          shift and go to state 125

    Block                          shift and go to state 321

state 277

    (235) RangeClause -> ExpressionIdentListOpt . RANGE Expression

    RANGE           shift and go to state 322


state 278

    (229) ConditionBlockOpt -> ForClause .

    LBRACE          reduce using rule 229 (ConditionBlockOpt -> ForClause .)


state 279

    (231) Condition -> Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (184) ExpressionStmt -> Expression .
    (185) IncDecStmt -> Expression . PLUSPLUS
    (186) IncDecStmt -> Expression . MINUSMIN
    (130) ExpressionList -> Expression . ExpressionRep
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (131) ExpressionRep -> . ExpressionRep COMMA Expression
    (132) ExpressionRep -> . epsilon
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR
    (83) epsilon -> .

    LBRACE          reduce using rule 231 (Condition -> Expression .)
    SEMICOL         reduce using rule 184 (ExpressionStmt -> Expression .)
    PLUSPLUS        shift and go to state 305
    MINUSMIN        shift and go to state 306
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170
    COMMA           reduce using rule 83 (epsilon -> .)
    EQUAL           reduce using rule 83 (epsilon -> .)
    PLUSEQ          reduce using rule 83 (epsilon -> .)
    MINUSEQ         reduce using rule 83 (epsilon -> .)
    TIMESEQ         reduce using rule 83 (epsilon -> .)
    DIVIDEEQ        reduce using rule 83 (epsilon -> .)
    MODEQ           reduce using rule 83 (epsilon -> .)
    AMPEQ           reduce using rule 83 (epsilon -> .)
    OREQ            reduce using rule 83 (epsilon -> .)
    CAREQ           reduce using rule 83 (epsilon -> .)
    LLEQ            reduce using rule 83 (epsilon -> .)
    GGEQ            reduce using rule 83 (epsilon -> .)

    AddOp                          shift and go to state 181
    ExpressionRep                  shift and go to state 202
    RelOp                          shift and go to state 185
    epsilon                        shift and go to state 203
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 280

    (187) Assignment -> ExpressionList . assign_op ExpressionList
    (238) ExpressionIdentifier -> ExpressionList . EQUAL
    (188) assign_op -> . AssignOp
    (189) AssignOp -> . PLUSEQ
    (190) AssignOp -> . MINUSEQ
    (191) AssignOp -> . TIMESEQ
    (192) AssignOp -> . DIVIDEEQ
    (193) AssignOp -> . MODEQ
    (194) AssignOp -> . AMPEQ
    (195) AssignOp -> . OREQ
    (196) AssignOp -> . CAREQ
    (197) AssignOp -> . LLEQ
    (198) AssignOp -> . GGEQ
    (199) AssignOp -> . EQUAL

    EQUAL           shift and go to state 323
    PLUSEQ          shift and go to state 296
    MINUSEQ         shift and go to state 301
    TIMESEQ         shift and go to state 295
    DIVIDEEQ        shift and go to state 304
    MODEQ           shift and go to state 297
    AMPEQ           shift and go to state 302
    OREQ            shift and go to state 300
    CAREQ           shift and go to state 294
    LLEQ            shift and go to state 299
    GGEQ            shift and go to state 298

    AssignOp                       shift and go to state 292
    assign_op                      shift and go to state 303

state 281

    (237) ExpressionIdentListOpt -> ExpressionIdentifier .

    RANGE           reduce using rule 237 (ExpressionIdentListOpt -> ExpressionIdentifier .)


state 282

    (245) LabelOpt -> epsilon .

    SEMICOL         reduce using rule 245 (LabelOpt -> epsilon .)


state 283

    (183) Label -> IDENTIFIER .

    SEMICOL         reduce using rule 183 (Label -> IDENTIFIER .)


state 284

    (243) ContinueStmt -> CONTINUE LabelOpt .

    SEMICOL         reduce using rule 243 (ContinueStmt -> CONTINUE LabelOpt .)


state 285

    (244) LabelOpt -> Label .

    SEMICOL         reduce using rule 244 (LabelOpt -> Label .)


state 286

    (201) SimpleStmtOpt -> SimpleStmt . SEMICOL

    SEMICOL         shift and go to state 324


state 287

    (208) ExprSwitchStmt -> SWITCH ExpressionOpt . LBRACE ExprCaseClauseRep RBRACE

    LBRACE          shift and go to state 325


state 288

    (136) ExpressionOpt -> epsilon .
    (202) SimpleStmtOpt -> epsilon .
    (177) SimpleStmt -> epsilon .

    LBRACE          reduce using rule 136 (ExpressionOpt -> epsilon .)
    IDENTIFIER      reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    LPAREN          reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    INTEGER         reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    FLOAT           reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    IMAGINARY       reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    RUNE            reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    STRING          reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    LBRACK          reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    STRUCT          reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    TIMES           reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    FUNC            reduce using rule 202 (SimpleStmtOpt -> epsilon .)
    SEMICOL         reduce using rule 177 (SimpleStmt -> epsilon .)


state 289

    (214) TypeSwitchStmt -> SWITCH SimpleStmtOpt . TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE
    (215) TypeSwitchGuard -> . IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN
    (216) IdentifierOpt -> . IDENTIFIER COLONEQ
    (217) IdentifierOpt -> . epsilon
    (83) epsilon -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 329
    LPAREN          reduce using rule 83 (epsilon -> .)
    INTEGER         reduce using rule 83 (epsilon -> .)
    FLOAT           reduce using rule 83 (epsilon -> .)
    IMAGINARY       reduce using rule 83 (epsilon -> .)
    RUNE            reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)

  ! IDENTIFIER      [ reduce using rule 83 (epsilon -> .) ]

    epsilon                        shift and go to state 326
    TypeSwitchGuard                shift and go to state 327
    IdentifierOpt                  shift and go to state 328

state 290

    (135) ExpressionOpt -> Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (184) ExpressionStmt -> Expression .
    (185) IncDecStmt -> Expression . PLUSPLUS
    (186) IncDecStmt -> Expression . MINUSMIN
    (130) ExpressionList -> Expression . ExpressionRep
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (131) ExpressionRep -> . ExpressionRep COMMA Expression
    (132) ExpressionRep -> . epsilon
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR
    (83) epsilon -> .

    LBRACE          reduce using rule 135 (ExpressionOpt -> Expression .)
    SEMICOL         reduce using rule 184 (ExpressionStmt -> Expression .)
    PLUSPLUS        shift and go to state 305
    MINUSMIN        shift and go to state 306
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170
    COMMA           reduce using rule 83 (epsilon -> .)
    PLUSEQ          reduce using rule 83 (epsilon -> .)
    MINUSEQ         reduce using rule 83 (epsilon -> .)
    TIMESEQ         reduce using rule 83 (epsilon -> .)
    DIVIDEEQ        reduce using rule 83 (epsilon -> .)
    MODEQ           reduce using rule 83 (epsilon -> .)
    AMPEQ           reduce using rule 83 (epsilon -> .)
    OREQ            reduce using rule 83 (epsilon -> .)
    CAREQ           reduce using rule 83 (epsilon -> .)
    LLEQ            reduce using rule 83 (epsilon -> .)
    GGEQ            reduce using rule 83 (epsilon -> .)
    EQUAL           reduce using rule 83 (epsilon -> .)

    AddOp                          shift and go to state 181
    ExpressionRep                  shift and go to state 202
    RelOp                          shift and go to state 185
    epsilon                        shift and go to state 203
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 291

    (76) ShortVarDecl -> IDENTIFIER COLONEQ . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 330
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 292

    (188) assign_op -> AssignOp .

    NOT             reduce using rule 188 (assign_op -> AssignOp .)
    PLUS            reduce using rule 188 (assign_op -> AssignOp .)
    MINUS           reduce using rule 188 (assign_op -> AssignOp .)
    TIMES           reduce using rule 188 (assign_op -> AssignOp .)
    AMPERS          reduce using rule 188 (assign_op -> AssignOp .)
    LPAREN          reduce using rule 188 (assign_op -> AssignOp .)
    IDENTIFIER      reduce using rule 188 (assign_op -> AssignOp .)
    INTEGER         reduce using rule 188 (assign_op -> AssignOp .)
    FLOAT           reduce using rule 188 (assign_op -> AssignOp .)
    IMAGINARY       reduce using rule 188 (assign_op -> AssignOp .)
    RUNE            reduce using rule 188 (assign_op -> AssignOp .)
    STRING          reduce using rule 188 (assign_op -> AssignOp .)
    LBRACK          reduce using rule 188 (assign_op -> AssignOp .)
    STRUCT          reduce using rule 188 (assign_op -> AssignOp .)
    FUNC            reduce using rule 188 (assign_op -> AssignOp .)


state 293

    (199) AssignOp -> EQUAL .

    NOT             reduce using rule 199 (AssignOp -> EQUAL .)
    PLUS            reduce using rule 199 (AssignOp -> EQUAL .)
    MINUS           reduce using rule 199 (AssignOp -> EQUAL .)
    TIMES           reduce using rule 199 (AssignOp -> EQUAL .)
    AMPERS          reduce using rule 199 (AssignOp -> EQUAL .)
    LPAREN          reduce using rule 199 (AssignOp -> EQUAL .)
    IDENTIFIER      reduce using rule 199 (AssignOp -> EQUAL .)
    INTEGER         reduce using rule 199 (AssignOp -> EQUAL .)
    FLOAT           reduce using rule 199 (AssignOp -> EQUAL .)
    IMAGINARY       reduce using rule 199 (AssignOp -> EQUAL .)
    RUNE            reduce using rule 199 (AssignOp -> EQUAL .)
    STRING          reduce using rule 199 (AssignOp -> EQUAL .)
    LBRACK          reduce using rule 199 (AssignOp -> EQUAL .)
    STRUCT          reduce using rule 199 (AssignOp -> EQUAL .)
    FUNC            reduce using rule 199 (AssignOp -> EQUAL .)


state 294

    (196) AssignOp -> CAREQ .

    NOT             reduce using rule 196 (AssignOp -> CAREQ .)
    PLUS            reduce using rule 196 (AssignOp -> CAREQ .)
    MINUS           reduce using rule 196 (AssignOp -> CAREQ .)
    TIMES           reduce using rule 196 (AssignOp -> CAREQ .)
    AMPERS          reduce using rule 196 (AssignOp -> CAREQ .)
    LPAREN          reduce using rule 196 (AssignOp -> CAREQ .)
    IDENTIFIER      reduce using rule 196 (AssignOp -> CAREQ .)
    INTEGER         reduce using rule 196 (AssignOp -> CAREQ .)
    FLOAT           reduce using rule 196 (AssignOp -> CAREQ .)
    IMAGINARY       reduce using rule 196 (AssignOp -> CAREQ .)
    RUNE            reduce using rule 196 (AssignOp -> CAREQ .)
    STRING          reduce using rule 196 (AssignOp -> CAREQ .)
    LBRACK          reduce using rule 196 (AssignOp -> CAREQ .)
    STRUCT          reduce using rule 196 (AssignOp -> CAREQ .)
    FUNC            reduce using rule 196 (AssignOp -> CAREQ .)


state 295

    (191) AssignOp -> TIMESEQ .

    NOT             reduce using rule 191 (AssignOp -> TIMESEQ .)
    PLUS            reduce using rule 191 (AssignOp -> TIMESEQ .)
    MINUS           reduce using rule 191 (AssignOp -> TIMESEQ .)
    TIMES           reduce using rule 191 (AssignOp -> TIMESEQ .)
    AMPERS          reduce using rule 191 (AssignOp -> TIMESEQ .)
    LPAREN          reduce using rule 191 (AssignOp -> TIMESEQ .)
    IDENTIFIER      reduce using rule 191 (AssignOp -> TIMESEQ .)
    INTEGER         reduce using rule 191 (AssignOp -> TIMESEQ .)
    FLOAT           reduce using rule 191 (AssignOp -> TIMESEQ .)
    IMAGINARY       reduce using rule 191 (AssignOp -> TIMESEQ .)
    RUNE            reduce using rule 191 (AssignOp -> TIMESEQ .)
    STRING          reduce using rule 191 (AssignOp -> TIMESEQ .)
    LBRACK          reduce using rule 191 (AssignOp -> TIMESEQ .)
    STRUCT          reduce using rule 191 (AssignOp -> TIMESEQ .)
    FUNC            reduce using rule 191 (AssignOp -> TIMESEQ .)


state 296

    (189) AssignOp -> PLUSEQ .

    NOT             reduce using rule 189 (AssignOp -> PLUSEQ .)
    PLUS            reduce using rule 189 (AssignOp -> PLUSEQ .)
    MINUS           reduce using rule 189 (AssignOp -> PLUSEQ .)
    TIMES           reduce using rule 189 (AssignOp -> PLUSEQ .)
    AMPERS          reduce using rule 189 (AssignOp -> PLUSEQ .)
    LPAREN          reduce using rule 189 (AssignOp -> PLUSEQ .)
    IDENTIFIER      reduce using rule 189 (AssignOp -> PLUSEQ .)
    INTEGER         reduce using rule 189 (AssignOp -> PLUSEQ .)
    FLOAT           reduce using rule 189 (AssignOp -> PLUSEQ .)
    IMAGINARY       reduce using rule 189 (AssignOp -> PLUSEQ .)
    RUNE            reduce using rule 189 (AssignOp -> PLUSEQ .)
    STRING          reduce using rule 189 (AssignOp -> PLUSEQ .)
    LBRACK          reduce using rule 189 (AssignOp -> PLUSEQ .)
    STRUCT          reduce using rule 189 (AssignOp -> PLUSEQ .)
    FUNC            reduce using rule 189 (AssignOp -> PLUSEQ .)


state 297

    (193) AssignOp -> MODEQ .

    NOT             reduce using rule 193 (AssignOp -> MODEQ .)
    PLUS            reduce using rule 193 (AssignOp -> MODEQ .)
    MINUS           reduce using rule 193 (AssignOp -> MODEQ .)
    TIMES           reduce using rule 193 (AssignOp -> MODEQ .)
    AMPERS          reduce using rule 193 (AssignOp -> MODEQ .)
    LPAREN          reduce using rule 193 (AssignOp -> MODEQ .)
    IDENTIFIER      reduce using rule 193 (AssignOp -> MODEQ .)
    INTEGER         reduce using rule 193 (AssignOp -> MODEQ .)
    FLOAT           reduce using rule 193 (AssignOp -> MODEQ .)
    IMAGINARY       reduce using rule 193 (AssignOp -> MODEQ .)
    RUNE            reduce using rule 193 (AssignOp -> MODEQ .)
    STRING          reduce using rule 193 (AssignOp -> MODEQ .)
    LBRACK          reduce using rule 193 (AssignOp -> MODEQ .)
    STRUCT          reduce using rule 193 (AssignOp -> MODEQ .)
    FUNC            reduce using rule 193 (AssignOp -> MODEQ .)


state 298

    (198) AssignOp -> GGEQ .

    NOT             reduce using rule 198 (AssignOp -> GGEQ .)
    PLUS            reduce using rule 198 (AssignOp -> GGEQ .)
    MINUS           reduce using rule 198 (AssignOp -> GGEQ .)
    TIMES           reduce using rule 198 (AssignOp -> GGEQ .)
    AMPERS          reduce using rule 198 (AssignOp -> GGEQ .)
    LPAREN          reduce using rule 198 (AssignOp -> GGEQ .)
    IDENTIFIER      reduce using rule 198 (AssignOp -> GGEQ .)
    INTEGER         reduce using rule 198 (AssignOp -> GGEQ .)
    FLOAT           reduce using rule 198 (AssignOp -> GGEQ .)
    IMAGINARY       reduce using rule 198 (AssignOp -> GGEQ .)
    RUNE            reduce using rule 198 (AssignOp -> GGEQ .)
    STRING          reduce using rule 198 (AssignOp -> GGEQ .)
    LBRACK          reduce using rule 198 (AssignOp -> GGEQ .)
    STRUCT          reduce using rule 198 (AssignOp -> GGEQ .)
    FUNC            reduce using rule 198 (AssignOp -> GGEQ .)


state 299

    (197) AssignOp -> LLEQ .

    NOT             reduce using rule 197 (AssignOp -> LLEQ .)
    PLUS            reduce using rule 197 (AssignOp -> LLEQ .)
    MINUS           reduce using rule 197 (AssignOp -> LLEQ .)
    TIMES           reduce using rule 197 (AssignOp -> LLEQ .)
    AMPERS          reduce using rule 197 (AssignOp -> LLEQ .)
    LPAREN          reduce using rule 197 (AssignOp -> LLEQ .)
    IDENTIFIER      reduce using rule 197 (AssignOp -> LLEQ .)
    INTEGER         reduce using rule 197 (AssignOp -> LLEQ .)
    FLOAT           reduce using rule 197 (AssignOp -> LLEQ .)
    IMAGINARY       reduce using rule 197 (AssignOp -> LLEQ .)
    RUNE            reduce using rule 197 (AssignOp -> LLEQ .)
    STRING          reduce using rule 197 (AssignOp -> LLEQ .)
    LBRACK          reduce using rule 197 (AssignOp -> LLEQ .)
    STRUCT          reduce using rule 197 (AssignOp -> LLEQ .)
    FUNC            reduce using rule 197 (AssignOp -> LLEQ .)


state 300

    (195) AssignOp -> OREQ .

    NOT             reduce using rule 195 (AssignOp -> OREQ .)
    PLUS            reduce using rule 195 (AssignOp -> OREQ .)
    MINUS           reduce using rule 195 (AssignOp -> OREQ .)
    TIMES           reduce using rule 195 (AssignOp -> OREQ .)
    AMPERS          reduce using rule 195 (AssignOp -> OREQ .)
    LPAREN          reduce using rule 195 (AssignOp -> OREQ .)
    IDENTIFIER      reduce using rule 195 (AssignOp -> OREQ .)
    INTEGER         reduce using rule 195 (AssignOp -> OREQ .)
    FLOAT           reduce using rule 195 (AssignOp -> OREQ .)
    IMAGINARY       reduce using rule 195 (AssignOp -> OREQ .)
    RUNE            reduce using rule 195 (AssignOp -> OREQ .)
    STRING          reduce using rule 195 (AssignOp -> OREQ .)
    LBRACK          reduce using rule 195 (AssignOp -> OREQ .)
    STRUCT          reduce using rule 195 (AssignOp -> OREQ .)
    FUNC            reduce using rule 195 (AssignOp -> OREQ .)


state 301

    (190) AssignOp -> MINUSEQ .

    NOT             reduce using rule 190 (AssignOp -> MINUSEQ .)
    PLUS            reduce using rule 190 (AssignOp -> MINUSEQ .)
    MINUS           reduce using rule 190 (AssignOp -> MINUSEQ .)
    TIMES           reduce using rule 190 (AssignOp -> MINUSEQ .)
    AMPERS          reduce using rule 190 (AssignOp -> MINUSEQ .)
    LPAREN          reduce using rule 190 (AssignOp -> MINUSEQ .)
    IDENTIFIER      reduce using rule 190 (AssignOp -> MINUSEQ .)
    INTEGER         reduce using rule 190 (AssignOp -> MINUSEQ .)
    FLOAT           reduce using rule 190 (AssignOp -> MINUSEQ .)
    IMAGINARY       reduce using rule 190 (AssignOp -> MINUSEQ .)
    RUNE            reduce using rule 190 (AssignOp -> MINUSEQ .)
    STRING          reduce using rule 190 (AssignOp -> MINUSEQ .)
    LBRACK          reduce using rule 190 (AssignOp -> MINUSEQ .)
    STRUCT          reduce using rule 190 (AssignOp -> MINUSEQ .)
    FUNC            reduce using rule 190 (AssignOp -> MINUSEQ .)


state 302

    (194) AssignOp -> AMPEQ .

    NOT             reduce using rule 194 (AssignOp -> AMPEQ .)
    PLUS            reduce using rule 194 (AssignOp -> AMPEQ .)
    MINUS           reduce using rule 194 (AssignOp -> AMPEQ .)
    TIMES           reduce using rule 194 (AssignOp -> AMPEQ .)
    AMPERS          reduce using rule 194 (AssignOp -> AMPEQ .)
    LPAREN          reduce using rule 194 (AssignOp -> AMPEQ .)
    IDENTIFIER      reduce using rule 194 (AssignOp -> AMPEQ .)
    INTEGER         reduce using rule 194 (AssignOp -> AMPEQ .)
    FLOAT           reduce using rule 194 (AssignOp -> AMPEQ .)
    IMAGINARY       reduce using rule 194 (AssignOp -> AMPEQ .)
    RUNE            reduce using rule 194 (AssignOp -> AMPEQ .)
    STRING          reduce using rule 194 (AssignOp -> AMPEQ .)
    LBRACK          reduce using rule 194 (AssignOp -> AMPEQ .)
    STRUCT          reduce using rule 194 (AssignOp -> AMPEQ .)
    FUNC            reduce using rule 194 (AssignOp -> AMPEQ .)


state 303

    (187) Assignment -> ExpressionList assign_op . ExpressionList
    (130) ExpressionList -> . Expression ExpressionRep
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 331
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 304

    (192) AssignOp -> DIVIDEEQ .

    NOT             reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    PLUS            reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    MINUS           reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    TIMES           reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    AMPERS          reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    LPAREN          reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    IDENTIFIER      reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    INTEGER         reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    FLOAT           reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    IMAGINARY       reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    RUNE            reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    STRING          reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    LBRACK          reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    STRUCT          reduce using rule 192 (AssignOp -> DIVIDEEQ .)
    FUNC            reduce using rule 192 (AssignOp -> DIVIDEEQ .)


state 305

    (185) IncDecStmt -> Expression PLUSPLUS .

    SEMICOL         reduce using rule 185 (IncDecStmt -> Expression PLUSPLUS .)
    LBRACE          reduce using rule 185 (IncDecStmt -> Expression PLUSPLUS .)


state 306

    (186) IncDecStmt -> Expression MINUSMIN .

    SEMICOL         reduce using rule 186 (IncDecStmt -> Expression MINUSMIN .)
    LBRACE          reduce using rule 186 (IncDecStmt -> Expression MINUSMIN .)


state 307

    (242) BreakStmt -> BREAK LabelOpt .

    SEMICOL         reduce using rule 242 (BreakStmt -> BREAK LabelOpt .)


state 308

    (246) GotoStmt -> GOTO Label .

    SEMICOL         reduce using rule 246 (GotoStmt -> GOTO Label .)


state 309

    (200) IfStmt -> IF Expression . Block ElseOpt
    (134) Expression -> Expression . BinaryOp Expression
    (41) Block -> . LBRACE StatementList RBRACE
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    LBRACE          shift and go to state 125
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174
    Block                          shift and go to state 332

state 310

    (39) ParameterDecl -> IdentifierList Type .

    COMMA           reduce using rule 39 (ParameterDecl -> IdentifierList Type .)
    RPAREN          reduce using rule 39 (ParameterDecl -> IdentifierList Type .)


state 311

    (131) ExpressionRep -> ExpressionRep COMMA Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    COMMA           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    EQUAL           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    PLUSEQ          reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MINUSEQ         reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    TIMESEQ         reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    DIVIDEEQ        reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    MODEQ           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    AMPEQ           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    OREQ            reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    CAREQ           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LLEQ            reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    GGEQ            reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    SEMICOL         reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    RPAREN          reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    LBRACE          reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    COLON           reduce using rule 131 (ExpressionRep -> ExpressionRep COMMA Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 312

    (22) Tag -> STRING .

    SEMICOL         reduce using rule 22 (Tag -> STRING .)


state 313

    (21) TagOpt -> epsilon .

    SEMICOL         reduce using rule 21 (TagOpt -> epsilon .)


state 314

    (20) TagOpt -> Tag .

    SEMICOL         reduce using rule 20 (TagOpt -> Tag .)


state 315

    (19) FieldDecl -> IdentifierList Type TagOpt .

    SEMICOL         reduce using rule 19 (FieldDecl -> IdentifierList Type TagOpt .)


state 316

    (122) Slice -> LBRACK ExpressionOpt COLON ExpressionOpt . RBRACK

    RBRACK          shift and go to state 333


state 317

    (123) Slice -> LBRACK ExpressionOpt COLON Expression . COLON Expression RBRACK
    (135) ExpressionOpt -> Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    COLON           shift and go to state 334
    RBRACK          reduce using rule 135 (ExpressionOpt -> Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 318

    (124) TypeAssertion -> DOT LPAREN Type RPAREN .

    DOT             reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LBRACK          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LPAREN          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    OROR            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    AMPAMP          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    EQEQ            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    NOTEQ           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LESS            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    GREAT           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LEQ             reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    GEQ             reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    PLUS            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    MINUS           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    OR              reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    CARET           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    TIMES           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    DIVIDE          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    MOD             reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    AMPERS          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LL              reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    GG              reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    AMPCAR          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    RBRACK          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    COMMA           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    SEMICOL         reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    RPAREN          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    COLON           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    PLUSPLUS        reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    MINUSMIN        reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    PLUSEQ          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    MINUSEQ         reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    TIMESEQ         reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    DIVIDEEQ        reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    MODEQ           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    AMPEQ           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    OREQ            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    CAREQ           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LLEQ            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    GGEQ            reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    EQUAL           reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)
    LBRACE          reduce using rule 124 (TypeAssertion -> DOT LPAREN Type RPAREN .)


state 319

    (182) LabeledStmt -> Label COLON Statement .

    SEMICOL         reduce using rule 182 (LabeledStmt -> Label COLON Statement .)


state 320

    (232) ForClause -> SimpleStmt SEMICOL . ConditionOpt SEMICOL SimpleStmt
    (233) ConditionOpt -> . epsilon
    (234) ConditionOpt -> . Condition
    (83) epsilon -> .
    (231) Condition -> . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    SEMICOL         reduce using rule 83 (epsilon -> .)
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    Condition                      shift and go to state 335
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 336
    UnaryExpr                      shift and go to state 109
    ConditionOpt                   shift and go to state 337
    ArrayType                      shift and go to state 53
    Expression                     shift and go to state 338
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 321

    (226) ForStmt -> FOR ConditionBlockOpt Block .

    SEMICOL         reduce using rule 226 (ForStmt -> FOR ConditionBlockOpt Block .)


state 322

    (235) RangeClause -> ExpressionIdentListOpt RANGE . Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Operand                        shift and go to state 98
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 339
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    PrimaryExpr                    shift and go to state 96
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 323

    (238) ExpressionIdentifier -> ExpressionList EQUAL .
    (199) AssignOp -> EQUAL .

    RANGE           reduce using rule 238 (ExpressionIdentifier -> ExpressionList EQUAL .)
    NOT             reduce using rule 199 (AssignOp -> EQUAL .)
    PLUS            reduce using rule 199 (AssignOp -> EQUAL .)
    MINUS           reduce using rule 199 (AssignOp -> EQUAL .)
    TIMES           reduce using rule 199 (AssignOp -> EQUAL .)
    AMPERS          reduce using rule 199 (AssignOp -> EQUAL .)
    LPAREN          reduce using rule 199 (AssignOp -> EQUAL .)
    IDENTIFIER      reduce using rule 199 (AssignOp -> EQUAL .)
    INTEGER         reduce using rule 199 (AssignOp -> EQUAL .)
    FLOAT           reduce using rule 199 (AssignOp -> EQUAL .)
    IMAGINARY       reduce using rule 199 (AssignOp -> EQUAL .)
    RUNE            reduce using rule 199 (AssignOp -> EQUAL .)
    STRING          reduce using rule 199 (AssignOp -> EQUAL .)
    LBRACK          reduce using rule 199 (AssignOp -> EQUAL .)
    STRUCT          reduce using rule 199 (AssignOp -> EQUAL .)
    FUNC            reduce using rule 199 (AssignOp -> EQUAL .)


state 324

    (201) SimpleStmtOpt -> SimpleStmt SEMICOL .

    IDENTIFIER      reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    LPAREN          reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    INTEGER         reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    FLOAT           reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    IMAGINARY       reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    RUNE            reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    STRING          reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    LBRACK          reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    STRUCT          reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    TIMES           reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)
    FUNC            reduce using rule 201 (SimpleStmtOpt -> SimpleStmt SEMICOL .)


state 325

    (208) ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE . ExprCaseClauseRep RBRACE
    (209) ExprCaseClauseRep -> . ExprCaseClauseRep ExprCaseClause
    (210) ExprCaseClauseRep -> . epsilon
    (83) epsilon -> .

    RBRACE          reduce using rule 83 (epsilon -> .)
    CASE            reduce using rule 83 (epsilon -> .)
    DEFAULT         reduce using rule 83 (epsilon -> .)

    ExprCaseClauseRep              shift and go to state 341
    epsilon                        shift and go to state 340

state 326

    (217) IdentifierOpt -> epsilon .

    LPAREN          reduce using rule 217 (IdentifierOpt -> epsilon .)
    IDENTIFIER      reduce using rule 217 (IdentifierOpt -> epsilon .)
    INTEGER         reduce using rule 217 (IdentifierOpt -> epsilon .)
    FLOAT           reduce using rule 217 (IdentifierOpt -> epsilon .)
    IMAGINARY       reduce using rule 217 (IdentifierOpt -> epsilon .)
    RUNE            reduce using rule 217 (IdentifierOpt -> epsilon .)
    STRING          reduce using rule 217 (IdentifierOpt -> epsilon .)
    LBRACK          reduce using rule 217 (IdentifierOpt -> epsilon .)
    STRUCT          reduce using rule 217 (IdentifierOpt -> epsilon .)
    TIMES           reduce using rule 217 (IdentifierOpt -> epsilon .)
    FUNC            reduce using rule 217 (IdentifierOpt -> epsilon .)


state 327

    (214) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard . LBRACE TypeCaseClauseOpt RBRACE

    LBRACE          shift and go to state 342


state 328

    (215) TypeSwitchGuard -> IdentifierOpt . PrimaryExpr DOT LPAREN TYPE RPAREN
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    PrimaryExpr                    shift and go to state 343
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    TypeLit                        shift and go to state 55
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    PointerType                    shift and go to state 66
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 329

    (216) IdentifierOpt -> IDENTIFIER . COLONEQ

    COLONEQ         shift and go to state 344


state 330

    (76) ShortVarDecl -> IDENTIFIER COLONEQ Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    SEMICOL         reduce using rule 76 (ShortVarDecl -> IDENTIFIER COLONEQ Expression .)
    LBRACE          reduce using rule 76 (ShortVarDecl -> IDENTIFIER COLONEQ Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 331

    (187) Assignment -> ExpressionList assign_op ExpressionList .

    LBRACE          reduce using rule 187 (Assignment -> ExpressionList assign_op ExpressionList .)
    SEMICOL         reduce using rule 187 (Assignment -> ExpressionList assign_op ExpressionList .)


state 332

    (200) IfStmt -> IF Expression Block . ElseOpt
    (203) ElseOpt -> . ELSE IfStmt
    (204) ElseOpt -> . ELSE Block
    (205) ElseOpt -> . epsilon
    (83) epsilon -> .

    ELSE            shift and go to state 346
    SEMICOL         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 345
    ElseOpt                        shift and go to state 347

state 333

    (122) Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .

    DOT             reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LBRACK          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LPAREN          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    OROR            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    AMPAMP          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    EQEQ            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    NOTEQ           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LESS            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    GREAT           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LEQ             reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    GEQ             reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    PLUS            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    MINUS           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    OR              reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    CARET           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    TIMES           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    DIVIDE          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    MOD             reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    AMPERS          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LL              reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    GG              reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    AMPCAR          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    RBRACK          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    COMMA           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    SEMICOL         reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    RPAREN          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    COLON           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    PLUSPLUS        reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    MINUSMIN        reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    PLUSEQ          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    MINUSEQ         reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    TIMESEQ         reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    DIVIDEEQ        reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    MODEQ           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    AMPEQ           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    OREQ            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    CAREQ           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LLEQ            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    GGEQ            reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    EQUAL           reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)
    LBRACE          reduce using rule 122 (Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK .)


state 334

    (123) Slice -> LBRACK ExpressionOpt COLON Expression COLON . Expression RBRACK
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    Conversion                     shift and go to state 94
    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    Expression                     shift and go to state 348
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 335

    (234) ConditionOpt -> Condition .

    SEMICOL         reduce using rule 234 (ConditionOpt -> Condition .)


state 336

    (233) ConditionOpt -> epsilon .

    SEMICOL         reduce using rule 233 (ConditionOpt -> epsilon .)


state 337

    (232) ForClause -> SimpleStmt SEMICOL ConditionOpt . SEMICOL SimpleStmt

    SEMICOL         shift and go to state 349


state 338

    (231) Condition -> Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    SEMICOL         reduce using rule 231 (Condition -> Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    MulOp                          shift and go to state 174
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180

state 339

    (235) RangeClause -> ExpressionIdentListOpt RANGE Expression .
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    LBRACE          reduce using rule 235 (RangeClause -> ExpressionIdentListOpt RANGE Expression .)
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 340

    (210) ExprCaseClauseRep -> epsilon .

    RBRACE          reduce using rule 210 (ExprCaseClauseRep -> epsilon .)
    CASE            reduce using rule 210 (ExprCaseClauseRep -> epsilon .)
    DEFAULT         reduce using rule 210 (ExprCaseClauseRep -> epsilon .)


state 341

    (208) ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE ExprCaseClauseRep . RBRACE
    (209) ExprCaseClauseRep -> ExprCaseClauseRep . ExprCaseClause
    (211) ExprCaseClause -> . ExprSwitchCase COLON StatementList
    (212) ExprSwitchCase -> . CASE ExpressionList
    (213) ExprSwitchCase -> . DEFAULT

    RBRACE          shift and go to state 351
    CASE            shift and go to state 350
    DEFAULT         shift and go to state 353

    ExprSwitchCase                 shift and go to state 352
    ExprCaseClause                 shift and go to state 354

state 342

    (214) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE . TypeCaseClauseOpt RBRACE
    (218) TypeCaseClauseOpt -> . TypeCaseClauseOpt TypeCaseClause
    (219) TypeCaseClauseOpt -> . epsilon
    (83) epsilon -> .

    RBRACE          reduce using rule 83 (epsilon -> .)
    CASE            reduce using rule 83 (epsilon -> .)
    DEFAULT         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 355
    TypeCaseClauseOpt              shift and go to state 356

state 343

    (215) TypeSwitchGuard -> IdentifierOpt PrimaryExpr . DOT LPAREN TYPE RPAREN
    (115) PrimaryExpr -> PrimaryExpr . Selector
    (116) PrimaryExpr -> PrimaryExpr . Index
    (117) PrimaryExpr -> PrimaryExpr . Slice
    (118) PrimaryExpr -> PrimaryExpr . TypeAssertion
    (119) PrimaryExpr -> PrimaryExpr . Arguments
    (120) Selector -> . DOT IDENTIFIER
    (121) Index -> . LBRACK Expression RBRACK
    (122) Slice -> . LBRACK ExpressionOpt COLON ExpressionOpt RBRACK
    (123) Slice -> . LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK
    (124) TypeAssertion -> . DOT LPAREN Type RPAREN
    (125) Arguments -> . LPAREN ExpressionListTypeOpt RPAREN

    DOT             shift and go to state 357
    LBRACK          shift and go to state 155
    LPAREN          shift and go to state 159

    Index                          shift and go to state 153
    Slice                          shift and go to state 154
    Selector                       shift and go to state 156
    TypeAssertion                  shift and go to state 157
    Arguments                      shift and go to state 158

state 344

    (216) IdentifierOpt -> IDENTIFIER COLONEQ .

    LPAREN          reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    IDENTIFIER      reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    INTEGER         reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    FLOAT           reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    IMAGINARY       reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    RUNE            reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    STRING          reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    LBRACK          reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    STRUCT          reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    TIMES           reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)
    FUNC            reduce using rule 216 (IdentifierOpt -> IDENTIFIER COLONEQ .)


state 345

    (205) ElseOpt -> epsilon .

    SEMICOL         reduce using rule 205 (ElseOpt -> epsilon .)


state 346

    (203) ElseOpt -> ELSE . IfStmt
    (204) ElseOpt -> ELSE . Block
    (200) IfStmt -> . IF Expression Block ElseOpt
    (41) Block -> . LBRACE StatementList RBRACE

    IF              shift and go to state 251
    LBRACE          shift and go to state 125

    IfStmt                         shift and go to state 358
    Block                          shift and go to state 359

state 347

    (200) IfStmt -> IF Expression Block ElseOpt .

    SEMICOL         reduce using rule 200 (IfStmt -> IF Expression Block ElseOpt .)


state 348

    (123) Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression . RBRACK
    (134) Expression -> Expression . BinaryOp Expression
    (140) BinaryOp -> . OROR
    (141) BinaryOp -> . AMPAMP
    (142) BinaryOp -> . RelOp
    (143) BinaryOp -> . AddOp
    (144) BinaryOp -> . MulOp
    (145) RelOp -> . EQEQ
    (146) RelOp -> . NOTEQ
    (147) RelOp -> . LESS
    (148) RelOp -> . GREAT
    (149) RelOp -> . LEQ
    (150) RelOp -> . GEQ
    (151) AddOp -> . PLUS
    (152) AddOp -> . MINUS
    (153) AddOp -> . OR
    (154) AddOp -> . CARET
    (155) MulOp -> . TIMES
    (156) MulOp -> . DIVIDE
    (157) MulOp -> . MOD
    (158) MulOp -> . AMPERS
    (159) MulOp -> . LL
    (160) MulOp -> . GG
    (161) MulOp -> . AMPCAR

    RBRACK          shift and go to state 360
    OROR            shift and go to state 167
    AMPAMP          shift and go to state 173
    EQEQ            shift and go to state 172
    NOTEQ           shift and go to state 178
    LESS            shift and go to state 171
    GREAT           shift and go to state 169
    LEQ             shift and go to state 187
    GEQ             shift and go to state 176
    PLUS            shift and go to state 179
    MINUS           shift and go to state 175
    OR              shift and go to state 188
    CARET           shift and go to state 168
    TIMES           shift and go to state 183
    DIVIDE          shift and go to state 182
    MOD             shift and go to state 189
    AMPERS          shift and go to state 186
    LL              shift and go to state 177
    GG              shift and go to state 184
    AMPCAR          shift and go to state 170

    AddOp                          shift and go to state 181
    RelOp                          shift and go to state 185
    BinaryOp                       shift and go to state 180
    MulOp                          shift and go to state 174

state 349

    (232) ForClause -> SimpleStmt SEMICOL ConditionOpt SEMICOL . SimpleStmt
    (177) SimpleStmt -> . epsilon
    (178) SimpleStmt -> . ExpressionStmt
    (179) SimpleStmt -> . IncDecStmt
    (180) SimpleStmt -> . Assignment
    (181) SimpleStmt -> . ShortVarDecl
    (83) epsilon -> .
    (184) ExpressionStmt -> . Expression
    (185) IncDecStmt -> . Expression PLUSPLUS
    (186) IncDecStmt -> . Expression MINUSMIN
    (187) Assignment -> . ExpressionList assign_op ExpressionList
    (76) ShortVarDecl -> . IDENTIFIER COLONEQ Expression
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (130) ExpressionList -> . Expression ExpressionRep
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LBRACE          reduce using rule 83 (epsilon -> .)
    IDENTIFIER      shift and go to state 273
    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    SimpleStmt                     shift and go to state 361
    ExpressionStmt                 shift and go to state 224
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    Assignment                     shift and go to state 226
    TypeName                       shift and go to state 56
    IncDecStmt                     shift and go to state 233
    StructType                     shift and go to state 58
    epsilon                        shift and go to state 242
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 243
    ArrayType                      shift and go to state 53
    Expression                     shift and go to state 244
    ShortVarDecl                   shift and go to state 250
    PointerType                    shift and go to state 66
    Literal                        shift and go to state 97
    TypeLit                        shift and go to state 55
    BasicLit                       shift and go to state 103
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 350

    (212) ExprSwitchCase -> CASE . ExpressionList
    (130) ExpressionList -> . Expression ExpressionRep
    (133) Expression -> . UnaryExpr
    (134) Expression -> . Expression BinaryOp Expression
    (137) UnaryExpr -> . PrimaryExpr
    (138) UnaryExpr -> . UnaryOp UnaryExpr
    (139) UnaryExpr -> . NOT UnaryExpr
    (113) PrimaryExpr -> . Operand
    (114) PrimaryExpr -> . Conversion
    (115) PrimaryExpr -> . PrimaryExpr Selector
    (116) PrimaryExpr -> . PrimaryExpr Index
    (117) PrimaryExpr -> . PrimaryExpr Slice
    (118) PrimaryExpr -> . PrimaryExpr TypeAssertion
    (119) PrimaryExpr -> . PrimaryExpr Arguments
    (162) UnaryOp -> . PLUS
    (163) UnaryOp -> . MINUS
    (164) UnaryOp -> . TIMES
    (165) UnaryOp -> . AMPERS
    (84) Operand -> . Literal
    (85) Operand -> . OperandName
    (86) Operand -> . LPAREN Expression RPAREN
    (112) Conversion -> . Type LPAREN Expression RPAREN
    (87) Literal -> . BasicLit
    (93) OperandName -> . IDENTIFIER
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (88) BasicLit -> . INTEGER
    (89) BasicLit -> . FLOAT
    (90) BasicLit -> . IMAGINARY
    (91) BasicLit -> . RUNE
    (92) BasicLit -> . STRING
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    NOT             shift and go to state 116
    PLUS            shift and go to state 104
    MINUS           shift and go to state 101
    TIMES           shift and go to state 110
    AMPERS          shift and go to state 115
    LPAREN          shift and go to state 112
    IDENTIFIER      shift and go to state 107
    INTEGER         shift and go to state 105
    FLOAT           shift and go to state 114
    IMAGINARY       shift and go to state 106
    RUNE            shift and go to state 99
    STRING          shift and go to state 108
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    FUNC            shift and go to state 52

    UnaryOp                        shift and go to state 95
    PrimaryExpr                    shift and go to state 96
    Conversion                     shift and go to state 94
    ArrayType                      shift and go to state 53
    Literal                        shift and go to state 97
    Type                           shift and go to state 100
    OperandName                    shift and go to state 102
    BasicLit                       shift and go to state 103
    TypeName                       shift and go to state 56
    StructType                     shift and go to state 58
    UnaryExpr                      shift and go to state 109
    ExpressionList                 shift and go to state 362
    Expression                     shift and go to state 138
    PointerType                    shift and go to state 66
    TypeLit                        shift and go to state 55
    Operand                        shift and go to state 98
    FunctionType                   shift and go to state 67
    QualifiedIdent                 shift and go to state 68

state 351

    (208) ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE .

    SEMICOL         reduce using rule 208 (ExprSwitchStmt -> SWITCH ExpressionOpt LBRACE ExprCaseClauseRep RBRACE .)


state 352

    (211) ExprCaseClause -> ExprSwitchCase . COLON StatementList

    COLON           shift and go to state 363


state 353

    (213) ExprSwitchCase -> DEFAULT .

    COLON           reduce using rule 213 (ExprSwitchCase -> DEFAULT .)


state 354

    (209) ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .

    RBRACE          reduce using rule 209 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    CASE            reduce using rule 209 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)
    DEFAULT         reduce using rule 209 (ExprCaseClauseRep -> ExprCaseClauseRep ExprCaseClause .)


state 355

    (219) TypeCaseClauseOpt -> epsilon .

    RBRACE          reduce using rule 219 (TypeCaseClauseOpt -> epsilon .)
    CASE            reduce using rule 219 (TypeCaseClauseOpt -> epsilon .)
    DEFAULT         reduce using rule 219 (TypeCaseClauseOpt -> epsilon .)


state 356

    (214) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt . RBRACE
    (218) TypeCaseClauseOpt -> TypeCaseClauseOpt . TypeCaseClause
    (220) TypeCaseClause -> . TypeSwitchCase COLON StatementList
    (221) TypeSwitchCase -> . CASE TypeList
    (222) TypeSwitchCase -> . DEFAULT

    RBRACE          shift and go to state 365
    CASE            shift and go to state 364
    DEFAULT         shift and go to state 368

    TypeSwitchCase                 shift and go to state 366
    TypeCaseClause                 shift and go to state 367

state 357

    (215) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT . LPAREN TYPE RPAREN
    (120) Selector -> DOT . IDENTIFIER
    (124) TypeAssertion -> DOT . LPAREN Type RPAREN

    LPAREN          shift and go to state 369
    IDENTIFIER      shift and go to state 215


state 358

    (203) ElseOpt -> ELSE IfStmt .

    SEMICOL         reduce using rule 203 (ElseOpt -> ELSE IfStmt .)


state 359

    (204) ElseOpt -> ELSE Block .

    SEMICOL         reduce using rule 204 (ElseOpt -> ELSE Block .)


state 360

    (123) Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .

    DOT             reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LBRACK          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LPAREN          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    OROR            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    AMPAMP          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    EQEQ            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    NOTEQ           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LESS            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    GREAT           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LEQ             reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    GEQ             reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    PLUS            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    MINUS           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    OR              reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    CARET           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    TIMES           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    DIVIDE          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    MOD             reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    AMPERS          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LL              reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    GG              reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    AMPCAR          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    RBRACK          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    COMMA           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    SEMICOL         reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    RPAREN          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    COLON           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    PLUSPLUS        reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    MINUSMIN        reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    PLUSEQ          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    MINUSEQ         reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    TIMESEQ         reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    DIVIDEEQ        reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    MODEQ           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    AMPEQ           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    OREQ            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    CAREQ           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LLEQ            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    GGEQ            reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    EQUAL           reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)
    LBRACE          reduce using rule 123 (Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK .)


state 361

    (232) ForClause -> SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmt .

    LBRACE          reduce using rule 232 (ForClause -> SimpleStmt SEMICOL ConditionOpt SEMICOL SimpleStmt .)


state 362

    (212) ExprSwitchCase -> CASE ExpressionList .

    COLON           reduce using rule 212 (ExprSwitchCase -> CASE ExpressionList .)


state 363

    (211) ExprCaseClause -> ExprSwitchCase COLON . StatementList
    (42) StatementList -> . StatementRep
    (43) StatementRep -> . StatementRep Statement SEMICOL
    (44) StatementRep -> . epsilon
    (83) epsilon -> .

    RETURN          reduce using rule 83 (epsilon -> .)
    BREAK           reduce using rule 83 (epsilon -> .)
    CONTINUE        reduce using rule 83 (epsilon -> .)
    GOTO            reduce using rule 83 (epsilon -> .)
    LBRACE          reduce using rule 83 (epsilon -> .)
    IF              reduce using rule 83 (epsilon -> .)
    FOR             reduce using rule 83 (epsilon -> .)
    CONST           reduce using rule 83 (epsilon -> .)
    TYPE            reduce using rule 83 (epsilon -> .)
    VAR             reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    SWITCH          reduce using rule 83 (epsilon -> .)
    NOT             reduce using rule 83 (epsilon -> .)
    PLUS            reduce using rule 83 (epsilon -> .)
    MINUS           reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    AMPERS          reduce using rule 83 (epsilon -> .)
    LPAREN          reduce using rule 83 (epsilon -> .)
    INTEGER         reduce using rule 83 (epsilon -> .)
    FLOAT           reduce using rule 83 (epsilon -> .)
    IMAGINARY       reduce using rule 83 (epsilon -> .)
    RUNE            reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RBRACE          reduce using rule 83 (epsilon -> .)
    CASE            reduce using rule 83 (epsilon -> .)
    DEFAULT         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 195
    StatementRep                   shift and go to state 194
    StatementList                  shift and go to state 370

state 364

    (221) TypeSwitchCase -> CASE . TypeList
    (223) TypeList -> . Type TypeRep
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    TypeList                       shift and go to state 372
    Type                           shift and go to state 371
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 365

    (214) TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE .

    SEMICOL         reduce using rule 214 (TypeSwitchStmt -> SWITCH SimpleStmtOpt TypeSwitchGuard LBRACE TypeCaseClauseOpt RBRACE .)


state 366

    (220) TypeCaseClause -> TypeSwitchCase . COLON StatementList

    COLON           shift and go to state 373


state 367

    (218) TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .

    RBRACE          reduce using rule 218 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    CASE            reduce using rule 218 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)
    DEFAULT         reduce using rule 218 (TypeCaseClauseOpt -> TypeCaseClauseOpt TypeCaseClause .)


state 368

    (222) TypeSwitchCase -> DEFAULT .

    COLON           reduce using rule 222 (TypeSwitchCase -> DEFAULT .)


state 369

    (215) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN . TYPE RPAREN
    (124) TypeAssertion -> DOT LPAREN . Type RPAREN
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    TYPE            shift and go to state 374
    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 264
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 370

    (211) ExprCaseClause -> ExprSwitchCase COLON StatementList .

    RBRACE          reduce using rule 211 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    CASE            reduce using rule 211 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 211 (ExprCaseClause -> ExprSwitchCase COLON StatementList .)


state 371

    (223) TypeList -> Type . TypeRep
    (224) TypeRep -> . TypeRep COMMA Type
    (225) TypeRep -> . epsilon
    (83) epsilon -> .

    COMMA           reduce using rule 83 (epsilon -> .)
    COLON           reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 376
    TypeRep                        shift and go to state 375

state 372

    (221) TypeSwitchCase -> CASE TypeList .

    COLON           reduce using rule 221 (TypeSwitchCase -> CASE TypeList .)


state 373

    (220) TypeCaseClause -> TypeSwitchCase COLON . StatementList
    (42) StatementList -> . StatementRep
    (43) StatementRep -> . StatementRep Statement SEMICOL
    (44) StatementRep -> . epsilon
    (83) epsilon -> .

    RETURN          reduce using rule 83 (epsilon -> .)
    BREAK           reduce using rule 83 (epsilon -> .)
    CONTINUE        reduce using rule 83 (epsilon -> .)
    GOTO            reduce using rule 83 (epsilon -> .)
    LBRACE          reduce using rule 83 (epsilon -> .)
    IF              reduce using rule 83 (epsilon -> .)
    FOR             reduce using rule 83 (epsilon -> .)
    CONST           reduce using rule 83 (epsilon -> .)
    TYPE            reduce using rule 83 (epsilon -> .)
    VAR             reduce using rule 83 (epsilon -> .)
    IDENTIFIER      reduce using rule 83 (epsilon -> .)
    SWITCH          reduce using rule 83 (epsilon -> .)
    NOT             reduce using rule 83 (epsilon -> .)
    PLUS            reduce using rule 83 (epsilon -> .)
    MINUS           reduce using rule 83 (epsilon -> .)
    TIMES           reduce using rule 83 (epsilon -> .)
    AMPERS          reduce using rule 83 (epsilon -> .)
    LPAREN          reduce using rule 83 (epsilon -> .)
    INTEGER         reduce using rule 83 (epsilon -> .)
    FLOAT           reduce using rule 83 (epsilon -> .)
    IMAGINARY       reduce using rule 83 (epsilon -> .)
    RUNE            reduce using rule 83 (epsilon -> .)
    STRING          reduce using rule 83 (epsilon -> .)
    LBRACK          reduce using rule 83 (epsilon -> .)
    STRUCT          reduce using rule 83 (epsilon -> .)
    FUNC            reduce using rule 83 (epsilon -> .)
    SEMICOL         reduce using rule 83 (epsilon -> .)
    RBRACE          reduce using rule 83 (epsilon -> .)
    CASE            reduce using rule 83 (epsilon -> .)
    DEFAULT         reduce using rule 83 (epsilon -> .)

    epsilon                        shift and go to state 195
    StatementRep                   shift and go to state 194
    StatementList                  shift and go to state 377

state 374

    (215) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE . RPAREN

    RPAREN          shift and go to state 378


state 375

    (223) TypeList -> Type TypeRep .
    (224) TypeRep -> TypeRep . COMMA Type

    COLON           reduce using rule 223 (TypeList -> Type TypeRep .)
    COMMA           shift and go to state 379


state 376

    (225) TypeRep -> epsilon .

    COMMA           reduce using rule 225 (TypeRep -> epsilon .)
    COLON           reduce using rule 225 (TypeRep -> epsilon .)


state 377

    (220) TypeCaseClause -> TypeSwitchCase COLON StatementList .

    RBRACE          reduce using rule 220 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    CASE            reduce using rule 220 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)
    DEFAULT         reduce using rule 220 (TypeCaseClause -> TypeSwitchCase COLON StatementList .)


state 378

    (215) TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN .

    LBRACE          reduce using rule 215 (TypeSwitchGuard -> IdentifierOpt PrimaryExpr DOT LPAREN TYPE RPAREN .)


state 379

    (224) TypeRep -> TypeRep COMMA . Type
    (2) Type -> . TypeName
    (3) Type -> . TypeLit
    (4) Type -> . LPAREN Type RPAREN
    (5) TypeName -> . IDENTIFIER
    (6) TypeName -> . QualifiedIdent
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . FunctionType
    (82) QualifiedIdent -> . IDENTIFIER DOT TypeName
    (13) ArrayType -> . LBRACK ArrayLength RBRACK ElementType
    (16) StructType -> . STRUCT LBRACE FieldDeclRep RBRACE
    (23) PointerType -> . TIMES BaseType
    (25) FunctionType -> . FUNC Signature

    LPAREN          shift and go to state 61
    IDENTIFIER      shift and go to state 57
    LBRACK          shift and go to state 64
    STRUCT          shift and go to state 63
    TIMES           shift and go to state 60
    FUNC            shift and go to state 52

    StructType                     shift and go to state 58
    Type                           shift and go to state 380
    ArrayType                      shift and go to state 53
    TypeName                       shift and go to state 56
    PointerType                    shift and go to state 66
    FunctionType                   shift and go to state 67
    TypeLit                        shift and go to state 55
    QualifiedIdent                 shift and go to state 68

state 380

    (224) TypeRep -> TypeRep COMMA Type .

    COMMA           reduce using rule 224 (TypeRep -> TypeRep COMMA Type .)
    COLON           reduce using rule 224 (TypeRep -> TypeRep COMMA Type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for DOT in state 107 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 110 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 110 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 110 resolved as shift
WARNING: shift/reduce conflict for DOT in state 164 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 192 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 220 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 220 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 220 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 220 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 220 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 220 resolved as shift
WARNING: shift/reduce conflict for OROR in state 222 resolved as shift
WARNING: shift/reduce conflict for AMPAMP in state 222 resolved as shift
WARNING: shift/reduce conflict for EQEQ in state 222 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 222 resolved as shift
WARNING: shift/reduce conflict for LESS in state 222 resolved as shift
WARNING: shift/reduce conflict for GREAT in state 222 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 222 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 222 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 222 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 222 resolved as shift
WARNING: shift/reduce conflict for OR in state 222 resolved as shift
WARNING: shift/reduce conflict for CARET in state 222 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 222 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 222 resolved as shift
WARNING: shift/reduce conflict for MOD in state 222 resolved as shift
WARNING: shift/reduce conflict for AMPERS in state 222 resolved as shift
WARNING: shift/reduce conflict for LL in state 222 resolved as shift
WARNING: shift/reduce conflict for GG in state 222 resolved as shift
WARNING: shift/reduce conflict for AMPCAR in state 222 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 239 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 239 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 239 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 239 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 239 resolved as shift
WARNING: shift/reduce conflict for IMAGINARY in state 239 resolved as shift
WARNING: shift/reduce conflict for RUNE in state 239 resolved as shift
WARNING: shift/reduce conflict for STRING in state 239 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 239 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 239 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 239 resolved as shift
WARNING: shift/reduce conflict for DOT in state 241 resolved as shift
WARNING: shift/reduce conflict for DOT in state 273 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 289 resolved as shift
WARNING: reduce/reduce conflict in state 107 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (OperandName -> IDENTIFIER) in state 107
WARNING: reduce/reduce conflict in state 132 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (epsilon -> <empty>) in state 132
WARNING: reduce/reduce conflict in state 164 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (OperandName -> IDENTIFIER) in state 164
WARNING: reduce/reduce conflict in state 193 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (epsilon -> <empty>) in state 193
WARNING: reduce/reduce conflict in state 241 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (OperandName -> IDENTIFIER) in state 241
WARNING: reduce/reduce conflict in state 273 resolved using rule (TypeName -> IDENTIFIER)
WARNING: rejected rule (OperandName -> IDENTIFIER) in state 273
